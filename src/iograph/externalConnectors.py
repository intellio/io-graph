# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-02-03T05:27:31+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field
from typing_extensions import Annotated




class Configuration(BaseModel):
    authorized_app_ids: Annotated[
        Optional[List[str]],
        Field(
            description='A collection of application IDs for registered Microsoft Entra apps that are allowed to manage the externalConnection and to index content in the externalConnection.'
        ),
    ] = None
    field_odata_type: str


class Properties(BaseModel):
    field_odata_type: str


class UrlMatchInfo(BaseModel):
    base_urls: Annotated[
        Optional[List[str]],
        Field(
            description='A list of the URL prefixes that must match URLs to be processed by this URL-to-item-resolver.'
        ),
    ] = None
    url_pattern: Annotated[
        Optional[str],
        Field(
            description='A regular expression that will be matched towards the URL that is processed by this URL-to-item-resolver. The ECMAScript specification for regular expressions (ECMA-262) is used for the evaluation. The named groups defined by the regular expression will be used later to extract values from the URL.'
        ),
    ] = None
    field_odata_type: str


class UrlToItemResolverBase(BaseModel):
    priority: Annotated[
        Optional[float],
        Field(
            description='The priority which defines the sequence in which the urlToItemResolverBase instances are evaluated.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    field_odata_type: str


class AccessType(Enum):
    grant = 'grant'
    deny = 'deny'
    unknown_future_value = 'unknownFutureValue'


class AclType(Enum):
    user = 'user'
    group = 'group'
    everyone = 'everyone'
    everyone_except_guests = 'everyoneExceptGuests'
    external_group = 'externalGroup'
    unknown_future_value = 'unknownFutureValue'


class ConnectionOperationStatus(Enum):
    unspecified = 'unspecified'
    inprogress = 'inprogress'
    completed = 'completed'
    failed = 'failed'
    unknown_future_value = 'unknownFutureValue'


class ConnectionState(Enum):
    draft = 'draft'
    ready = 'ready'
    obsolete = 'obsolete'
    limit_exceeded = 'limitExceeded'
    unknown_future_value = 'unknownFutureValue'


class ExternalActivityType(Enum):
    viewed = 'viewed'
    modified = 'modified'
    created = 'created'
    commented = 'commented'
    unknown_future_value = 'unknownFutureValue'


class ExternalItemContentType(Enum):
    text = 'text'
    html = 'html'
    unknown_future_value = 'unknownFutureValue'


class IdentityType(Enum):
    user = 'user'
    group = 'group'
    external_group = 'externalGroup'
    unknown_future_value = 'unknownFutureValue'


class Label(Enum):
    title = 'title'
    url = 'url'
    created_by = 'createdBy'
    last_modified_by = 'lastModifiedBy'
    authors = 'authors'
    created_date_time = 'createdDateTime'
    last_modified_date_time = 'lastModifiedDateTime'
    file_name = 'fileName'
    file_extension = 'fileExtension'
    unknown_future_value = 'unknownFutureValue'
    icon_url = 'iconUrl'


class PropertyType(Enum):
    string = 'string'
    int64 = 'int64'
    double = 'double'
    date_time = 'dateTime'
    boolean = 'boolean'
    string_collection = 'stringCollection'
    int64_collection = 'int64Collection'
    double_collection = 'doubleCollection'
    date_time_collection = 'dateTimeCollection'
    unknown_future_value = 'unknownFutureValue'


class RuleOperation(Enum):
    null = 'null'
    equals = 'equals'
    not_equals = 'notEquals'
    contains = 'contains'
    not_contains = 'notContains'
    less_than = 'lessThan'
    greater_than = 'greaterThan'
    starts_with = 'startsWith'
    unknown_future_value = 'unknownFutureValue'


class ConnectionOperation(Entity):
    error: Annotated[
        Optional[Union[PublicError, Dict[str, Any]]],
        Field(
            description='If status is failed, provides more information about the error that caused the failure.'
        ),
    ] = None
    status: Annotated[
        Optional[Union[ConnectionOperationStatus, Dict[str, Any]]],
        Field(
            description='Indicates the status of the asynchronous operation. Possible values are: unspecified, inprogress, completed, failed, unknownFutureValue.'
        ),
    ] = None
    field_odata_type: str


class Identity(Entity):
    type: Annotated[
        Optional[Union[IdentityType, Dict[str, Any]]],
        Field(
            description='The type of identity. Possible values are: user or group for Microsoft Entra identities and externalgroup for groups in an external system.'
        ),
    ] = None
    field_odata_type: str


class Acl(BaseModel):
    access_type: Optional[AccessType] = None
    type: Optional[AclType] = None
    value: Annotated[
        Optional[str],
        Field(
            description='The unique identifer of the identity. For Microsoft Entra identities, value is set to the object identifier of the user, group or tenant for types user, group and everyone (and everyoneExceptGuests) respectively. For external groups value is set to the ID of the externalGroup'
        ),
    ] = None
    field_odata_type: str


class ActivitySettings(BaseModel):
    url_to_item_resolvers: Annotated[
        Optional[List[UrlToItemResolverBase]],
        Field(
            description='Specifies configurations to identify an externalItem based on a shared URL.'
        ),
    ] = None
    field_odata_type: str


class ExternalItemContent(BaseModel):
    type: Optional[ExternalItemContentType] = None
    value: Annotated[
        Optional[str], Field(description='The content for the externalItem. Required.')
    ] = None
    field_odata_type: str


class ItemIdResolver(UrlToItemResolverBase):
    item_id: Annotated[
        Optional[str],
        Field(
            description='Pattern that specifies how to form the ID of the external item that the URL represents. The named groups from the regular expression in urlPattern within the urlMatchInfo can be referenced by inserting the group name inside curly brackets.'
        ),
    ] = None
    url_match_info: Annotated[
        Optional[Union[UrlMatchInfo, Dict[str, Any]]],
        Field(description='Configurations to match and resolve URL.'),
    ] = None
    field_odata_type: str


class Property(BaseModel):
    aliases: Annotated[
        Optional[List[str]],
        Field(
            description="A set of aliases or a friendly name for the property. Maximum 32 characters. Only alphanumeric characters allowed. For example, each string may not contain control characters, whitespace, or any of the following: :, ;, ,, (, ), [, ], {, }, %, $, +, !, *, =, &, ?, @, #, /, ~, ', ', <, >, `, ^. Optional."
        ),
    ] = None
    is_queryable: Annotated[
        Optional[bool],
        Field(
            description='Specifies if the property is queryable. Queryable properties can be used in Keyword Query Language (KQL) queries. Optional.'
        ),
    ] = None
    is_refinable: Annotated[
        Optional[bool],
        Field(
            description='Specifies if the property is refinable.  Refinable properties can be used to filter search results in the Search API and add a refiner control in the Microsoft Search user experience. Optional.'
        ),
    ] = None
    is_retrievable: Annotated[
        Optional[bool],
        Field(
            description='Specifies if the property is retrievable. Retrievable properties are returned in the result set when items are returned by the search API. Retrievable properties are also available to add to the display template used to render search results. Optional.'
        ),
    ] = None
    is_searchable: Annotated[
        Optional[bool],
        Field(
            description="Specifies if the property is searchable. Only properties of type String or StringCollection can be searchable. Nonsearchable properties aren't added to the search index. Optional."
        ),
    ] = None
    labels: Annotated[
        Optional[List[Union[Label, Dict[str, Any]]]],
        Field(
            description='Specifies one or more well-known tags added against a property. Labels help Microsoft Search understand the semantics of the data in the connection. Adding appropriate labels would result in an enhanced search experience (for example, better relevance). Optional.The possible values are: title, url, createdBy, lastModifiedBy, authors, createdDateTime, lastModifiedDateTime, fileName, fileExtension, unknownFutureValue, iconUrl. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: iconUrl.'
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="The name of the property. Maximum 32 characters. Only alphanumeric characters allowed. For example, each string may not contain control characters, whitespace, or any of the following: :, ;, ,, (, ), [, ], {, }, %, $, +, !, *, =, &, ?, @, #, /, ~, ', ', <, >, `, ^.  Required."
        ),
    ] = None
    type: Optional[PropertyType] = None
    field_odata_type: str


class PropertyRule(BaseModel):
    operation: Optional[RuleOperation] = None
    property: Annotated[
        Optional[str],
        Field(description='The property from the externalItem schema. Required.'),
    ] = None
    values: Annotated[
        Optional[List[str]],
        Field(
            description='A collection with one or many strings. One or more specified strings are matched with the specified property using the specified operation. Required.'
        ),
    ] = None
    values_joined_by: Optional[BinaryOperator] = None
    field_odata_type: str


class ConnectionOperationCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[ConnectionOperation]] = None


class IdentityCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Identity]] = None


class AclCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Acl]] = None


class PropertyCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Property]] = None


class UrlToItemResolverBaseCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[UrlToItemResolverBase]] = None


class PropertyRuleCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[PropertyRule]] = None


class ExternalActivity(Entity):
    start_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when the particular activity occurred. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    type: Optional[ExternalActivityType] = None
    performed_by: Annotated[
        Optional[Union[Identity, Dict[str, Any]]],
        Field(
            description='Represents an identity used to identify who is responsible for the activity.'
        ),
    ] = None
    field_odata_type: str


class ExternalActivityResult(ExternalActivity):
    error: Annotated[
        Optional[Union[PublicError, Dict[str, Any]]],
        Field(
            description='Error information that explains the failure to process an external activity.'
        ),
    ] = None
    field_odata_type: str


class ExternalGroup(Entity):
    description: Annotated[
        Optional[str],
        Field(description='The description of the external group. Optional.'),
    ] = None
    display_name: Annotated[
        Optional[str],
        Field(description='The friendly name of the external group. Optional.'),
    ] = None
    members: Annotated[
        Optional[List[Identity]],
        Field(
            description='A member added to an externalGroup. You can add Microsoft Entra users, Microsoft Entra groups, or an externalGroup as members.'
        ),
    ] = None
    field_odata_type: str


class ExternalItem(Entity):
    acl: Annotated[
        Optional[List[Acl]],
        Field(
            description='An array of access control entries. Each entry specifies the access granted to a user or group. Required.'
        ),
    ] = None
    content: Annotated[
        Optional[Union[ExternalItemContent, Dict[str, Any]]],
        Field(
            description='A plain-text  representation of the contents of the item. The text in this property is full-text indexed. Optional.'
        ),
    ] = None
    properties: Annotated[
        Optional[Union[Properties, Dict[str, Any]]],
        Field(
            description='A property bag with the properties of the item. The properties MUST conform to the schema defined for the externalConnection. Required.'
        ),
    ] = None
    activities: Annotated[
        Optional[List[ExternalActivity]],
        Field(
            description='Returns a list of activities performed on the item. Write-only.'
        ),
    ] = None
    field_odata_type: str


class Schema(Entity):
    base_type: Annotated[
        Optional[str],
        Field(
            description='Must be set to microsoft.graph.externalConnector.externalItem. Required.'
        ),
    ] = None
    properties: Annotated[
        Optional[List[Property]],
        Field(
            description='The properties defined for the items in the connection. The minimum number of properties is one, the maximum is 128.'
        ),
    ] = None
    field_odata_type: str


class DisplayTemplate(BaseModel):
    id: Annotated[
        Optional[str],
        Field(
            description='The text identifier for the display template; for example, contosoTickets. Maximum 16 characters. Only alphanumeric characters allowed.'
        ),
    ] = None
    layout: Annotated[
        Optional[Any],
        Field(
            description="The definition of the content's appearance, represented by an Adaptive Card, which is a JSON-serialized card object model."
        ),
    ] = None
    priority: Annotated[
        Optional[float],
        Field(
            description='Defines the priority of a display template. A display template with priority 1 is evaluated before a template with priority 4. Gaps in priority values are supported. Must be positive value.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    rules: Annotated[
        Optional[List[PropertyRule]],
        Field(
            description='Specifies additional rules for selecting this display template based on the item schema. Optional.'
        ),
    ] = None
    field_odata_type: str


class SearchSettings(BaseModel):
    search_result_templates: Annotated[
        Optional[List[DisplayTemplate]],
        Field(
            description='Enables the developer to define the appearance of the content and configure conditions that dictate when the template should be displayed. Maximum of 2 search result templates per connection.'
        ),
    ] = None
    field_odata_type: str


class ExternalGroupCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[ExternalGroup]] = None


class ExternalItemCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[ExternalItem]] = None


class ExternalActivityCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[ExternalActivity]] = None


class ExternalActivityResultCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[ExternalActivityResult]] = None


class DisplayTemplateCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[DisplayTemplate]] = None


class ExternalConnection(Entity):
    activity_settings: Annotated[
        Optional[Union[ActivitySettings, Dict[str, Any]]],
        Field(
            description='Collects configurable settings related to activities involving connector content.'
        ),
    ] = None
    configuration: Annotated[
        Optional[Union[Configuration, Dict[str, Any]]],
        Field(
            description='Specifies additional application IDs that are allowed to manage the connection and to index content in the connection. Optional.'
        ),
    ] = None
    connector_id: Annotated[
        Optional[str], Field(description='The Teams app ID. Optional.')
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description='Description of the connection displayed in the Microsoft 365 admin center. Optional.'
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description='The display name of the connection to be displayed in the Microsoft 365 admin center. Maximum length of 128 characters. Required.'
        ),
    ] = None
    search_settings: Annotated[
        Optional[Union[SearchSettings, Dict[str, Any]]],
        Field(
            description='The settings configuring the search experience for content in this connection, such as the display templates for search results.'
        ),
    ] = None
    state: Annotated[
        Optional[Union[ConnectionState, Dict[str, Any]]],
        Field(
            description='Indicates the current state of the connection. Possible values are: draft, ready, obsolete, limitExceeded, unknownFutureValue.'
        ),
    ] = None
    groups: Optional[List[ExternalGroup]] = None
    items: Optional[List[ExternalItem]] = None
    operations: Optional[List[ConnectionOperation]] = None
    schema_: Optional[Union[Schema, Dict[str, Any]]] = None
    field_odata_type: str


class ExternalConnectionCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[ExternalConnection]] = None


class External(BaseModel):
    connections: Optional[List[ExternalConnection]] = None
    field_odata_type: str


from . import BinaryOperator, PublicError
from . import BaseCollectionPaginationCountResponse
from . import Entity