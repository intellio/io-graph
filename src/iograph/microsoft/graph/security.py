# generated by datamodel-codegen:
#   filename:  https://github.com/microsoftgraph/msgraph-metadata/raw/refs/heads/master/openapi/v1.0/openapi.yaml
#   timestamp: 2025-02-03T03:59:48+00:00

from __future__ import annotations

from datetime import datetime, timedelta
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field
from typing_extensions import Annotated

from ... import ReferenceNumeric
from ... import (
    BaseCollectionPaginationCountResponse,
)
from . import Group, IdentitySet, PhysicalAddress, PublicError, ResultInfo, Site
from . import Entity


class Artifact(Entity):
    field_odata_type: str


class DataSet(Entity):
    created_by: Optional[Union[IdentitySet, Dict[str, Any]]] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    description: Optional[str] = None
    display_name: Optional[str] = None
    field_odata_type: str


class DispositionReviewStage(Entity):
    name: Annotated[
        Optional[str],
        Field(description='Name representing each stage within a collection.'),
    ] = None
    reviewers_email_addresses: Annotated[
        Optional[List[str]],
        Field(description='A collection of reviewers at each stage.'),
    ] = None
    stage_number: Annotated[
        Optional[str],
        Field(
            description='The unique sequence number for each stage of the disposition review.'
        ),
    ] = None
    field_odata_type: str


class FilePlanDescriptorTemplate(Entity):
    created_by: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(
            description='Represents the user who created the filePlanDescriptorTemplate column.'
        ),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Represents the date and time in which the filePlanDescriptorTemplate is created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    display_name: Annotated[
        Optional[str],
        Field(
            description='Unique string that defines a filePlanDescriptorTemplate name.'
        ),
    ] = None
    field_odata_type: str


class FilePlanReferenceTemplate(FilePlanDescriptorTemplate):
    field_odata_type: str


class NetworkAdapter(Entity):
    is_enabled: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether the network adapter is selected for capturing and analyzing network traffic.'
        ),
    ] = None
    name: Annotated[
        Optional[str], Field(description='The name of the network adapter.')
    ] = None
    field_odata_type: str


class RetentionEventType(Entity):
    created_by: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(description='The user who created the retentionEventType.'),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date time when the retentionEventType was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    description: Annotated[
        Optional[str], Field(description='Optional information about the event type.')
    ] = None
    display_name: Annotated[
        Optional[str], Field(description='Name of the event type.')
    ] = None
    last_modified_by: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(description='The user who last modified the retentionEventType.'),
    ] = None
    last_modified_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The latest date time when the retentionEventType was modified.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    field_odata_type: str


class Search(Entity):
    content_query: Optional[str] = None
    created_by: Optional[Union[IdentitySet, Dict[str, Any]]] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    description: Optional[str] = None
    display_name: Optional[str] = None
    last_modified_by: Optional[Union[IdentitySet, Dict[str, Any]]] = None
    last_modified_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    field_odata_type: str


class SubcategoryTemplate(FilePlanDescriptorTemplate):
    field_odata_type: str


class Tag(Entity):
    created_by: Optional[Union[IdentitySet, Dict[str, Any]]] = None
    description: Optional[str] = None
    display_name: Optional[str] = None
    last_modified_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    field_odata_type: str


class TriggerTypesRoot(Entity):
    retention_event_types: Optional[List[RetentionEventType]] = None
    field_odata_type: str


class UnclassifiedArtifact(Artifact):
    kind: Annotated[
        Optional[str],
        Field(
            description='The kind for this unclassifiedArtifact resource, describing what this value means.'
        ),
    ] = None
    value: Annotated[
        Optional[str], Field(description='The value for this unclassifiedArtifact.')
    ] = None
    field_odata_type: str


class VulnerabilityComponent(Entity):
    name: Annotated[
        Optional[str], Field(description='The name of this vulnerability component.')
    ] = None
    field_odata_type: str


class AlertComment(BaseModel):
    comment: Annotated[Optional[str], Field(description='The comment text.')] = None
    created_by_display_name: Annotated[
        Optional[str],
        Field(description='The person or app name that submitted the comment.'),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The time when the comment was submitted.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    field_odata_type: str


class AutonomousSystem(BaseModel):
    name: Annotated[
        Optional[str], Field(description='The name of the autonomous system.')
    ] = None
    number: Annotated[
        Optional[float],
        Field(
            description='The autonomous system number, assigned by IANA.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    organization: Annotated[
        Optional[str],
        Field(description='The name of the autonomous system organization.'),
    ] = None
    value: Annotated[
        Optional[str],
        Field(description='A displayable value for these autonomous system details.'),
    ] = None
    field_odata_type: str


class DeploymentAccessKeyType(BaseModel):
    deployment_access_key: Annotated[
        Optional[str], Field(description='The deployment access key.')
    ] = None
    field_odata_type: str


class Dictionary(BaseModel):
    field_odata_type: str


class DynamicColumnValue(BaseModel):
    field_odata_type: str


class EmailSender(BaseModel):
    display_name: Annotated[
        Optional[str], Field(description='The name of the sender.')
    ] = None
    domain_name: Annotated[Optional[str], Field(description='Sender domain.')] = None
    email_address: Annotated[
        Optional[str], Field(description='Sender email address.')
    ] = None
    field_odata_type: str


class ExportFileMetadata(BaseModel):
    download_url: Optional[str] = None
    file_name: Optional[str] = None
    size: Optional[float] = None
    field_odata_type: str


class FileDetails(BaseModel):
    file_name: Annotated[Optional[str], Field(description='The name of the file.')] = (
        None
    )
    file_path: Annotated[
        Optional[str],
        Field(description='The file path (location) of the file instance.'),
    ] = None
    file_publisher: Annotated[
        Optional[str], Field(description='The publisher of the file.')
    ] = None
    file_size: Annotated[
        Optional[float], Field(description='The size of the file in bytes.')
    ] = None
    issuer: Annotated[
        Optional[str],
        Field(
            description='The certificate authority (CA) that issued the certificate.'
        ),
    ] = None
    sha1: Annotated[
        Optional[str],
        Field(description='The Sha1 cryptographic hash of the file content.'),
    ] = None
    sha256: Annotated[
        Optional[str],
        Field(description='The Sha256 cryptographic hash of the file content.'),
    ] = None
    signer: Annotated[
        Optional[str], Field(description='The signer of the signed file.')
    ] = None
    field_odata_type: str


class FilePlanDescriptorBase(BaseModel):
    display_name: Annotated[
        Optional[str],
        Field(
            description='Unique string that defines the name for the file plan descriptor associated with a particular retention label.'
        ),
    ] = None
    field_odata_type: str


class FilePlanReference(FilePlanDescriptorBase):
    field_odata_type: str


class FilePlanSubcategory(FilePlanDescriptorBase):
    field_odata_type: str


class HostPortBanner(BaseModel):
    banner: Annotated[
        Optional[str],
        Field(
            description='The text response received from a web component when scanning a hostPort.'
        ),
    ] = None
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first date and time when Microsoft Defender Threat Intelligence observed the hostPortBanner. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The last date and time when Microsoft Defender Threat Intelligence observed the hostPortBanner. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    scan_protocol: Annotated[
        Optional[str],
        Field(description='The specific protocol used to scan the hostPort.'),
    ] = None
    times_observed: Annotated[
        Optional[float],
        Field(
            description='The total amount of times that Microsoft Defender Threat Intelligence has observed the hostPortBanner in all its scans.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    field_odata_type: str


class HostSslCertificatePort(BaseModel):
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first date and time when this port was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The most recent date and time when this port was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    port: Annotated[
        Optional[float],
        Field(description='The port number.', ge=-2147483648.0, le=2147483647.0),
    ] = None
    field_odata_type: str


class HuntingRowResult(BaseModel):
    field_odata_type: str


class Hyperlink(BaseModel):
    name: Annotated[
        Optional[str], Field(description='The name for this hyperlink.')
    ] = None
    url: Annotated[Optional[str], Field(description='The URL for this hyperlink.')] = (
        None
    )
    field_odata_type: str


class IntelligenceProfileCountryOrRegionOfOrigin(BaseModel):
    code: Annotated[
        Optional[str],
        Field(
            description='A codified representation for this country/region of origin.'
        ),
    ] = None
    label: Annotated[
        Optional[str],
        Field(description='A display label for this ountry/region of origin.'),
    ] = None
    field_odata_type: str


class LoggedOnUser(BaseModel):
    account_name: Annotated[
        Optional[str], Field(description='User account name of the logged-on user.')
    ] = None
    domain_name: Annotated[
        Optional[str], Field(description='User account domain of the logged-on user.')
    ] = None
    field_odata_type: str


class OcrSettings(BaseModel):
    is_enabled: Annotated[
        Optional[bool],
        Field(description='Indicates whether or not OCR is enabled for the case.'),
    ] = None
    max_image_size: Annotated[
        Optional[float],
        Field(
            description='Maximum image size that will be processed in KB).',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    timeout: Annotated[
        Optional[timedelta],
        Field(
            description='The timeout duration for the OCR engine. A longer timeout might increase success of OCR, but might add to the total processing time.',
            pattern='^-?P([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+([.][0-9]+)?S)?)?$',
        ),
    ] = None
    field_odata_type: str


class RedundancyDetectionSettings(BaseModel):
    is_enabled: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether email threading and near duplicate detection are enabled.'
        ),
    ] = None
    max_words: Annotated[
        Optional[float],
        Field(
            description='Specifies the maximum number of words used for email threading and near duplicate detection. To learn more, see Minimum/maximum number of words.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    min_words: Annotated[
        Optional[float],
        Field(
            description='Specifies the minimum number of words used for email threading and near duplicate detection. To learn more, see Minimum/maximum number of words.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    similarity_threshold: Annotated[
        Optional[float],
        Field(
            description='Specifies the similarity level for documents to be put in the same near duplicate set. To learn more, see Document and email similarity threshold.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    field_odata_type: str


class RetentionDuration(BaseModel):
    field_odata_type: str


class RetentionDurationForever(RetentionDuration):
    field_odata_type: str


class RetentionDurationInDays(RetentionDuration):
    days: Annotated[
        Optional[float],
        Field(
            description='Specifies the time period in days for which an item with the applied retention label will be retained for.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    field_odata_type: str


class SensorDeploymentPackage(BaseModel):
    download_url: Annotated[
        Optional[str],
        Field(description='URL to download the sensor deployment package.'),
    ] = None
    version: Annotated[Optional[str], Field(description='Version of the sensor.')] = (
        None
    )
    field_odata_type: str


class SensorSettings(BaseModel):
    description: Annotated[
        Optional[str], Field(description='Description of the sensor.')
    ] = None
    domain_controller_dns_names: Annotated[
        Optional[List[str]], Field(description='DNS names for the domain controller')
    ] = None
    is_delayed_deployment_enabled: Annotated[
        Optional[bool],
        Field(description='Indicates whether to delay updates for the sensor.'),
    ] = None
    network_adapters: Optional[List[NetworkAdapter]] = None
    field_odata_type: str


class SinglePropertySchema(BaseModel):
    name: Annotated[Optional[str], Field(description='The name of the property.')] = (
        None
    )
    type: Annotated[Optional[str], Field(description='The type of the property.')] = (
        None
    )
    field_odata_type: str


class SslCertificateEntity(BaseModel):
    address: Annotated[
        Optional[Union[PhysicalAddress, Dict[str, Any]]],
        Field(description='A physical address of the entity.'),
    ] = None
    alternate_names: Annotated[
        Optional[List[str]],
        Field(
            description='Alternate names for this entity that are part of the certificate.'
        ),
    ] = None
    common_name: Annotated[
        Optional[str], Field(description='A common name for this entity.')
    ] = None
    email: Annotated[Optional[str], Field(description='An email for this entity.')] = (
        None
    )
    given_name: Annotated[
        Optional[str],
        Field(
            description="If the entity is a person, this is the person's given name (first name)."
        ),
    ] = None
    organization_name: Annotated[
        Optional[str],
        Field(
            description='If the entity is an organization, this is the name of the organization.'
        ),
    ] = None
    organization_unit_name: Annotated[
        Optional[str],
        Field(
            description='If the entity is an organization, this communicates if a unit in the organization is named on the entity.'
        ),
    ] = None
    serial_number: Annotated[
        Optional[str],
        Field(
            description='A serial number assigned to the entity; usually only available if the entity is the issuer.'
        ),
    ] = None
    surname: Annotated[
        Optional[str],
        Field(
            description="If the entity is a person, this is the person's surname (last name)."
        ),
    ] = None
    field_odata_type: str


class Stream(BaseModel):
    name: Optional[str] = None
    field_odata_type: str


class StringValueDictionary(BaseModel):
    field_odata_type: str


class TopicModelingSettings(BaseModel):
    dynamically_adjust_topic_count: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether the themes model should dynamically optimize the number of generated topics. To learn more, see Adjust maximum number of themes dynamically.'
        ),
    ] = None
    ignore_numbers: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether the themes model should exclude numbers while parsing document texts. To learn more, see Include numbers in themes.'
        ),
    ] = None
    is_enabled: Annotated[
        Optional[bool],
        Field(description='Indicates whether themes model is enabled for the case.'),
    ] = None
    topic_count: Annotated[
        Optional[float],
        Field(
            description='The total number of topics that the themes model will generate for a review set. To learn more, see Maximum number of themes.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    field_odata_type: str


class UserAccount(BaseModel):
    account_name: Annotated[
        Optional[str], Field(description='The displayed name of the user account.')
    ] = None
    azure_ad_user_id: Annotated[
        Optional[str],
        Field(description='The user object identifier in Microsoft Entra ID.'),
    ] = None
    display_name: Annotated[
        Optional[str], Field(description='The user display name in Microsoft Entra ID.')
    ] = None
    domain_name: Annotated[
        Optional[str],
        Field(
            description='The name of the Active Directory domain of which the user is a member.'
        ),
    ] = None
    user_principal_name: Annotated[
        Optional[str],
        Field(
            description='The user principal name of the account in Microsoft Entra ID.'
        ),
    ] = None
    user_sid: Annotated[
        Optional[str],
        Field(description='The local security identifier of the user account.'),
    ] = None
    field_odata_type: str


class WhoisContact(BaseModel):
    address: Annotated[
        Optional[Union[PhysicalAddress, Dict[str, Any]]],
        Field(description='The physical address of the entity.'),
    ] = None
    email: Annotated[
        Optional[str], Field(description='The email of this WHOIS contact.')
    ] = None
    fax: Annotated[
        Optional[str],
        Field(description='The fax of this WHOIS contact. No format is guaranteed.'),
    ] = None
    name: Annotated[
        Optional[str], Field(description='The name of this WHOIS contact.')
    ] = None
    organization: Annotated[
        Optional[str], Field(description='The organization of this WHOIS contact.')
    ] = None
    telephone: Annotated[
        Optional[str],
        Field(
            description='The telephone of this WHOIS contact. No format is guaranteed.'
        ),
    ] = None
    field_odata_type: str


class ActionAfterRetentionPeriod(Enum):
    none = 'none'
    delete = 'delete'
    start_disposition_review = 'startDispositionReview'
    relabel = 'relabel'
    unknown_future_value = 'unknownFutureValue'


class AdditionalDataOptions(Enum):
    all_versions = 'allVersions'
    linked_files = 'linkedFiles'
    unknown_future_value = 'unknownFutureValue'


class AdditionalOptions(Enum):
    none = 'none'
    teams_and_yammer_conversations = 'teamsAndYammerConversations'
    cloud_attachments = 'cloudAttachments'
    all_document_versions = 'allDocumentVersions'
    subfolder_contents = 'subfolderContents'
    list_attachments = 'listAttachments'
    unknown_future_value = 'unknownFutureValue'


class AlertClassification(Enum):
    unknown = 'unknown'
    false_positive = 'falsePositive'
    true_positive = 'truePositive'
    informational_expected_activity = 'informationalExpectedActivity'
    unknown_future_value = 'unknownFutureValue'


class AlertDetermination(Enum):
    unknown = 'unknown'
    apt = 'apt'
    malware = 'malware'
    security_personnel = 'securityPersonnel'
    security_testing = 'securityTesting'
    unwanted_software = 'unwantedSoftware'
    other = 'other'
    multi_staged_attack = 'multiStagedAttack'
    compromised_account = 'compromisedAccount'
    phishing = 'phishing'
    malicious_user_activity = 'maliciousUserActivity'
    not_malicious = 'notMalicious'
    not_enough_data_to_validate = 'notEnoughDataToValidate'
    confirmed_activity = 'confirmedActivity'
    line_of_business_application = 'lineOfBusinessApplication'
    unknown_future_value = 'unknownFutureValue'


class AlertSeverity(Enum):
    unknown = 'unknown'
    informational = 'informational'
    low = 'low'
    medium = 'medium'
    high = 'high'
    unknown_future_value = 'unknownFutureValue'


class AlertStatus(Enum):
    unknown = 'unknown'
    new = 'new'
    in_progress = 'inProgress'
    resolved = 'resolved'
    unknown_future_value = 'unknownFutureValue'


class BehaviorDuringRetentionPeriod(Enum):
    do_not_retain = 'doNotRetain'
    retain = 'retain'
    retain_as_record = 'retainAsRecord'
    retain_as_regulatory_record = 'retainAsRegulatoryRecord'
    unknown_future_value = 'unknownFutureValue'


class CaseAction(Enum):
    content_export = 'contentExport'
    apply_tags = 'applyTags'
    convert_to_pdf = 'convertToPdf'
    index = 'index'
    estimate_statistics = 'estimateStatistics'
    add_to_review_set = 'addToReviewSet'
    hold_update = 'holdUpdate'
    unknown_future_value = 'unknownFutureValue'
    purge_data = 'purgeData'
    export_report = 'exportReport'
    export_result = 'exportResult'


class CaseOperationStatus(Enum):
    not_started = 'notStarted'
    submission_failed = 'submissionFailed'
    running = 'running'
    succeeded = 'succeeded'
    partially_succeeded = 'partiallySucceeded'
    failed = 'failed'
    unknown_future_value = 'unknownFutureValue'


class CaseStatus(Enum):
    unknown = 'unknown'
    active = 'active'
    pending_delete = 'pendingDelete'
    closing = 'closing'
    closed = 'closed'
    closed_with_error = 'closedWithError'
    unknown_future_value = 'unknownFutureValue'


class ChildSelectability(Enum):
    one = 'One'
    many = 'Many'
    unknown_future_value = 'unknownFutureValue'


class ContainerPortProtocol(Enum):
    udp = 'udp'
    tcp = 'tcp'
    sctp = 'sctp'
    unknown_future_value = 'unknownFutureValue'


class ContentFormat(Enum):
    text = 'text'
    html = 'html'
    markdown = 'markdown'
    unknown_future_value = 'unknownFutureValue'


class DataSourceContainerStatus(Enum):
    active = 'active'
    released = 'released'
    unknown_future_value = 'unknownFutureValue'


class DataSourceHoldStatus(Enum):
    not_applied = 'notApplied'
    applied = 'applied'
    applying = 'applying'
    removing = 'removing'
    partial = 'partial'
    unknown_future_value = 'unknownFutureValue'


class DataSourceScopes(Enum):
    none = 'none'
    all_tenant_mailboxes = 'allTenantMailboxes'
    all_tenant_sites = 'allTenantSites'
    all_case_custodians = 'allCaseCustodians'
    all_case_noncustodial_data_sources = 'allCaseNoncustodialDataSources'
    unknown_future_value = 'unknownFutureValue'


class DefaultRecordBehavior(Enum):
    start_locked = 'startLocked'
    start_unlocked = 'startUnlocked'
    unknown_future_value = 'unknownFutureValue'


class DefenderAvStatus(Enum):
    not_reporting = 'notReporting'
    disabled = 'disabled'
    not_updated = 'notUpdated'
    updated = 'updated'
    unknown = 'unknown'
    not_supported = 'notSupported'
    unknown_future_value = 'unknownFutureValue'


class DeploymentStatus(Enum):
    up_to_date = 'upToDate'
    outdated = 'outdated'
    updating = 'updating'
    update_failed = 'updateFailed'
    not_configured = 'notConfigured'
    unreachable = 'unreachable'
    disconnected = 'disconnected'
    start_failure = 'startFailure'
    syncing = 'syncing'
    unknown_future_value = 'unknownFutureValue'


class DetectionSource(Enum):
    unknown = 'unknown'
    microsoft_defender_for_endpoint = 'microsoftDefenderForEndpoint'
    antivirus = 'antivirus'
    smart_screen = 'smartScreen'
    custom_ti = 'customTi'
    microsoft_defender_for_office365 = 'microsoftDefenderForOffice365'
    automated_investigation = 'automatedInvestigation'
    microsoft_threat_experts = 'microsoftThreatExperts'
    custom_detection = 'customDetection'
    microsoft_defender_for_identity = 'microsoftDefenderForIdentity'
    cloud_app_security = 'cloudAppSecurity'
    microsoft365_defender = 'microsoft365Defender'
    azure_ad_identity_protection = 'azureAdIdentityProtection'
    manual = 'manual'
    microsoft_data_loss_prevention = 'microsoftDataLossPrevention'
    app_governance_policy = 'appGovernancePolicy'
    app_governance_detection = 'appGovernanceDetection'
    unknown_future_value = 'unknownFutureValue'
    microsoft_defender_for_cloud = 'microsoftDefenderForCloud'
    microsoft_defender_for_io_t = 'microsoftDefenderForIoT'
    microsoft_defender_for_servers = 'microsoftDefenderForServers'
    microsoft_defender_for_storage = 'microsoftDefenderForStorage'
    microsoft_defender_for_dns = 'microsoftDefenderForDNS'
    microsoft_defender_for_databases = 'microsoftDefenderForDatabases'
    microsoft_defender_for_containers = 'microsoftDefenderForContainers'
    microsoft_defender_for_network = 'microsoftDefenderForNetwork'
    microsoft_defender_for_app_service = 'microsoftDefenderForAppService'
    microsoft_defender_for_key_vault = 'microsoftDefenderForKeyVault'
    microsoft_defender_for_resource_manager = 'microsoftDefenderForResourceManager'
    microsoft_defender_for_api_management = 'microsoftDefenderForApiManagement'
    nrt_alerts = 'nrtAlerts'
    scheduled_alerts = 'scheduledAlerts'
    microsoft_defender_threat_intelligence_analytics = (
        'microsoftDefenderThreatIntelligenceAnalytics'
    )
    built_in_ml = 'builtInMl'
    microsoft_insider_risk_management = 'microsoftInsiderRiskManagement'
    microsoft_sentinel = 'microsoftSentinel'


class DetectionStatus(Enum):
    detected = 'detected'
    blocked = 'blocked'
    prevented = 'prevented'
    unknown_future_value = 'unknownFutureValue'


class DeviceHealthStatus(Enum):
    active = 'active'
    inactive = 'inactive'
    impaired_communication = 'impairedCommunication'
    no_sensor_data = 'noSensorData'
    no_sensor_data_impaired_communication = 'noSensorDataImpairedCommunication'
    unknown = 'unknown'
    unknown_future_value = 'unknownFutureValue'


class DeviceRiskScore(Enum):
    none = 'none'
    informational = 'informational'
    low = 'low'
    medium = 'medium'
    high = 'high'
    unknown_future_value = 'unknownFutureValue'


class EventPropagationStatus(Enum):
    none = 'none'
    in_processing = 'inProcessing'
    failed = 'failed'
    success = 'success'
    unknown_future_value = 'unknownFutureValue'


class EventStatusType(Enum):
    pending = 'pending'
    error = 'error'
    success = 'success'
    not_avaliable = 'notAvaliable'
    unknown_future_value = 'unknownFutureValue'


class EvidenceRemediationStatus(Enum):
    none = 'none'
    remediated = 'remediated'
    prevented = 'prevented'
    blocked = 'blocked'
    not_found = 'notFound'
    unknown_future_value = 'unknownFutureValue'
    active = 'active'
    pending_approval = 'pendingApproval'
    declined = 'declined'
    unremediated = 'unremediated'
    running = 'running'
    partially_remediated = 'partiallyRemediated'


class EvidenceRole(Enum):
    unknown = 'unknown'
    contextual = 'contextual'
    scanned = 'scanned'
    source = 'source'
    destination = 'destination'
    created = 'created'
    added = 'added'
    compromised = 'compromised'
    edited = 'edited'
    attacked = 'attacked'
    attacker = 'attacker'
    command_and_control = 'commandAndControl'
    loaded = 'loaded'
    suspicious = 'suspicious'
    policy_violator = 'policyViolator'
    unknown_future_value = 'unknownFutureValue'


class EvidenceVerdict(Enum):
    unknown = 'unknown'
    suspicious = 'suspicious'
    malicious = 'malicious'
    no_threats_found = 'noThreatsFound'
    unknown_future_value = 'unknownFutureValue'


class ExportCriteria(Enum):
    search_hits = 'searchHits'
    partially_indexed = 'partiallyIndexed'
    unknown_future_value = 'unknownFutureValue'


class ExportFileStructure(Enum):
    none = 'none'
    directory = 'directory'
    pst = 'pst'
    unknown_future_value = 'unknownFutureValue'


class ExportFormat(Enum):
    pst = 'pst'
    msg = 'msg'
    eml = 'eml'
    unknown_future_value = 'unknownFutureValue'


class ExportLocation(Enum):
    responsive_locations = 'responsiveLocations'
    nonresponsive_locations = 'nonresponsiveLocations'
    unknown_future_value = 'unknownFutureValue'


class ExportOptions(Enum):
    original_files = 'originalFiles'
    text = 'text'
    pdf_replacement = 'pdfReplacement'
    tags = 'tags'
    unknown_future_value = 'unknownFutureValue'


class FileHashAlgorithm(Enum):
    unknown = 'unknown'
    md5 = 'md5'
    sha1 = 'sha1'
    sha256 = 'sha256'
    sha256ac = 'sha256ac'
    unknown_future_value = 'unknownFutureValue'


class GoogleCloudLocationType(Enum):
    unknown = 'unknown'
    regional = 'regional'
    zonal = 'zonal'
    global_ = 'global'
    unknown_future_value = 'unknownFutureValue'


class HealthIssueSeverity(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'
    unknown_future_value = 'unknownFutureValue'


class HealthIssueStatus(Enum):
    open = 'open'
    closed = 'closed'
    suppressed = 'suppressed'
    unknown_future_value = 'unknownFutureValue'


class HealthIssueType(Enum):
    sensor = 'sensor'
    global_ = 'global'
    unknown_future_value = 'unknownFutureValue'


class HostPortProtocol(Enum):
    tcp = 'tcp'
    udp = 'udp'
    unknown_future_value = 'unknownFutureValue'


class HostPortStatus(Enum):
    open = 'open'
    filtered = 'filtered'
    closed = 'closed'
    unknown_future_value = 'unknownFutureValue'


class HostReputationClassification(Enum):
    unknown = 'unknown'
    neutral = 'neutral'
    suspicious = 'suspicious'
    malicious = 'malicious'
    unknown_future_value = 'unknownFutureValue'


class HostReputationRuleSeverity(Enum):
    unknown = 'unknown'
    low = 'low'
    medium = 'medium'
    high = 'high'
    unknown_future_value = 'unknownFutureValue'


class IncidentStatus(Enum):
    active = 'active'
    resolved = 'resolved'
    in_progress = 'inProgress'
    redirected = 'redirected'
    unknown_future_value = 'unknownFutureValue'
    awaiting_action = 'awaitingAction'


class IndicatorSource(Enum):
    microsoft = 'microsoft'
    osint = 'osint'
    public = 'public'
    unknown_future_value = 'unknownFutureValue'


class IntelligenceProfileKind(Enum):
    actor = 'actor'
    tool = 'tool'
    unknown_future_value = 'unknownFutureValue'


class IoTDeviceImportanceType(Enum):
    unknown = 'unknown'
    low = 'low'
    normal = 'normal'
    high = 'high'
    unknown_future_value = 'unknownFutureValue'


class KubernetesPlatform(Enum):
    unknown = 'unknown'
    aks = 'aks'
    eks = 'eks'
    gke = 'gke'
    arc = 'arc'
    unknown_future_value = 'unknownFutureValue'


class KubernetesServiceType(Enum):
    unknown = 'unknown'
    cluster_ip = 'clusterIP'
    external_name = 'externalName'
    node_port = 'nodePort'
    load_balancer = 'loadBalancer'
    unknown_future_value = 'unknownFutureValue'


class MailboxConfigurationType(Enum):
    mail_forwarding_rule = 'mailForwardingRule'
    owa_settings = 'owaSettings'
    ews_settings = 'ewsSettings'
    mail_delegation = 'mailDelegation'
    user_inbox_rule = 'userInboxRule'
    unknown_future_value = 'unknownFutureValue'


class OnboardingStatus(Enum):
    insufficient_info = 'insufficientInfo'
    onboarded = 'onboarded'
    can_be_onboarded = 'canBeOnboarded'
    unsupported = 'unsupported'
    unknown_future_value = 'unknownFutureValue'


class ProtocolType(Enum):
    tcp = 'tcp'
    udp = 'udp'
    unknown_future_value = 'unknownFutureValue'


class PurgeAreas(Enum):
    mailboxes = 'mailboxes'
    teams_messages = 'teamsMessages'
    unknown_future_value = 'unknownFutureValue'


class PurgeType(Enum):
    recoverable = 'recoverable'
    unknown_future_value = 'unknownFutureValue'
    permanently_delete = 'permanentlyDelete'


class QueryType(Enum):
    files = 'files'
    messages = 'messages'
    unknown_future_value = 'unknownFutureValue'


class RetentionTrigger(Enum):
    date_labeled = 'dateLabeled'
    date_created = 'dateCreated'
    date_modified = 'dateModified'
    date_of_event = 'dateOfEvent'
    unknown_future_value = 'unknownFutureValue'


class SensorHealthStatus(Enum):
    healthy = 'healthy'
    not_healthy_low = 'notHealthyLow'
    not_healthy_medium = 'notHealthyMedium'
    not_healthy_high = 'notHealthyHigh'
    unknown_future_value = 'unknownFutureValue'


class SensorType(Enum):
    ad_connect_integrated = 'adConnectIntegrated'
    adcs_integrated = 'adcsIntegrated'
    adfs_integrated = 'adfsIntegrated'
    domain_controller_integrated = 'domainControllerIntegrated'
    domain_controller_standalone = 'domainControllerStandalone'
    unknown_future_value = 'unknownFutureValue'


class ServicePrincipalType(Enum):
    unknown = 'unknown'
    application = 'application'
    managed_identity = 'managedIdentity'
    legacy = 'legacy'
    unknown_future_value = 'unknownFutureValue'


class ServiceSource(Enum):
    unknown = 'unknown'
    microsoft_defender_for_endpoint = 'microsoftDefenderForEndpoint'
    microsoft_defender_for_identity = 'microsoftDefenderForIdentity'
    microsoft_defender_for_cloud_apps = 'microsoftDefenderForCloudApps'
    microsoft_defender_for_office365 = 'microsoftDefenderForOffice365'
    microsoft365_defender = 'microsoft365Defender'
    azure_ad_identity_protection = 'azureAdIdentityProtection'
    microsoft_app_governance = 'microsoftAppGovernance'
    data_loss_prevention = 'dataLossPrevention'
    unknown_future_value = 'unknownFutureValue'
    microsoft_defender_for_cloud = 'microsoftDefenderForCloud'
    microsoft_sentinel = 'microsoftSentinel'
    microsoft_insider_risk_management = 'microsoftInsiderRiskManagement'


class SourceType(Enum):
    mailbox = 'mailbox'
    site = 'site'
    unknown_future_value = 'unknownFutureValue'


class VmCloudProvider(Enum):
    unknown = 'unknown'
    azure = 'azure'
    unknown_future_value = 'unknownFutureValue'


class VulnerabilitySeverity(Enum):
    none = 'none'
    low = 'low'
    medium = 'medium'
    high = 'high'
    critical = 'critical'
    unknown_future_value = 'unknownFutureValue'


class WhoisDomainStatus(Enum):
    client_delete_prohibited = 'clientDeleteProhibited'
    client_hold = 'clientHold'
    client_renew_prohibited = 'clientRenewProhibited'
    client_transfer_prohibited = 'clientTransferProhibited'
    client_update_prohibited = 'clientUpdateProhibited'
    unknown_future_value = 'unknownFutureValue'


class AuthorityTemplate(FilePlanDescriptorTemplate):
    field_odata_type: str


class Case(Entity):
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    description: Optional[str] = None
    display_name: Optional[str] = None
    last_modified_by: Optional[Union[IdentitySet, Dict[str, Any]]] = None
    last_modified_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    status: Optional[Union[CaseStatus, Dict[str, Any]]] = None
    field_odata_type: str


class CaseOperation(Entity):
    action: Annotated[
        Optional[Union[CaseAction, Dict[str, Any]]],
        Field(
            description='The type of action the operation represents. Possible values are: contentExport,  applyTags, convertToPdf, index, estimateStatistics, addToReviewSet, holdUpdate, unknownFutureValue, purgeData, exportReport, exportResult. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: purgeData, exportReport, exportResult.'
        ),
    ] = None
    completed_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time the operation was completed.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    created_by: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(description='The user that created the operation.'),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time the operation was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    percent_progress: Annotated[
        Optional[float],
        Field(
            description='The progress of the operation.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    result_info: Annotated[
        Optional[Union[ResultInfo, Dict[str, Any]]],
        Field(description='Contains success and failure-specific result information.'),
    ] = None
    status: Annotated[
        Optional[Union[CaseOperationStatus, Dict[str, Any]]],
        Field(
            description='The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.'
        ),
    ] = None
    field_odata_type: str


class CategoryTemplate(FilePlanDescriptorTemplate):
    subcategories: Annotated[
        Optional[List[SubcategoryTemplate]],
        Field(description='Represents all subcategories under a particular category.'),
    ] = None
    field_odata_type: str


class CitationTemplate(FilePlanDescriptorTemplate):
    citation_jurisdiction: Annotated[
        Optional[str],
        Field(
            description='Represents the jurisdiction or agency that published the citation.'
        ),
    ] = None
    citation_url: Annotated[
        Optional[str],
        Field(description='Represents the URL to the published citation.'),
    ] = None
    field_odata_type: str


class DataSource(Entity):
    created_by: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(description='The user who created the dataSource.'),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time the dataSource was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    display_name: Annotated[
        Optional[str],
        Field(
            description='The display name of the dataSource and is the name of the SharePoint site.'
        ),
    ] = None
    hold_status: Annotated[
        Optional[Union[DataSourceHoldStatus, Dict[str, Any]]],
        Field(
            description='The hold status of the dataSource.The possible values are: notApplied, applied, applying, removing, partial'
        ),
    ] = None
    field_odata_type: str


class DataSourceContainer(Entity):
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Created date and time of the dataSourceContainer entity.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    display_name: Annotated[
        Optional[str],
        Field(description='Display name of the dataSourceContainer entity.'),
    ] = None
    hold_status: Annotated[
        Optional[Union[DataSourceHoldStatus, Dict[str, Any]]],
        Field(
            description='The hold status of the dataSourceContainer. The possible values are: notApplied, applied, applying, removing, partial'
        ),
    ] = None
    last_modified_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Last modified date and time of the dataSourceContainer.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    released_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Date and time that the dataSourceContainer was released from the case.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    status: Annotated[
        Optional[Union[DataSourceContainerStatus, Dict[str, Any]]],
        Field(
            description='Latest status of the dataSourceContainer. Possible values are: Active, Released.'
        ),
    ] = None
    field_odata_type: str


class DepartmentTemplate(FilePlanDescriptorTemplate):
    field_odata_type: str


class EdiscoveryCaseSettings(Entity):
    ocr: Annotated[
        Optional[Union[OcrSettings, Dict[str, Any]]],
        Field(
            description='The OCR (Optical Character Recognition) settings for the case.'
        ),
    ] = None
    redundancy_detection: Annotated[
        Optional[Union[RedundancyDetectionSettings, Dict[str, Any]]],
        Field(
            description='The redundancy (near duplicate and email threading) detection settings for the case.'
        ),
    ] = None
    topic_modeling: Annotated[
        Optional[Union[TopicModelingSettings, Dict[str, Any]]],
        Field(description='The Topic Modeling (Themes) settings for the case.'),
    ] = None
    field_odata_type: str


class EdiscoveryHoldOperation(CaseOperation):
    field_odata_type: str


class EdiscoveryIndexOperation(CaseOperation):
    field_odata_type: str


class EdiscoveryNoncustodialDataSource(DataSourceContainer):
    data_source: Annotated[
        Optional[Union[DataSource, Dict[str, Any]]],
        Field(
            description='User source or SharePoint site data source as noncustodial data source.'
        ),
    ] = None
    last_index_operation: Annotated[
        Optional[Union[EdiscoveryIndexOperation, Dict[str, Any]]],
        Field(
            description='Operation entity that represents the latest indexing for the noncustodial data source.'
        ),
    ] = None
    field_odata_type: str


class EdiscoveryPurgeDataOperation(CaseOperation):
    field_odata_type: str


class EdiscoveryReviewSetQuery(Search):
    field_odata_type: str


class EdiscoveryReviewTag(Tag):
    child_selectability: Annotated[
        Optional[Union[ChildSelectability, Dict[str, Any]]],
        Field(
            description='Indicates whether a single or multiple child tags can be associated with a document. Possible values are: One, Many.  This value controls whether the UX presents the tags as checkboxes or a radio button group.'
        ),
    ] = None
    child_tags: Annotated[
        Optional[List[EdiscoveryReviewTag]],
        Field(description='Returns the tags that are a child of a tag.'),
    ] = None
    parent: Annotated[
        Optional[Union[EdiscoveryReviewTag, Dict[str, Any]]],
        Field(description='Returns the parent tag of the specified tag.'),
    ] = None
    field_odata_type: str


class EdiscoveryTagOperation(CaseOperation):
    field_odata_type: str


class HealthIssue(Entity):
    additional_information: Annotated[
        Optional[List[str]],
        Field(
            description='Contains additional information about the issue, such as a list of items to fix.'
        ),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when the health issue was generated. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(description='Contains more detailed information about the health issue.'),
    ] = None
    display_name: Annotated[
        Optional[str], Field(description='The display name of the health issue.')
    ] = None
    domain_names: Annotated[
        Optional[List[str]],
        Field(
            description='A list of the fully qualified domain names of the domains or the sensors the health issue is related to.'
        ),
    ] = None
    health_issue_type: Annotated[
        Optional[Union[HealthIssueType, Dict[str, Any]]],
        Field(
            description='The type of the health issue. The possible values are: sensor, global, unknownFutureValue. For a list of all health issues and their identifiers, see Microsoft Defender for Identity health issues.'
        ),
    ] = None
    issue_type_id: Annotated[
        Optional[str],
        Field(
            description='The type identifier of the health issue. For a list of all health issues and their identifiers, see Microsoft Defender for Identity health issues.'
        ),
    ] = None
    last_modified_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when the health issue was last updated. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    recommendations: Annotated[
        Optional[List[str]],
        Field(
            description="A list of recommended actions that can be taken to resolve the issue effectively and efficiently. These actions might include instructions for further investigation and aren't limited to prewritten responses."
        ),
    ] = None
    recommended_action_commands: Annotated[
        Optional[List[str]],
        Field(
            description='A list of commands from the PowerShell module for the product that can be used to resolve the issue, if available. If no commands can be used to solve the issue, this property is empty. The commands, if present, provide a quick and efficient way to address the issue. These commands run in sequence for the single recommended fix.'
        ),
    ] = None
    sensor_dns_names: Annotated[
        Optional[List[str]],
        Field(
            description='A list of the DNS names of the sensors the health issue is related to.'
        ),
    ] = None
    severity: Annotated[
        Optional[Union[HealthIssueSeverity, Dict[str, Any]]],
        Field(
            description='The severity of the health issue. The possible values are: low, medium, high, unknownFutureValue.'
        ),
    ] = None
    status: Annotated[
        Optional[Union[HealthIssueStatus, Dict[str, Any]]],
        Field(
            description='The status of the health issue. The possible values are: open, closed, suppressed, unknownFutureValue.'
        ),
    ] = None
    field_odata_type: str


class Indicator(Entity):
    source: Optional[IndicatorSource] = None
    artifact: Optional[Artifact] = None
    field_odata_type: str


class IntelligenceProfileIndicator(Indicator):
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Designate when an artifact was first used actively in an attack, when a particular sample was compiled, or if neither of those could be ascertained when the file was first seen in public repositories (for example, VirusTotal, ANY.RUN, Hybrid Analysis) or reported publicly.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Designate when an artifact was most recently used actively in an attack, when a particular sample was compiled, or if neither of those could be ascertained when the file was first seen in public repositories (for example, VirusTotal, ANY.RUN, Hybrid Analysis) or reported publicly.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    field_odata_type: str


class Sensor(Entity):
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when the sensor was generated. The Timestamp represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    deployment_status: Optional[DeploymentStatus] = None
    display_name: Annotated[
        Optional[str], Field(description='The display name of the sensor.')
    ] = None
    domain_name: Annotated[
        Optional[str],
        Field(description='The fully qualified domain name of the sensor.'),
    ] = None
    health_status: Optional[SensorHealthStatus] = None
    open_health_issues_count: Annotated[
        Optional[float],
        Field(
            description='This field displays the count of health issues related to this sensor.'
        ),
    ] = None
    sensor_type: Optional[SensorType] = None
    settings: Optional[SensorSettings] = None
    version: Annotated[
        Optional[str], Field(description='The version of the sensor.')
    ] = None
    health_issues: Annotated[
        Optional[List[HealthIssue]],
        Field(
            description="Represents potential issues within a customer's Microsoft Defender for Identity configuration that Microsoft Defender for Identity identified related to the sensor."
        ),
    ] = None
    field_odata_type: str


class UserSource(DataSource):
    email: Annotated[
        Optional[str], Field(description="Email address of the user's mailbox.")
    ] = None
    included_sources: Annotated[
        Optional[Union[SourceType, Dict[str, Any]]],
        Field(
            description='Specifies which sources are included in this group. Possible values are: mailbox, site.'
        ),
    ] = None
    site_web_url: Annotated[
        Optional[str],
        Field(
            description="The URL of the user's OneDrive for Business site. Read-only."
        ),
    ] = None
    field_odata_type: str


class AlertEvidence(BaseModel):
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    detailed_roles: Annotated[
        Optional[List[str]],
        Field(
            description='Detailed description of the entity role/s in an alert. Values are free-form.'
        ),
    ] = None
    remediation_status: Optional[EvidenceRemediationStatus] = None
    remediation_status_details: Annotated[
        Optional[str], Field(description='Details about the remediation status.')
    ] = None
    roles: Annotated[
        Optional[List[EvidenceRole]],
        Field(
            description='The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.'
        ),
    ] = None
    tags: Annotated[
        Optional[List[str]],
        Field(
            description='Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.'
        ),
    ] = None
    verdict: Optional[EvidenceVerdict] = None
    field_odata_type: str


class AmazonResourceEvidence(AlertEvidence):
    amazon_account_id: Annotated[
        Optional[str],
        Field(description='The unique identifier for the Amazon account.'),
    ] = None
    amazon_resource_id: Annotated[
        Optional[str],
        Field(
            description='The Amazon resource identifier (ARN) for the cloud resource.'
        ),
    ] = None
    resource_name: Annotated[
        Optional[str], Field(description='The name of the resource.')
    ] = None
    resource_type: Annotated[
        Optional[str], Field(description='The type of the resource.')
    ] = None
    field_odata_type: str


class AnalyzedMessageEvidence(AlertEvidence):
    anti_spam_direction: Annotated[
        Optional[str],
        Field(
            description='Direction of the email relative to your network. The possible values are: inbound, outbound or intraorg.'
        ),
    ] = None
    attachments_count: Annotated[
        Optional[float], Field(description='Number of attachments in the email.')
    ] = None
    delivery_action: Annotated[
        Optional[str],
        Field(
            description='Delivery action of the email. The possible values are: delivered, deliveredAsSpam, junked, blocked, or replaced.'
        ),
    ] = None
    delivery_location: Annotated[
        Optional[str],
        Field(
            description='Location where the email was delivered. The possible values are: inbox, external, junkFolder, quarantine, failed, dropped, deletedFolder or forwarded.'
        ),
    ] = None
    internet_message_id: Annotated[
        Optional[str],
        Field(
            description='Public-facing identifier for the email that is set by the sending email system.'
        ),
    ] = None
    language: Annotated[
        Optional[str], Field(description='Detected language of the email content.')
    ] = None
    network_message_id: Annotated[
        Optional[str],
        Field(
            description='Unique identifier for the email, generated by Microsoft 365.'
        ),
    ] = None
    p1_sender: Annotated[
        Optional[Union[EmailSender, Dict[str, Any]]],
        Field(description='The P1 sender.'),
    ] = None
    p2_sender: Annotated[
        Optional[Union[EmailSender, Dict[str, Any]]],
        Field(description='The P2 sender.'),
    ] = None
    received_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Date and time when the email was received.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    recipient_email_address: Annotated[
        Optional[str],
        Field(
            description='Email address of the recipient, or email address of the recipient after distribution list expansion.'
        ),
    ] = None
    sender_ip: Annotated[
        Optional[str],
        Field(
            description='IP address of the last detected mail server that relayed the message.'
        ),
    ] = None
    subject: Annotated[Optional[str], Field(description='Subject of the email.')] = None
    threat_detection_methods: Annotated[
        Optional[List[str]],
        Field(
            description='Collection of methods used to detect malware, phishing, or other threats found in the email.'
        ),
    ] = None
    threats: Annotated[
        Optional[List[str]],
        Field(
            description='Collection of detection names for malware or other threats found.'
        ),
    ] = None
    url_count: Annotated[
        Optional[float], Field(description='Number of embedded URLs in the email.')
    ] = None
    urls: Annotated[
        Optional[List[str]],
        Field(description='Collection of the URLs contained in this email.'),
    ] = None
    urn: Annotated[
        Optional[str],
        Field(
            description='Uniform resource name (URN) of the automated investigation where the cluster was identified.'
        ),
    ] = None
    field_odata_type: str


class AzureResourceEvidence(AlertEvidence):
    resource_id: Annotated[
        Optional[str],
        Field(description='The unique identifier for the Azure resource.'),
    ] = None
    resource_name: Annotated[
        Optional[str], Field(description='The name of the resource.')
    ] = None
    resource_type: Annotated[
        Optional[str], Field(description='The type of the resource.')
    ] = None
    field_odata_type: str


class BlobContainerEvidence(AlertEvidence):
    name: Annotated[
        Optional[str], Field(description='The name of the blob container.')
    ] = None
    storage_resource: Annotated[
        Optional[Union[AzureResourceEvidence, Dict[str, Any]]],
        Field(description='The storage which the blob container belongs to.'),
    ] = None
    url: Annotated[
        Optional[str],
        Field(description='The full URL representation of the blob container.'),
    ] = None
    field_odata_type: str


class CloudApplicationEvidence(AlertEvidence):
    app_id: Annotated[
        Optional[float], Field(description='Unique identifier of the application.')
    ] = None
    display_name: Annotated[
        Optional[str], Field(description='Name of the application.')
    ] = None
    instance_id: Annotated[
        Optional[float],
        Field(
            description='Identifier of the instance of the Software as a Service (SaaS) application.'
        ),
    ] = None
    instance_name: Annotated[
        Optional[str],
        Field(description='Name of the instance of the SaaS application.'),
    ] = None
    saas_app_id: Annotated[
        Optional[float], Field(description='The identifier of the SaaS application.')
    ] = None
    stream: Optional[Union[Stream, Dict[str, Any]]] = None
    field_odata_type: str


class CloudLogonRequestEvidence(AlertEvidence):
    request_id: Annotated[
        Optional[str],
        Field(description='The unique identifier for the sign-in request.'),
    ] = None
    field_odata_type: str


class ContainerRegistryEvidence(AlertEvidence):
    registry: Annotated[Optional[str], Field(description='The registry URI.')] = None
    field_odata_type: str


class CvssSummary(BaseModel):
    score: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(description='The CVSS score about this vulnerability.'),
    ] = None
    severity: Annotated[
        Optional[Union[VulnerabilitySeverity, Dict[str, Any]]],
        Field(
            description='The CVSS severity rating for this vulnerability. The possible values are: none, low, medium, high, critical, unknownFutureValue.'
        ),
    ] = None
    vector_string: Annotated[
        Optional[str],
        Field(description='The CVSS vector string for this vulnerability.'),
    ] = None
    field_odata_type: str


class EventPropagationResult(BaseModel):
    location: Annotated[
        Optional[str],
        Field(
            description='The name of the specific location in the workload associated with the event.'
        ),
    ] = None
    service_name: Annotated[
        Optional[str],
        Field(description='The name of the workload associated with the event.'),
    ] = None
    status: Annotated[
        Optional[Union[EventPropagationStatus, Dict[str, Any]]],
        Field(
            description='Indicates the status of the event creation request. The possible values are: none, inProcessing, failed, success, unknownFutureValue.'
        ),
    ] = None
    status_information: Annotated[
        Optional[str],
        Field(
            description='Additional information about the status of the event creation request.'
        ),
    ] = None
    field_odata_type: str


class EventQuery(BaseModel):
    query: Annotated[
        Optional[str],
        Field(
            description="Represents unique identification for the  query. 'Asset ID' for SharePoint Online and OneDrive for Business, 'keywords' for Exchange Online."
        ),
    ] = None
    query_type: Annotated[
        Optional[Union[QueryType, Dict[str, Any]]],
        Field(
            description="Represents the type of query associated with an event. 'files' for SPO and ODB and 'messages' for EXO.The possible values are: files, messages, unknownFutureValue."
        ),
    ] = None
    field_odata_type: str


class FileEvidence(AlertEvidence):
    detection_status: Annotated[
        Optional[Union[DetectionStatus, Dict[str, Any]]],
        Field(
            description='The status of the detection.The possible values are: detected, blocked, prevented, unknownFutureValue.'
        ),
    ] = None
    file_details: Annotated[
        Optional[Union[FileDetails, Dict[str, Any]]],
        Field(description='The file details.'),
    ] = None
    mde_device_id: Annotated[
        Optional[str],
        Field(
            description='A unique identifier assigned to a device by Microsoft Defender for Endpoint.'
        ),
    ] = None
    field_odata_type: str


class FileHash(BaseModel):
    algorithm: Optional[FileHashAlgorithm] = None
    value: Annotated[Optional[str], Field(description='The hash value.')] = None
    field_odata_type: str


class FileHashEvidence(AlertEvidence):
    algorithm: Optional[FileHashAlgorithm] = None
    value: Optional[str] = None
    field_odata_type: str


class FilePlanAppliedCategory(FilePlanDescriptorBase):
    subcategory: Annotated[
        Optional[Union[FilePlanSubcategory, Dict[str, Any]]],
        Field(
            description='Represents the file plan descriptor for a subcategory under a specific category, which has been assigned to a particular retention label.'
        ),
    ] = None
    field_odata_type: str


class FilePlanAuthority(FilePlanDescriptorBase):
    field_odata_type: str


class FilePlanCitation(FilePlanDescriptorBase):
    citation_jurisdiction: Annotated[
        Optional[str],
        Field(
            description='Represents the jurisdiction or agency that published the filePlanCitation.'
        ),
    ] = None
    citation_url: Annotated[
        Optional[str],
        Field(description='Represents the URL to the published filePlanCitation.'),
    ] = None
    field_odata_type: str


class FilePlanDepartment(FilePlanDescriptorBase):
    field_odata_type: str


class FormattedContent(BaseModel):
    content: Annotated[
        Optional[str], Field(description='The content of this formattedContent.')
    ] = None
    format: Annotated[
        Optional[Union[ContentFormat, Dict[str, Any]]],
        Field(
            description='The format of the content. The possible values are: text, html, markdown, unknownFutureValue.'
        ),
    ] = None
    field_odata_type: str


class GeoLocation(BaseModel):
    city: Optional[str] = None
    country_name: Optional[str] = None
    latitude: Optional[Union[float, str, ReferenceNumeric]] = None
    longitude: Optional[Union[float, str, ReferenceNumeric]] = None
    state: Optional[str] = None
    field_odata_type: str


class GitHubOrganizationEvidence(AlertEvidence):
    company: Optional[str] = None
    display_name: Optional[str] = None
    email: Optional[str] = None
    login: Optional[str] = None
    org_id: Optional[str] = None
    web_url: Optional[str] = None
    field_odata_type: str


class GitHubRepoEvidence(AlertEvidence):
    base_url: Optional[str] = None
    login: Optional[str] = None
    owner: Optional[str] = None
    owner_type: Optional[str] = None
    repo_id: Optional[str] = None
    field_odata_type: str


class GitHubUserEvidence(AlertEvidence):
    email: Optional[str] = None
    login: Optional[str] = None
    name: Optional[str] = None
    user_id: Optional[str] = None
    web_url: Optional[str] = None
    field_odata_type: str


class GoogleCloudResourceEvidence(AlertEvidence):
    full_resource_name: Optional[str] = None
    location: Annotated[
        Optional[str],
        Field(description='The zone or region where the resource is located.'),
    ] = None
    location_type: Annotated[
        Optional[Union[GoogleCloudLocationType, Dict[str, Any]]],
        Field(
            description='The type of location. Possible values are: unknown, regional, zonal, global, unknownFutureValue.'
        ),
    ] = None
    project_id: Annotated[
        Optional[str],
        Field(description='The Google project ID as defined by the user.'),
    ] = None
    project_number: Annotated[
        Optional[float], Field(description='The project number assigned by Google.')
    ] = None
    resource_name: Annotated[
        Optional[str], Field(description='The name of the resource.')
    ] = None
    resource_type: Annotated[
        Optional[str], Field(description='The type of the resource.')
    ] = None
    field_odata_type: str


class HostReputationRule(BaseModel):
    description: Annotated[
        Optional[str],
        Field(description='The description of the rule that gives more context.'),
    ] = None
    name: Annotated[Optional[str], Field(description='The name of the rule.')] = None
    related_details_url: Annotated[
        Optional[str],
        Field(description='Link to a web page with details related to this rule.'),
    ] = None
    severity: Optional[HostReputationRuleSeverity] = None
    field_odata_type: str


class HuntingQueryResults(BaseModel):
    results: Annotated[
        Optional[List[HuntingRowResult]],
        Field(description='The results of the hunting query.'),
    ] = None
    schema_: Annotated[
        Optional[List[SinglePropertySchema]],
        Field(description='The schema for the response.'),
    ] = None
    field_odata_type: str


class IpEvidence(AlertEvidence):
    country_letter_code: Annotated[
        Optional[str],
        Field(
            description='The two-letter country code according to ISO 3166 format, for example: US, UK, CA, etc.'
        ),
    ] = None
    ip_address: Annotated[
        Optional[str],
        Field(
            description='The value of the IP Address, can be either in V4 address or V6 address format.'
        ),
    ] = None
    location: Optional[Union[GeoLocation, Dict[str, Any]]] = None
    stream: Optional[Union[Stream, Dict[str, Any]]] = None
    field_odata_type: str


class KubernetesClusterEvidence(AlertEvidence):
    cloud_resource: Annotated[
        Optional[Union[AlertEvidence, Dict[str, Any]]],
        Field(
            description='The cloud identifier of the cluster. Can be either an amazonResourceEvidence, azureResourceEvidence, or googleCloudResourceEvidence object.'
        ),
    ] = None
    distribution: Annotated[
        Optional[str], Field(description='The distribution type of the cluster.')
    ] = None
    name: Annotated[Optional[str], Field(description='The cluster name.')] = None
    platform: Annotated[
        Optional[Union[KubernetesPlatform, Dict[str, Any]]],
        Field(
            description='The platform the cluster runs on. Possible values are: unknown, aks, eks, gke, arc, unknownFutureValue.'
        ),
    ] = None
    version: Annotated[
        Optional[str], Field(description='The kubernetes version of the cluster.')
    ] = None
    field_odata_type: str


class KubernetesNamespaceEvidence(AlertEvidence):
    cluster: Annotated[
        Optional[Union[KubernetesClusterEvidence, Dict[str, Any]]],
        Field(description='The namespace cluster.'),
    ] = None
    labels: Annotated[
        Optional[Union[Dictionary, Dict[str, Any]]],
        Field(description='The labels for the Kubernetes pod.'),
    ] = None
    name: Annotated[Optional[str], Field(description='The namespace name.')] = None
    field_odata_type: str


class KubernetesSecretEvidence(AlertEvidence):
    name: Annotated[Optional[str], Field(description='The secret name.')] = None
    namespace: Annotated[
        Optional[Union[KubernetesNamespaceEvidence, Dict[str, Any]]],
        Field(description='The secret namespace.'),
    ] = None
    secret_type: Annotated[
        Optional[str],
        Field(
            description='The secret type can include both built-in types and custom ones. Examples of built-in types are: Opaque, kubernetes.io/service-account-token, kubernetes.io/dockercfg, kubernetes.io/dockerconfigjson, kubernetes.io/basic-auth, kubernetes.io/ssh-auth, kubernetes.io/tls, bootstrap.kubernetes.io/token.'
        ),
    ] = None
    field_odata_type: str


class KubernetesServiceAccountEvidence(AlertEvidence):
    name: Annotated[Optional[str], Field(description='The service account name.')] = (
        None
    )
    namespace: Annotated[
        Optional[Union[KubernetesNamespaceEvidence, Dict[str, Any]]],
        Field(description='The service account namespace.'),
    ] = None
    field_odata_type: str


class KubernetesServicePort(BaseModel):
    app_protocol: Annotated[
        Optional[str], Field(description='The application protocol for this port.')
    ] = None
    name: Annotated[
        Optional[str], Field(description='The name of this port within the service.')
    ] = None
    node_port: Annotated[
        Optional[float],
        Field(
            description='The port on each node on which this service is exposed when the type is either NodePort or LoadBalancer.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    port: Annotated[
        Optional[float],
        Field(
            description='The port that this service exposes.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    protocol: Annotated[
        Optional[Union[ContainerPortProtocol, Dict[str, Any]]],
        Field(
            description='The protocol name. Possible values are: udp, tcp, sctp, unknownFutureValue.'
        ),
    ] = None
    target_port: Annotated[
        Optional[str],
        Field(
            description='The name or number of the port to access on the pods targeted by the service. The port number must be in the range 1 to 65535. The name must be an IANASVCNAME.'
        ),
    ] = None
    field_odata_type: str


class MailboxConfigurationEvidence(AlertEvidence):
    configuration_id: Optional[str] = None
    configuration_type: Optional[Union[MailboxConfigurationType, Dict[str, Any]]] = None
    display_name: Optional[str] = None
    external_directory_object_id: Annotated[
        Optional[UUID],
        Field(
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
        ),
    ] = None
    mailbox_primary_address: Optional[str] = None
    upn: Optional[str] = None
    field_odata_type: str


class MailboxEvidence(AlertEvidence):
    display_name: Annotated[
        Optional[str], Field(description='The name associated with the mailbox.')
    ] = None
    primary_address: Annotated[
        Optional[str], Field(description='The primary email address of the mailbox.')
    ] = None
    user_account: Annotated[
        Optional[Union[UserAccount, Dict[str, Any]]],
        Field(description='The user account of the mailbox.'),
    ] = None
    field_odata_type: str


class MailClusterEvidence(AlertEvidence):
    cluster_by: Annotated[
        Optional[str],
        Field(description='The clustering logic of the emails inside the cluster.'),
    ] = None
    cluster_by_value: Annotated[
        Optional[str],
        Field(description='The value utilized to cluster the similar emails.'),
    ] = None
    email_count: Annotated[
        Optional[float], Field(description='Count of emails in the email cluster.')
    ] = None
    network_message_ids: Annotated[
        Optional[List[str]],
        Field(
            description='Unique identifiers for the emails in the cluster, generated by Microsoft 365.'
        ),
    ] = None
    query: Annotated[
        Optional[str],
        Field(description='The query used to identify the email cluster.'),
    ] = None
    urn: Annotated[
        Optional[str],
        Field(
            description='Uniform resource name (URN) of the automated investigation where the cluster was identified.'
        ),
    ] = None
    field_odata_type: str


class NetworkConnectionEvidence(AlertEvidence):
    destination_address: Optional[Union[IpEvidence, Dict[str, Any]]] = None
    destination_port: Annotated[
        Optional[float], Field(ge=-2147483648.0, le=2147483647.0)
    ] = None
    protocol: Optional[Union[ProtocolType, Dict[str, Any]]] = None
    source_address: Optional[Union[IpEvidence, Dict[str, Any]]] = None
    source_port: Annotated[
        Optional[float], Field(ge=-2147483648.0, le=2147483647.0)
    ] = None
    field_odata_type: str


class NicEvidence(AlertEvidence):
    ip_address: Annotated[
        Optional[Union[IpEvidence, Dict[str, Any]]],
        Field(description='The current IP address of the NIC.'),
    ] = None
    mac_address: Annotated[
        Optional[str], Field(description='The MAC address of the NIC.')
    ] = None
    vlans: Annotated[
        Optional[List[str]],
        Field(description='The current virtual local area networks of the NIC.'),
    ] = None
    field_odata_type: str


class OauthApplicationEvidence(AlertEvidence):
    app_id: Annotated[
        Optional[str], Field(description='Unique identifier of the application.')
    ] = None
    display_name: Annotated[
        Optional[str], Field(description='Name of the application.')
    ] = None
    object_id: Annotated[
        Optional[str],
        Field(
            description='The unique identifier of the application object in Azure AD.'
        ),
    ] = None
    publisher: Annotated[
        Optional[str], Field(description='The name of the application publisher.')
    ] = None
    field_odata_type: str


class ProcessEvidence(AlertEvidence):
    detection_status: Annotated[
        Optional[Union[DetectionStatus, Dict[str, Any]]],
        Field(
            description='The status of the detection.The possible values are: detected, blocked, prevented, unknownFutureValue.'
        ),
    ] = None
    image_file: Annotated[
        Optional[Union[FileDetails, Dict[str, Any]]],
        Field(description='Image file details.'),
    ] = None
    mde_device_id: Annotated[
        Optional[str],
        Field(
            description='A unique identifier assigned to a device by Microsoft Defender for Endpoint.'
        ),
    ] = None
    parent_process_creation_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Date and time when the parent of the process was created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    parent_process_id: Annotated[
        Optional[float],
        Field(
            description='Process ID (PID) of the parent process that spawned the process.'
        ),
    ] = None
    parent_process_image_file: Annotated[
        Optional[Union[FileDetails, Dict[str, Any]]],
        Field(description='Parent process image file details.'),
    ] = None
    process_command_line: Annotated[
        Optional[str], Field(description='Command line used to create the new process.')
    ] = None
    process_creation_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Date and time when the process was created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    process_id: Annotated[
        Optional[float],
        Field(description='Process ID (PID) of the newly created process.'),
    ] = None
    user_account: Annotated[
        Optional[Union[UserAccount, Dict[str, Any]]],
        Field(description='User details of the user that ran the process.'),
    ] = None
    field_odata_type: str


class RegistryKeyEvidence(AlertEvidence):
    registry_hive: Annotated[
        Optional[str],
        Field(
            description='Registry hive of the key that the recorded action was applied to.'
        ),
    ] = None
    registry_key: Annotated[
        Optional[str],
        Field(description='Registry key that the recorded action was applied to.'),
    ] = None
    field_odata_type: str


class RegistryValueEvidence(AlertEvidence):
    mde_device_id: Annotated[
        Optional[str],
        Field(
            description='A unique identifier assigned to a device by Microsoft Defender for Endpoint.'
        ),
    ] = None
    registry_hive: Annotated[
        Optional[str],
        Field(
            description='Registry hive of the key that the recorded action was applied to.'
        ),
    ] = None
    registry_key: Annotated[
        Optional[str],
        Field(description='Registry key that the recorded action was applied to.'),
    ] = None
    registry_value: Annotated[
        Optional[str],
        Field(
            description='Data of the registry value that the recorded action was applied to.'
        ),
    ] = None
    registry_value_name: Annotated[
        Optional[str],
        Field(
            description='Name of the registry value that the recorded action was applied to.'
        ),
    ] = None
    registry_value_type: Annotated[
        Optional[str],
        Field(
            description='Data type, such as binary or string, of the registry value that the recorded action was applied to.'
        ),
    ] = None
    field_odata_type: str


class RetentionEventStatus(BaseModel):
    error: Annotated[
        Optional[Union[PublicError, Dict[str, Any]]],
        Field(description="The error if the status isn't successful."),
    ] = None
    status: Annotated[
        Optional[Union[EventStatusType, Dict[str, Any]]],
        Field(
            description='The status of the distribution. The possible values are: pending, error, success, notAvaliable.'
        ),
    ] = None
    field_odata_type: str


class SasTokenEvidence(AlertEvidence):
    allowed_ip_addresses: Optional[str] = None
    allowed_resource_types: Optional[List[str]] = None
    allowed_services: Optional[List[str]] = None
    expiry_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    permissions: Optional[List[str]] = None
    protocol: Optional[str] = None
    signature_hash: Optional[str] = None
    signed_with: Optional[str] = None
    start_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    storage_resource: Optional[Union[AzureResourceEvidence, Dict[str, Any]]] = None
    field_odata_type: str


class SecurityGroupEvidence(AlertEvidence):
    display_name: Annotated[
        Optional[str], Field(description='The name of the security group.')
    ] = None
    security_group_id: Annotated[
        Optional[str], Field(description='Unique identifier of the security group.')
    ] = None
    field_odata_type: str


class ServicePrincipalEvidence(AlertEvidence):
    app_id: Optional[str] = None
    app_owner_tenant_id: Optional[str] = None
    service_principal_name: Optional[str] = None
    service_principal_object_id: Optional[str] = None
    service_principal_type: Optional[Union[ServicePrincipalType, Dict[str, Any]]] = None
    tenant_id: Optional[str] = None
    field_odata_type: str


class SubmissionMailEvidence(AlertEvidence):
    network_message_id: Optional[str] = None
    recipient: Optional[str] = None
    report_type: Optional[str] = None
    sender: Optional[str] = None
    sender_ip: Optional[str] = None
    subject: Optional[str] = None
    submission_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    submission_id: Optional[str] = None
    submitter: Optional[str] = None
    field_odata_type: str


class UrlEvidence(AlertEvidence):
    url: Annotated[
        Optional[str], Field(description='The Unique Resource Locator (URL).')
    ] = None
    field_odata_type: str


class UserEvidence(AlertEvidence):
    stream: Optional[Union[Stream, Dict[str, Any]]] = None
    user_account: Annotated[
        Optional[Union[UserAccount, Dict[str, Any]]],
        Field(description='The user account details.'),
    ] = None
    field_odata_type: str


class VmMetadata(BaseModel):
    cloud_provider: Optional[VmCloudProvider] = None
    resource_id: Annotated[
        Optional[str], Field(description='Unique identifier of the Azure resource.')
    ] = None
    subscription_id: Annotated[
        Optional[str],
        Field(
            description='Unique identifier of the Azure subscription the customer tenant belongs to.'
        ),
    ] = None
    vm_id: Annotated[
        Optional[str],
        Field(description='Unique identifier of the virtual machine instance.'),
    ] = None
    field_odata_type: str


class SubcategoryTemplateCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[SubcategoryTemplate]] = None


class EdiscoveryNoncustodialDataSourceCollectionResponse(
    BaseCollectionPaginationCountResponse
):
    value: Optional[List[EdiscoveryNoncustodialDataSource]] = None


class CaseOperationCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[CaseOperation]] = None


class EdiscoveryReviewTagCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EdiscoveryReviewTag]] = None


class UserSourceCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[UserSource]] = None


class EdiscoveryReviewSetQueryCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EdiscoveryReviewSetQuery]] = None


class DataSourceCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[DataSource]] = None


class HealthIssueCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HealthIssue]] = None


class SensorCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Sensor]] = None


class IntelligenceProfileIndicatorCollectionResponse(
    BaseCollectionPaginationCountResponse
):
    value: Optional[List[IntelligenceProfileIndicator]] = None


class AuthorityTemplateCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[AuthorityTemplate]] = None


class CategoryTemplateCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[CategoryTemplate]] = None


class CitationTemplateCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[CitationTemplate]] = None


class DepartmentTemplateCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[DepartmentTemplate]] = None


class FilePlanReferenceTemplateCollectionResponse(
    BaseCollectionPaginationCountResponse
):
    value: Optional[List[FilePlanReferenceTemplate]] = None


class DispositionReviewStageCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[DispositionReviewStage]] = None


class RetentionEventTypeCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[RetentionEventType]] = None


class VulnerabilityComponentCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[VulnerabilityComponent]] = None


class NetworkAdapterCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[NetworkAdapter]] = None


class EdiscoveryHoldOperationCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EdiscoveryHoldOperation]] = None


class EdiscoveryIndexOperationCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EdiscoveryIndexOperation]] = None


class EdiscoveryPurgeDataOperationCollectionResponse(
    BaseCollectionPaginationCountResponse
):
    value: Optional[List[EdiscoveryPurgeDataOperation]] = None


class EdiscoveryTagOperationCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EdiscoveryTagOperation]] = None


class AlertCommentCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[AlertComment]] = None


class AlertEvidenceCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[AlertEvidence]] = None


class ExportFileMetadataCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[ExportFileMetadata]] = None


class HostPortBannerCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HostPortBanner]] = None


class HostReputationRuleCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HostReputationRule]] = None


class HostSslCertificatePortCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HostSslCertificatePort]] = None


class IntelligenceProfileCountryOrRegionOfOriginCollectionResponse(
    BaseCollectionPaginationCountResponse
):
    value: Optional[List[IntelligenceProfileCountryOrRegionOfOrigin]] = None


class EventPropagationResultCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EventPropagationResult]] = None


class EventQueryCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EventQuery]] = None


class HyperlinkCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Hyperlink]] = None


class FileHashCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[FileHash]] = None


class LoggedOnUserCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[LoggedOnUser]] = None


class IpEvidenceCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[IpEvidence]] = None


class HuntingRowResultCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HuntingRowResult]] = None


class SinglePropertySchemaCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[SinglePropertySchema]] = None


class NicEvidenceCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[NicEvidence]] = None


class KubernetesServicePortCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[KubernetesServicePort]] = None


class FileEvidenceCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[FileEvidence]] = None


class ProcessEvidenceCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[ProcessEvidence]] = None


class Alert(Entity):
    actor_display_name: Annotated[
        Optional[str],
        Field(
            description='The adversary or activity group that is associated with this alert.'
        ),
    ] = None
    additional_data: Annotated[
        Optional[Union[Dictionary, Dict[str, Any]]],
        Field(
            description='A collection of other alert properties, including user-defined properties. Any custom details defined in the alert, and any dynamic content in the alert details, are stored here.'
        ),
    ] = None
    alert_policy_id: Annotated[
        Optional[str],
        Field(
            description='The ID of the policy that generated the alert, and populated when there is a specific policy that generated the alert, whether configured by a customer or a built-in policy.'
        ),
    ] = None
    alert_web_url: Annotated[
        Optional[str],
        Field(description='URL for the Microsoft 365 Defender portal alert page.'),
    ] = None
    assigned_to: Annotated[
        Optional[str],
        Field(description='Owner of the alert, or null if no owner is assigned.'),
    ] = None
    category: Annotated[
        Optional[str],
        Field(
            description='The attack kill-chain category that the alert belongs to. Aligned with the MITRE ATT&CK framework.'
        ),
    ] = None
    classification: Annotated[
        Optional[Union[AlertClassification, Dict[str, Any]]],
        Field(
            description='Specifies whether the alert represents a true threat. Possible values are: unknown, falsePositive, truePositive, informationalExpectedActivity, unknownFutureValue.'
        ),
    ] = None
    comments: Annotated[
        Optional[List[AlertComment]],
        Field(
            description='Array of comments created by the Security Operations (SecOps) team during the alert management process.'
        ),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Time when Microsoft 365 Defender created the alert.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    description: Annotated[
        Optional[str], Field(description='String value describing each alert.')
    ] = None
    detection_source: Annotated[
        Optional[Union[DetectionSource, Dict[str, Any]]],
        Field(
            description='Detection technology or sensor that identified the notable component or activity. Possible values are: unknown, microsoftDefenderForEndpoint, antivirus, smartScreen, customTi, microsoftDefenderForOffice365, automatedInvestigation, microsoftThreatExperts, customDetection, microsoftDefenderForIdentity, cloudAppSecurity, microsoft365Defender, azureAdIdentityProtection, manual, microsoftDataLossPrevention, appGovernancePolicy, appGovernanceDetection, unknownFutureValue, microsoftDefenderForCloud, microsoftDefenderForIoT, microsoftDefenderForServers, microsoftDefenderForStorage, microsoftDefenderForDNS, microsoftDefenderForDatabases, microsoftDefenderForContainers, microsoftDefenderForNetwork, microsoftDefenderForAppService, microsoftDefenderForKeyVault, microsoftDefenderForResourceManager, microsoftDefenderForApiManagement, microsoftSentinel, nrtAlerts, scheduledAlerts, microsoftDefenderThreatIntelligenceAnalytics, builtInMl. Use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: microsoftDefenderForCloud, microsoftDefenderForIoT, microsoftDefenderForServers, microsoftDefenderForStorage, microsoftDefenderForDNS, microsoftDefenderForDatabases, microsoftDefenderForContainers, microsoftDefenderForNetwork, microsoftDefenderForAppService, microsoftDefenderForKeyVault, microsoftDefenderForResourceManager, microsoftDefenderForApiManagement, microsoftSentinel, nrtAlerts, scheduledAlerts, microsoftDefenderThreatIntelligenceAnalytics, builtInMl.'
        ),
    ] = None
    detector_id: Annotated[
        Optional[str],
        Field(description='The ID of the detector that triggered the alert.'),
    ] = None
    determination: Annotated[
        Optional[Union[AlertDetermination, Dict[str, Any]]],
        Field(
            description='Specifies the result of the investigation, whether the alert represents a true attack and if so, the nature of the attack. Possible values are: unknown, apt, malware, securityPersonnel, securityTesting, unwantedSoftware, other, multiStagedAttack, compromisedAccount, phishing, maliciousUserActivity, notMalicious, notEnoughDataToValidate, confirmedUserActivity, lineOfBusinessApplication, unknownFutureValue.'
        ),
    ] = None
    evidence: Annotated[
        Optional[List[AlertEvidence]],
        Field(description='Collection of evidence related to the alert.'),
    ] = None
    first_activity_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The earliest activity associated with the alert.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    incident_id: Annotated[
        Optional[str],
        Field(
            description='Unique identifier to represent the incident this alert resource is associated with.'
        ),
    ] = None
    incident_web_url: Annotated[
        Optional[str],
        Field(
            description='URL for the incident page in the Microsoft 365 Defender portal.'
        ),
    ] = None
    last_activity_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The oldest activity associated with the alert.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_update_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Time when the alert was last updated at Microsoft 365 Defender.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    mitre_techniques: Annotated[
        Optional[List[str]],
        Field(
            description='The attack techniques, as aligned with the MITRE ATT&CK framework.'
        ),
    ] = None
    product_name: Annotated[
        Optional[str],
        Field(description='The name of the product which published this alert.'),
    ] = None
    provider_alert_id: Annotated[
        Optional[str],
        Field(
            description='The ID of the alert as it appears in the security provider product that generated the alert.'
        ),
    ] = None
    recommended_actions: Annotated[
        Optional[str],
        Field(
            description='Recommended response and remediation actions to take in the event this alert was generated.'
        ),
    ] = None
    resolved_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Time when the alert was resolved.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    service_source: Optional[ServiceSource] = None
    severity: Optional[AlertSeverity] = None
    status: Optional[AlertStatus] = None
    system_tags: Annotated[
        Optional[List[str]],
        Field(description='The system tags associated with the alert.'),
    ] = None
    tenant_id: Annotated[
        Optional[str],
        Field(description='The Microsoft Entra tenant the alert was created in.'),
    ] = None
    threat_display_name: Annotated[
        Optional[str], Field(description='The threat associated with this alert.')
    ] = None
    threat_family_name: Annotated[
        Optional[str], Field(description='Threat family associated with this alert.')
    ] = None
    title: Annotated[
        Optional[str],
        Field(description='Brief identifying string value describing the alert.'),
    ] = None
    field_odata_type: str


class ArticleIndicator(Indicator):
    field_odata_type: str


class EdiscoveryReviewSet(DataSet):
    queries: Annotated[
        Optional[List[EdiscoveryReviewSetQuery]],
        Field(description='Represents queries within the review set.'),
    ] = None
    field_odata_type: str


class FilePlanDescriptor(Entity):
    authority: Annotated[
        Optional[Union[FilePlanAuthority, Dict[str, Any]]],
        Field(
            description='Represents the file plan descriptor of type authority applied to a particular retention label.'
        ),
    ] = None
    category: Optional[Union[FilePlanAppliedCategory, Dict[str, Any]]] = None
    citation: Annotated[
        Optional[Union[FilePlanCitation, Dict[str, Any]]],
        Field(
            description='Represents the file plan descriptor of type citation applied to a particular retention label.'
        ),
    ] = None
    department: Annotated[
        Optional[Union[FilePlanDepartment, Dict[str, Any]]],
        Field(
            description='Represents the file plan descriptor of type department applied to a particular retention label.'
        ),
    ] = None
    file_plan_reference: Annotated[
        Optional[Union[FilePlanReference, Dict[str, Any]]],
        Field(
            description='Represents the file plan descriptor of type filePlanReference applied to a particular retention label.'
        ),
    ] = None
    authority_template: Annotated[
        Optional[Union[AuthorityTemplate, Dict[str, Any]]],
        Field(
            description='Specifies the underlying authority that describes the type of content to be retained and its retention schedule.'
        ),
    ] = None
    category_template: Annotated[
        Optional[Union[CategoryTemplate, Dict[str, Any]]],
        Field(
            description='Specifies a group of similar types of content in a particular department.'
        ),
    ] = None
    citation_template: Annotated[
        Optional[Union[CitationTemplate, Dict[str, Any]]],
        Field(
            description='The specific rule or regulation created by a jurisdiction used to determine whether certain labels and content should be retained or deleted.'
        ),
    ] = None
    department_template: Annotated[
        Optional[Union[DepartmentTemplate, Dict[str, Any]]],
        Field(
            description='Specifies the  department or business unit of an organization to which a label belongs.'
        ),
    ] = None
    file_plan_reference_template: Annotated[
        Optional[Union[FilePlanReferenceTemplate, Dict[str, Any]]],
        Field(
            description='Specifies a unique alpha-numeric identifier for an organization’s retention schedule.'
        ),
    ] = None
    field_odata_type: str


class HostReputation(Entity):
    classification: Optional[HostReputationClassification] = None
    rules: Annotated[
        Optional[List[HostReputationRule]],
        Field(
            description='A collection of rules that have been used to calculate the classification and score.'
        ),
    ] = None
    score: Annotated[
        Optional[float],
        Field(
            description='The calculated score (0-100) of the requested host. A higher value indicates that this host is more likely to be suspicious or malicious.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    field_odata_type: str


class IdentityContainer(Entity):
    health_issues: Annotated[
        Optional[List[HealthIssue]],
        Field(
            description="Represents potential issues identified by Microsoft Defender for Identity within a customer's Microsoft Defender for Identity configuration."
        ),
    ] = None
    sensors: Annotated[
        Optional[List[Sensor]],
        Field(
            description="Represents a customer's Microsoft Defender for Identity sensors."
        ),
    ] = None
    field_odata_type: str


class Incident(Entity):
    assigned_to: Annotated[
        Optional[str],
        Field(
            description='Owner of the incident, or null if no owner is assigned. Free editable text.'
        ),
    ] = None
    classification: Annotated[
        Optional[Union[AlertClassification, Dict[str, Any]]],
        Field(
            description='The specification for the incident. Possible values are: unknown, falsePositive, truePositive, informationalExpectedActivity, unknownFutureValue.'
        ),
    ] = None
    comments: Annotated[
        Optional[List[AlertComment]],
        Field(
            description='Array of comments created by the Security Operations (SecOps) team when the incident is managed.'
        ),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Time when the incident was first created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    custom_tags: Annotated[
        Optional[List[str]],
        Field(description='Array of custom tags associated with an incident.'),
    ] = None
    description: Annotated[
        Optional[str], Field(description='Description of the incident.')
    ] = None
    determination: Annotated[
        Optional[Union[AlertDetermination, Dict[str, Any]]],
        Field(
            description='Specifies the determination of the incident. Possible values are: unknown, apt, malware, securityPersonnel, securityTesting, unwantedSoftware, other, multiStagedAttack, compromisedUser, phishing, maliciousUserActivity, clean, insufficientData, confirmedUserActivity, lineOfBusinessApplication, unknownFutureValue.'
        ),
    ] = None
    display_name: Annotated[Optional[str], Field(description='The incident name.')] = (
        None
    )
    incident_web_url: Annotated[
        Optional[str],
        Field(
            description='The URL for the incident page in the Microsoft 365 Defender portal.'
        ),
    ] = None
    last_modified_by: Annotated[
        Optional[str],
        Field(description='The identity that last modified the incident.'),
    ] = None
    last_update_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Time when the incident was last updated.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    redirect_incident_id: Annotated[
        Optional[str],
        Field(
            description='Only populated in case an incident is grouped with another incident, as part of the logic that processes incidents. In such a case, the status property is redirected.'
        ),
    ] = None
    resolving_comment: Annotated[
        Optional[str],
        Field(
            description='User input that explains the resolution of the incident and the classification choice. This property contains free editable text.'
        ),
    ] = None
    severity: Optional[AlertSeverity] = None
    status: Optional[IncidentStatus] = None
    summary: Annotated[
        Optional[str],
        Field(
            description='The overview of an attack. When applicable, the summary contains details of what occurred, impacted assets, and the type of attack.'
        ),
    ] = None
    system_tags: Annotated[
        Optional[List[str]],
        Field(description='The system tags associated with the incident.'),
    ] = None
    tenant_id: Annotated[
        Optional[str],
        Field(description='The Microsoft Entra tenant in which the alert was created.'),
    ] = None
    alerts: Annotated[
        Optional[List[Alert]],
        Field(description='The list of related alerts. Supports $expand.'),
    ] = None
    field_odata_type: str


class IntelligenceProfile(Entity):
    aliases: Annotated[
        Optional[List[str]],
        Field(
            description='A list of commonly-known aliases for the threat intelligence included in the intelligenceProfile.'
        ),
    ] = None
    countries_or_regions_of_origin: Annotated[
        Optional[List[IntelligenceProfileCountryOrRegionOfOrigin]],
        Field(
            description='The country/region of origin for the given actor or threat associated with this intelligenceProfile.'
        ),
    ] = None
    description: Optional[FormattedContent] = None
    first_active_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when this intelligenceProfile was first active. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    kind: Optional[IntelligenceProfileKind] = None
    summary: Optional[FormattedContent] = None
    targets: Annotated[
        Optional[List[str]],
        Field(description='Known targets related to this intelligenceProfile.'),
    ] = None
    title: Annotated[
        Optional[str], Field(description='The title of this intelligenceProfile.')
    ] = None
    tradecraft: Annotated[
        Optional[Union[FormattedContent, Dict[str, Any]]],
        Field(
            description='Formatted information featuring a description of the distinctive tactics, techniques, and procedures (TTP) of the group, followed by a list of all known custom, commodity, and publicly available implants used by the group.'
        ),
    ] = None
    indicators: Annotated[
        Optional[List[IntelligenceProfileIndicator]],
        Field(
            description='Includes an assemblage of high-fidelity network indicators of compromise.'
        ),
    ] = None
    field_odata_type: str


class RetentionEvent(Entity):
    created_by: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(description='The user who created the retentionEvent.'),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date time when the retentionEvent was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    description: Annotated[
        Optional[str], Field(description='Optional information about the event.')
    ] = None
    display_name: Annotated[Optional[str], Field(description='Name of the event.')] = (
        None
    )
    event_propagation_results: Annotated[
        Optional[List[EventPropagationResult]],
        Field(
            description='Represents the success status of a created event and additional information.'
        ),
    ] = None
    event_queries: Annotated[
        Optional[List[EventQuery]],
        Field(
            description='Represents the workload (SharePoint Online, OneDrive for Business, Exchange Online) and identification information associated with a retention event.'
        ),
    ] = None
    event_status: Annotated[
        Optional[Union[RetentionEventStatus, Dict[str, Any]]],
        Field(
            description='Status of event propogation to the scoped locations after the event has been created.'
        ),
    ] = None
    event_trigger_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Optional time when the event should be triggered.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_modified_by: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(description='The user who last modified the retentionEvent.'),
    ] = None
    last_modified_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The latest date time when the retentionEvent was modified.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_status_update_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Last time the status of the event was updated.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    retention_event_type: Annotated[
        Optional[Union[RetentionEventType, Dict[str, Any]]],
        Field(
            description='Specifies the event that will start the retention period for labels that use this event type when an event is created.'
        ),
    ] = None
    field_odata_type: str


class RetentionLabel(Entity):
    action_after_retention_period: Annotated[
        Optional[Union[ActionAfterRetentionPeriod, Dict[str, Any]]],
        Field(
            description='Specifies the action to take on the labeled document after the period specified by the retentionDuration property expires. The possible values are: none, delete, startDispositionReview, unknownFutureValue.'
        ),
    ] = None
    behavior_during_retention_period: Annotated[
        Optional[Union[BehaviorDuringRetentionPeriod, Dict[str, Any]]],
        Field(
            description='Specifies how the behavior of a document with this label should be during the retention period. The possible values are: doNotRetain, retain, retainAsRecord, retainAsRegulatoryRecord, unknownFutureValue.'
        ),
    ] = None
    created_by: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(description='Represents the user who created the retentionLabel.'),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Represents the date and time in which the retentionLabel is created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    default_record_behavior: Annotated[
        Optional[Union[DefaultRecordBehavior, Dict[str, Any]]],
        Field(
            description='Specifies the locked or unlocked state of a record label when it is created.The possible values are: startLocked, startUnlocked, unknownFutureValue.'
        ),
    ] = None
    description_for_admins: Annotated[
        Optional[str],
        Field(description='Provides label information for the admin. Optional.'),
    ] = None
    description_for_users: Annotated[
        Optional[str],
        Field(description='Provides the label information for the user. Optional.'),
    ] = None
    display_name: Annotated[
        Optional[str], Field(description='Unique string that defines a label name.')
    ] = None
    is_in_use: Annotated[
        Optional[bool],
        Field(description='Specifies whether the label is currently being used.'),
    ] = None
    label_to_be_applied: Annotated[
        Optional[str],
        Field(
            description='Specifies the replacement label to be applied automatically after the retention period of the current label ends.'
        ),
    ] = None
    last_modified_by: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(description='The user who last modified the retentionLabel.'),
    ] = None
    last_modified_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The latest date time when the retentionLabel was modified.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    retention_duration: Annotated[
        Optional[Union[RetentionDuration, Dict[str, Any]]],
        Field(description='Specifies the number of days to retain the content.'),
    ] = None
    retention_trigger: Annotated[
        Optional[Union[RetentionTrigger, Dict[str, Any]]],
        Field(
            description='Specifies whether the retention duration is calculated from the content creation date, labeled date, or last modification date. The possible values are: dateLabeled, dateCreated, dateModified, dateOfEvent, unknownFutureValue.'
        ),
    ] = None
    descriptors: Annotated[
        Optional[Union[FilePlanDescriptor, Dict[str, Any]]],
        Field(
            description='Represents out-of-the-box values that provide more options to improve the manageability and organization of the content you need to label.'
        ),
    ] = None
    disposition_review_stages: Annotated[
        Optional[List[DispositionReviewStage]],
        Field(
            description="When action at the end of retention is chosen as 'dispositionReview', dispositionReviewStages specifies a sequential set of stages with at least one reviewer in each stage."
        ),
    ] = None
    retention_event_type: Annotated[
        Optional[Union[RetentionEventType, Dict[str, Any]]],
        Field(description='Represents the type associated with a retention event.'),
    ] = None
    field_odata_type: str


class TriggersRoot(Entity):
    retention_events: Optional[List[RetentionEvent]] = None
    field_odata_type: str


class BlobEvidence(AlertEvidence):
    blob_container: Annotated[
        Optional[Union[BlobContainerEvidence, Dict[str, Any]]],
        Field(description='The container which the blob belongs to.'),
    ] = None
    etag: Annotated[
        Optional[str], Field(description='The Etag associated with this blob.')
    ] = None
    file_hashes: Annotated[
        Optional[List[FileHash]],
        Field(description='The file hashes associated with this blob.'),
    ] = None
    name: Annotated[Optional[str], Field(description='The name of the blob.')] = None
    url: Annotated[
        Optional[str], Field(description='The full URL representation of the blob.')
    ] = None
    field_odata_type: str


class CloudLogonSessionEvidence(AlertEvidence):
    account: Annotated[
        Optional[Union[UserEvidence, Dict[str, Any]]],
        Field(description='The account associated with the sign-in session.'),
    ] = None
    browser: Annotated[
        Optional[str],
        Field(description='The browser that is used for the sign-in, if known.'),
    ] = None
    device_name: Annotated[
        Optional[str], Field(description='The friendly name of the device, if known.')
    ] = None
    operating_system: Annotated[
        Optional[str],
        Field(description='The operating system that the device is running, if known.'),
    ] = None
    previous_logon_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The previous sign-in time for this account, if known.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    protocol: Annotated[
        Optional[str],
        Field(
            description='The authentication protocol that is used in this session, if known.'
        ),
    ] = None
    session_id: Annotated[
        Optional[str],
        Field(description='The session ID for the account reported in the alert.'),
    ] = None
    start_utc_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The session start time, if known.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    user_agent: Annotated[
        Optional[str],
        Field(description='The user agent that is used for the sign-in, if known.'),
    ] = None
    field_odata_type: str


class ContainerImageEvidence(AlertEvidence):
    digest_image: Annotated[
        Optional[Union[ContainerImageEvidence, Dict[str, Any]]],
        Field(description='The digest image entity, in case this is a tag image.'),
    ] = None
    image_id: Annotated[
        Optional[str],
        Field(description='The unique identifier for the container image entity.'),
    ] = None
    registry: Annotated[
        Optional[Union[ContainerRegistryEvidence, Dict[str, Any]]],
        Field(description='The container registry for this image.'),
    ] = None
    field_odata_type: str


class DeviceEvidence(AlertEvidence):
    azure_ad_device_id: Annotated[
        Optional[str],
        Field(
            description='A unique identifier assigned to a device by Microsoft Entra ID when device is Microsoft Entra joined.'
        ),
    ] = None
    defender_av_status: Annotated[
        Optional[Union[DefenderAvStatus, Dict[str, Any]]],
        Field(
            description='State of the Defender AntiMalware engine. The possible values are: notReporting, disabled, notUpdated, updated, unknown, notSupported, unknownFutureValue.'
        ),
    ] = None
    device_dns_name: Annotated[
        Optional[str],
        Field(description='The fully qualified domain name (FQDN) for the device.'),
    ] = None
    dns_domain: Annotated[
        Optional[str],
        Field(
            description='The DNS domain that this computer belongs to. A sequence of labels separated by dots.'
        ),
    ] = None
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when the device was first seen.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    health_status: Annotated[
        Optional[Union[DeviceHealthStatus, Dict[str, Any]]],
        Field(
            description='The health state of the device. The possible values are: active, inactive, impairedCommunication, noSensorData, noSensorDataImpairedCommunication, unknown, unknownFutureValue.'
        ),
    ] = None
    host_name: Annotated[
        Optional[str], Field(description='The hostname without the domain suffix.')
    ] = None
    ip_interfaces: Annotated[
        Optional[List[str]],
        Field(description='Ip interfaces of the device during the time of the alert.'),
    ] = None
    last_external_ip_address: Optional[str] = None
    last_ip_address: Optional[str] = None
    logged_on_users: Annotated[
        Optional[List[LoggedOnUser]],
        Field(
            description='Users that were logged on the machine during the time of the alert.'
        ),
    ] = None
    mde_device_id: Annotated[
        Optional[str],
        Field(
            description='A unique identifier assigned to a device by Microsoft Defender for Endpoint.'
        ),
    ] = None
    nt_domain: Annotated[
        Optional[str],
        Field(
            description='A logical grouping of computers within a Microsoft Windows network.'
        ),
    ] = None
    onboarding_status: Annotated[
        Optional[Union[OnboardingStatus, Dict[str, Any]]],
        Field(
            description='The status of the machine onboarding to Microsoft Defender for Endpoint. The possible values are: insufficientInfo, onboarded, canBeOnboarded, unsupported, unknownFutureValue.'
        ),
    ] = None
    os_build: Annotated[
        Optional[float],
        Field(
            description='The build version for the operating system the device is running.'
        ),
    ] = None
    os_platform: Annotated[
        Optional[str],
        Field(description='The operating system platform the device is running.'),
    ] = None
    rbac_group_id: Annotated[
        Optional[float],
        Field(
            description='The ID of the role-based access control (RBAC) device group.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    rbac_group_name: Annotated[
        Optional[str], Field(description='The name of the RBAC device group.')
    ] = None
    risk_score: Annotated[
        Optional[Union[DeviceRiskScore, Dict[str, Any]]],
        Field(
            description='Risk score as evaluated by Microsoft Defender for Endpoint. The possible values are: none, informational, low, medium, high, unknownFutureValue.'
        ),
    ] = None
    version: Annotated[
        Optional[str],
        Field(description='The version of the operating system platform.'),
    ] = None
    vm_metadata: Annotated[
        Optional[Union[VmMetadata, Dict[str, Any]]],
        Field(
            description='Metadata of the virtual machine (VM) on which Microsoft Defender for Endpoint is running.'
        ),
    ] = None
    field_odata_type: str


class DnsEvidence(AlertEvidence):
    dns_server_ip: Optional[Union[IpEvidence, Dict[str, Any]]] = None
    domain_name: Optional[str] = None
    host_ip_address: Optional[Union[IpEvidence, Dict[str, Any]]] = None
    ip_addresses: Optional[List[IpEvidence]] = None
    field_odata_type: str


class HostLogonSessionEvidence(AlertEvidence):
    account: Optional[Union[UserEvidence, Dict[str, Any]]] = None
    end_utc_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    host: Optional[Union[DeviceEvidence, Dict[str, Any]]] = None
    session_id: Optional[str] = None
    start_utc_date_time: Annotated[
        Optional[datetime],
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    field_odata_type: str


class IoTDeviceEvidence(AlertEvidence):
    device_id: Annotated[Optional[str], Field(description='The device ID.')] = None
    device_name: Annotated[
        Optional[str], Field(description='The friendly name of the device.')
    ] = None
    device_page_link: Annotated[
        Optional[str],
        Field(description='The URL to the device page in the IoT Defender portal.'),
    ] = None
    device_sub_type: Annotated[
        Optional[str], Field(description='The device subtype.')
    ] = None
    device_type: Annotated[
        Optional[str],
        Field(
            description="The type of the device. For example, 'temperature sensor,' 'freezer,' 'wind turbine,' and so on."
        ),
    ] = None
    importance: Annotated[
        Optional[Union[IoTDeviceImportanceType, Dict[str, Any]]],
        Field(
            description='The importance level for the IoT device. Possible values are low, normal, high, and unknownFutureValue.'
        ),
    ] = None
    io_t_hub: Annotated[
        Optional[Union[AzureResourceEvidence, Dict[str, Any]]],
        Field(
            description='The azureResourceEvidence entity that represents the IoT Hub that the device belongs to.'
        ),
    ] = None
    io_t_security_agent_id: Annotated[
        Optional[str],
        Field(
            description='The ID of the Azure Security Center for the IoT agent that is running on the device.'
        ),
    ] = None
    ip_address: Annotated[
        Optional[Union[IpEvidence, Dict[str, Any]]],
        Field(description='The current IP address of the device.'),
    ] = None
    is_authorized: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether the device classified as an authorized device.'
        ),
    ] = None
    is_programming: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether the device classified as a programming device.'
        ),
    ] = None
    is_scanner: Annotated[
        Optional[bool],
        Field(description='Indicates whether the device classified as a scanner.'),
    ] = None
    mac_address: Annotated[
        Optional[str], Field(description='The MAC address of the device.')
    ] = None
    manufacturer: Annotated[
        Optional[str], Field(description='The manufacturer of the device.')
    ] = None
    model: Annotated[Optional[str], Field(description='The model of the device.')] = (
        None
    )
    nics: Annotated[
        Optional[List[NicEvidence]],
        Field(description='The current network interface controllers on the device.'),
    ] = None
    operating_system: Annotated[
        Optional[str], Field(description='The operating system the device is running.')
    ] = None
    owners: Annotated[
        Optional[List[str]], Field(description='The owners for the device.')
    ] = None
    protocols: Annotated[
        Optional[List[str]],
        Field(description='The list of protocols that the device supports.'),
    ] = None
    purdue_layer: Annotated[
        Optional[str], Field(description='The Purdue Layer of the device.')
    ] = None
    sensor: Annotated[
        Optional[str], Field(description='The sensor that monitors the device.')
    ] = None
    serial_number: Annotated[
        Optional[str], Field(description='The serial number of the device.')
    ] = None
    site: Annotated[
        Optional[str], Field(description='The site location of the device.')
    ] = None
    source: Annotated[
        Optional[str],
        Field(description='The source (microsoft/vendor) of the device entity.'),
    ] = None
    source_ref: Annotated[
        Optional[Union[UrlEvidence, Dict[str, Any]]],
        Field(
            description='A URL reference to the source item where the device is managed.'
        ),
    ] = None
    zone: Annotated[
        Optional[str],
        Field(description='The zone location of the device within a site.'),
    ] = None
    field_odata_type: str


class KubernetesControllerEvidence(AlertEvidence):
    labels: Annotated[
        Optional[Union[Dictionary, Dict[str, Any]]],
        Field(description='The labels for the Kubernetes pod.'),
    ] = None
    name: Annotated[Optional[str], Field(description='The controller name.')] = None
    namespace: Annotated[
        Optional[Union[KubernetesNamespaceEvidence, Dict[str, Any]]],
        Field(description='The service account namespace.'),
    ] = None
    type: Annotated[Optional[str], Field(description='The controller type.')] = None
    field_odata_type: str


class KubernetesServiceEvidence(AlertEvidence):
    cluster_ip: Annotated[
        Optional[Union[IpEvidence, Dict[str, Any]]],
        Field(description='The service cluster IP.'),
    ] = None
    external_i_ps: Annotated[
        Optional[List[IpEvidence]], Field(description='The service external IPs.')
    ] = None
    labels: Annotated[
        Optional[Union[Dictionary, Dict[str, Any]]],
        Field(description='The service labels.'),
    ] = None
    name: Annotated[Optional[str], Field(description='The service name.')] = None
    namespace: Annotated[
        Optional[Union[KubernetesNamespaceEvidence, Dict[str, Any]]],
        Field(description='The service namespace.'),
    ] = None
    selector: Annotated[
        Optional[Union[Dictionary, Dict[str, Any]]],
        Field(description='The service selector.'),
    ] = None
    service_ports: Annotated[
        Optional[List[KubernetesServicePort]],
        Field(description='The list of service ports.'),
    ] = None
    service_type: Optional[KubernetesServiceType] = None
    field_odata_type: str


class MalwareEvidence(AlertEvidence):
    category: Optional[str] = None
    files: Optional[List[FileEvidence]] = None
    name: Optional[str] = None
    processes: Optional[List[ProcessEvidence]] = None
    field_odata_type: str


class AlertCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Alert]] = None


class IncidentCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Incident]] = None


class ArticleIndicatorCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[ArticleIndicator]] = None


class EdiscoveryReviewSetCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EdiscoveryReviewSet]] = None


class RetentionLabelCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[RetentionLabel]] = None


class IntelligenceProfileCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[IntelligenceProfile]] = None


class RetentionEventCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[RetentionEvent]] = None


class Article(Entity):
    body: Optional[FormattedContent] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when this article was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    image_url: Annotated[
        Optional[str],
        Field(
            description='URL of the header image for this article, used for display purposes.'
        ),
    ] = None
    is_featured: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether this article is currently featured by Microsoft.'
        ),
    ] = None
    last_updated_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The most recent date and time when this article was updated. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    summary: Optional[FormattedContent] = None
    tags: Annotated[
        Optional[List[str]],
        Field(
            description='Tags for this article, communicating keywords, or key concepts.'
        ),
    ] = None
    title: Annotated[Optional[str], Field(description='The title of this article.')] = (
        None
    )
    indicators: Annotated[
        Optional[List[ArticleIndicator]],
        Field(description='Indicators related to this article.'),
    ] = None
    field_odata_type: str


class EdiscoveryExportOperation(CaseOperation):
    description: Annotated[
        Optional[str], Field(description='The description provided for the export.')
    ] = None
    export_file_metadata: Annotated[
        Optional[List[ExportFileMetadata]],
        Field(
            description='Contains the properties for an export file metadata, including downloadUrl, fileName, and size.'
        ),
    ] = None
    export_options: Annotated[
        Optional[Union[ExportOptions, Dict[str, Any]]],
        Field(
            description='The options provided for the export. For more information, see reviewSet: export. Possible values are: originalFiles, text, pdfReplacement,  tags.'
        ),
    ] = None
    export_structure: Annotated[
        Optional[Union[ExportFileStructure, Dict[str, Any]]],
        Field(
            description='The options that specify the structure of the export. For more information, see reviewSet: export. Possible values are: none, directory, pst.'
        ),
    ] = None
    output_name: Annotated[
        Optional[str], Field(description='The name provided for the export.')
    ] = None
    review_set: Annotated[
        Optional[Union[EdiscoveryReviewSet, Dict[str, Any]]],
        Field(description='Review set from where documents are exported.'),
    ] = None
    review_set_query: Annotated[
        Optional[Union[EdiscoveryReviewSetQuery, Dict[str, Any]]],
        Field(
            description='The review set query that is used to filter the documents for export.'
        ),
    ] = None
    field_odata_type: str


class LabelsRoot(Entity):
    authorities: Annotated[
        Optional[List[AuthorityTemplate]],
        Field(
            description='Specifies the underlying authority that describes the type of content to be retained and its retention schedule.'
        ),
    ] = None
    categories: Annotated[
        Optional[List[CategoryTemplate]],
        Field(
            description='Specifies a group of similar types of content in a particular department.'
        ),
    ] = None
    citations: Annotated[
        Optional[List[CitationTemplate]],
        Field(
            description='The specific rule or regulation created by a jurisdiction used to determine whether certain labels and content should be retained or deleted.'
        ),
    ] = None
    departments: Annotated[
        Optional[List[DepartmentTemplate]],
        Field(
            description='Specifies the department or business unit of an organization to which a label belongs.'
        ),
    ] = None
    file_plan_references: Annotated[
        Optional[List[FilePlanReferenceTemplate]],
        Field(
            description='Specifies a unique alpha-numeric identifier for an organization’s retention schedule.'
        ),
    ] = None
    retention_labels: Annotated[
        Optional[List[RetentionLabel]],
        Field(
            description='Represents how customers can manage their data, whether and for how long to retain or delete it.'
        ),
    ] = None
    field_odata_type: str


class Vulnerability(Entity):
    active_exploits_observed: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether this vulnerability has any known exploits associated to known bad actors.'
        ),
    ] = None
    common_weakness_enumeration_ids: Annotated[
        Optional[List[str]],
        Field(description='Community-defined common weakness enumerations (CWE).'),
    ] = None
    created_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when this vulnerability article was first created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    cvss2_summary: Optional[CvssSummary] = None
    cvss3_summary: Optional[CvssSummary] = None
    description: Optional[FormattedContent] = None
    exploits: Annotated[
        Optional[List[Hyperlink]],
        Field(description='Known exploits for this vulnerability.'),
    ] = None
    exploits_available: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether this vulnerability has exploits in public sources (such as Packetstorm or Exploit-DB) online.'
        ),
    ] = None
    has_chatter: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether chatter about this vulnerability has been discovered online.'
        ),
    ] = None
    last_modified_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when this vulnerability article was most recently updated.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    priority_score: Annotated[
        Optional[float],
        Field(
            description='A unique algorithm that reflects the priority of a vulnerability based on the CVSS score, exploits, chatter, and linkage to malware. This property also evaluates the recency of these components so users can understand which vulnerability should be remediated first.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    published_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when this vulnerability article was published.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    references: Annotated[
        Optional[List[Hyperlink]],
        Field(
            description='Reference links where further information can be learned about this vulnerability.'
        ),
    ] = None
    remediation: Annotated[
        Optional[Union[FormattedContent, Dict[str, Any]]],
        Field(description='Any known remediation steps.'),
    ] = None
    severity: Optional[VulnerabilitySeverity] = None
    articles: Annotated[
        Optional[List[Article]],
        Field(description='Articles related to this vulnerability.'),
    ] = None
    components: Annotated[
        Optional[List[VulnerabilityComponent]],
        Field(description='Components related to this vulnerability article.'),
    ] = None
    field_odata_type: str


class ArticleCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Article]] = None


class VulnerabilityCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Vulnerability]] = None


class EdiscoveryExportOperationCollectionResponse(
    BaseCollectionPaginationCountResponse
):
    value: Optional[List[EdiscoveryExportOperation]] = None


class CasesRoot(Entity):
    ediscovery_cases: Optional[List[EdiscoveryCase]] = None
    field_odata_type: str


class EdiscoveryAddToReviewSetOperation(CaseOperation):
    review_set: Annotated[
        Optional[Union[EdiscoveryReviewSet, Dict[str, Any]]],
        Field(
            description='eDiscovery review set to which items matching source collection query gets added.'
        ),
    ] = None
    search: Annotated[
        Optional[Union[EdiscoverySearch, Dict[str, Any]]],
        Field(description='eDiscovery search that gets added to review set.'),
    ] = None
    field_odata_type: str


class EdiscoveryCase(Case):
    closed_by: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(description='The user who closed the case.'),
    ] = None
    closed_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when the case was closed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    external_id: Annotated[
        Optional[str],
        Field(description='The external case number for customer reference.'),
    ] = None
    custodians: Annotated[
        Optional[List[EdiscoveryCustodian]],
        Field(
            description='Returns a list of case ediscoveryCustodian objects for this case.'
        ),
    ] = None
    noncustodial_data_sources: Annotated[
        Optional[List[EdiscoveryNoncustodialDataSource]],
        Field(
            description='Returns a list of case ediscoveryNoncustodialDataSource objects for this case.'
        ),
    ] = None
    operations: Annotated[
        Optional[List[CaseOperation]],
        Field(
            description='Returns a list of case caseOperation objects for this case.'
        ),
    ] = None
    review_sets: Annotated[
        Optional[List[EdiscoveryReviewSet]],
        Field(description='Returns a list of eDiscoveryReviewSet objects in the case.'),
    ] = None
    searches: Annotated[
        Optional[List[EdiscoverySearch]],
        Field(
            description='Returns a list of eDiscoverySearch objects associated with this case.'
        ),
    ] = None
    settings: Annotated[
        Optional[Union[EdiscoveryCaseSettings, Dict[str, Any]]],
        Field(description='Returns a list of eDIscoverySettings objects in the case.'),
    ] = None
    tags: Annotated[
        Optional[List[EdiscoveryReviewTag]],
        Field(
            description='Returns a list of ediscoveryReviewTag objects associated to this case.'
        ),
    ] = None
    field_odata_type: str


class EdiscoveryCustodian(DataSourceContainer):
    acknowledged_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Date and time the custodian acknowledged a hold notification.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    email: Annotated[
        Optional[str], Field(description='Email address of the custodian.')
    ] = None
    last_index_operation: Annotated[
        Optional[Union[EdiscoveryIndexOperation, Dict[str, Any]]],
        Field(
            description='Operation entity that represents the latest indexing for the custodian.'
        ),
    ] = None
    site_sources: Annotated[
        Optional[List[SiteSource]],
        Field(
            description='Data source entity for SharePoint sites associated with the custodian.'
        ),
    ] = None
    unified_group_sources: Annotated[
        Optional[List[UnifiedGroupSource]],
        Field(
            description='Data source entity for groups associated with the custodian.'
        ),
    ] = None
    user_sources: Annotated[
        Optional[List[UserSource]],
        Field(
            description="Data source entity for a the custodian. This is the container for a custodian's mailbox and OneDrive for Business site."
        ),
    ] = None
    field_odata_type: str


class EdiscoveryEstimateOperation(CaseOperation):
    indexed_item_count: Annotated[
        Optional[float],
        Field(
            description='The estimated count of items for the search that matched the content query.'
        ),
    ] = None
    indexed_items_size: Annotated[
        Optional[float],
        Field(
            description='The estimated size of items for the search that matched the content query.'
        ),
    ] = None
    mailbox_count: Annotated[
        Optional[float],
        Field(
            description='The number of mailboxes that had search hits.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    site_count: Annotated[
        Optional[float],
        Field(
            description='The number of mailboxes that had search hits.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    unindexed_item_count: Annotated[
        Optional[float],
        Field(description='The estimated count of unindexed items for the collection.'),
    ] = None
    unindexed_items_size: Annotated[
        Optional[float],
        Field(description='The estimated size of unindexed items for the collection.'),
    ] = None
    search: Annotated[
        Optional[Union[EdiscoverySearch, Dict[str, Any]]],
        Field(description='eDiscovery search.'),
    ] = None
    field_odata_type: str


class EdiscoverySearch(Search):
    data_source_scopes: Annotated[
        Optional[Union[DataSourceScopes, Dict[str, Any]]],
        Field(
            description='When specified, the collection spans across a service for an entire workload. Possible values are: none, allTenantMailboxes, allTenantSites, allCaseCustodians, allCaseNoncustodialDataSources.'
        ),
    ] = None
    additional_sources: Annotated[
        Optional[List[DataSource]],
        Field(description='Adds an additional source to the eDiscovery search.'),
    ] = None
    add_to_review_set_operation: Annotated[
        Optional[Union[EdiscoveryAddToReviewSetOperation, Dict[str, Any]]],
        Field(
            description='Adds the results of the eDiscovery search to the specified reviewSet.'
        ),
    ] = None
    custodian_sources: Annotated[
        Optional[List[DataSource]],
        Field(
            description='Custodian sources that are included in the eDiscovery search.'
        ),
    ] = None
    last_estimate_statistics_operation: Annotated[
        Optional[Union[EdiscoveryEstimateOperation, Dict[str, Any]]],
        Field(
            description='The last estimate operation associated with the eDiscovery search.'
        ),
    ] = None
    noncustodial_sources: Annotated[
        Optional[List[EdiscoveryNoncustodialDataSource]],
        Field(
            description='noncustodialDataSource sources that are included in the eDiscovery search'
        ),
    ] = None
    field_odata_type: str


class EdiscoverySearchExportOperation(CaseOperation):
    additional_options: Annotated[
        Optional[Union[AdditionalOptions, Dict[str, Any]]],
        Field(
            description='The additional items to include in the export. The possible values are: none, teamsAndYammerConversations, cloudAttachments, allDocumentVersions, subfolderContents, listAttachments, unknownFutureValue.'
        ),
    ] = None
    description: Annotated[
        Optional[str], Field(description='The description of the export by the user.')
    ] = None
    display_name: Annotated[
        Optional[str], Field(description='The name of export provided by the user.')
    ] = None
    export_criteria: Annotated[
        Optional[Union[ExportCriteria, Dict[str, Any]]],
        Field(
            description='Items to be included in the export. The possible values are: searchHits, partiallyIndexed, unknownFutureValue.'
        ),
    ] = None
    export_file_metadata: Annotated[
        Optional[List[ExportFileMetadata]],
        Field(
            description='Contains the properties for an export file metadata, including downloadUrl, fileName, and size.'
        ),
    ] = None
    export_format: Annotated[
        Optional[Union[ExportFormat, Dict[str, Any]]],
        Field(
            description='Format of the emails of the export. The possible values are: pst, msg, eml, unknownFutureValue.'
        ),
    ] = None
    export_location: Annotated[
        Optional[Union[ExportLocation, Dict[str, Any]]],
        Field(
            description='Location scope for partially indexed items. You can choose to include partially indexed items only in responsive locations with search hits or in all targeted locations. The possible values are: responsiveLocations, nonresponsiveLocations, unknownFutureValue.'
        ),
    ] = None
    export_single_items: Annotated[
        Optional[bool], Field(description='Indicates whether to export single items.')
    ] = None
    search: Annotated[
        Optional[Union[EdiscoverySearch, Dict[str, Any]]],
        Field(description='The eDiscovery searches under each case.'),
    ] = None
    field_odata_type: str


class Host(Artifact):
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first date and time when this host was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The most recent date and time when this host was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    child_host_pairs: Annotated[
        Optional[List[HostPair]],
        Field(
            description='The hostPairs that are resources associated with a host, where that host is the parentHost and has an outgoing pairing to a childHost.'
        ),
    ] = None
    components: Annotated[
        Optional[List[HostComponent]],
        Field(description='The hostComponents that are associated with this host.'),
    ] = None
    cookies: Annotated[
        Optional[List[HostCookie]],
        Field(description='The hostCookies that are associated with this host.'),
    ] = None
    host_pairs: Annotated[
        Optional[List[HostPair]],
        Field(
            description='The hostPairs that are associated with this host, where this host is either the parentHost or childHost.'
        ),
    ] = None
    parent_host_pairs: Annotated[
        Optional[List[HostPair]],
        Field(
            description='The hostPairs that are associated with a host, where that host is the childHost and has an incoming pairing with a parentHost.'
        ),
    ] = None
    passive_dns: Annotated[
        Optional[List[PassiveDnsRecord]],
        Field(description='Passive DNS retrieval about this host.'),
    ] = None
    passive_dns_reverse: Annotated[
        Optional[List[PassiveDnsRecord]],
        Field(description='Reverse passive DNS retrieval about this host.'),
    ] = None
    ports: Annotated[
        Optional[List[HostPort]],
        Field(description='The hostPorts associated with a host.'),
    ] = None
    reputation: Annotated[
        Optional[Union[HostReputation, Dict[str, Any]]],
        Field(description='Represents a calculated reputation of this host.'),
    ] = None
    ssl_certificates: Annotated[
        Optional[List[HostSslCertificate]],
        Field(
            description='The hostSslCertificates that are associated with this host.'
        ),
    ] = None
    subdomains: Annotated[
        Optional[List[Subdomain]],
        Field(description='The subdomains that are associated with this host.'),
    ] = None
    trackers: Annotated[
        Optional[List[HostTracker]],
        Field(description='The hostTrackers that are associated with this host.'),
    ] = None
    whois: Annotated[
        Optional[Union[WhoisRecord, Dict[str, Any]]],
        Field(description='The most recent whoisRecord for this host.'),
    ] = None
    field_odata_type: str


class HostComponent(Artifact):
    category: Annotated[
        Optional[str],
        Field(
            description='The type of component that was detected (for example, Operating System, Framework, Remote Access, or Server).'
        ),
    ] = None
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first date and time when Microsoft Defender Threat Intelligence observed this web component. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The most recent date and time when Microsoft Defender Threat Intelligence observed this web component. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description='A name running on the artifact, for example, Microsoft IIS.'
        ),
    ] = None
    version: Annotated[
        Optional[str],
        Field(
            description="The component version running on the artifact, for example, v8.5. This shouldn't be assumed to be strictly numerical."
        ),
    ] = None
    host: Optional[Host] = None
    field_odata_type: str


class HostCookie(Artifact):
    domain: Annotated[
        Optional[str], Field(description='The URI for which the cookie is valid.')
    ] = None
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first date and time when this hostCookie was observed by Microsoft Defender Threat Intelligence. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The most recent date and time when this hostCookie was observed by Microsoft Defender Threat Intelligence. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description='The name of the cookie, for example, JSESSIONID or SEARCH_NAMESITE.'
        ),
    ] = None
    host: Optional[Host] = None
    field_odata_type: str


class HostPair(Entity):
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when Microsoft Defender Threat Intelligence first observed the hostPair. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when Microsoft Defender Threat Intelligence last observed the hostPair. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    link_kind: Annotated[
        Optional[str],
        Field(description='The reason that two hosts are identified as hostPair.'),
    ] = None
    child_host: Optional[Host] = None
    parent_host: Optional[Host] = None
    field_odata_type: str


class HostPort(Entity):
    banners: Annotated[
        Optional[List[HostPortBanner]],
        Field(description='The hostPortBanners retrieved from scanning the port.'),
    ] = None
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first date and time when Microsoft Defender Threat Intelligence observed the hostPort. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_scan_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The last date and time when Microsoft Defender Threat Intelligence scanned the hostPort. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The last date and time when Microsoft Defender Threat Intelligence observed the hostPort. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    port: Annotated[
        Optional[float],
        Field(
            description='The numerical identifier of the port which is standardized across the internet.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    protocol: Annotated[
        Optional[Union[HostPortProtocol, Dict[str, Any]]],
        Field(
            description='The general protocol used to scan the port. The possible values are: tcp, udp, unknownFutureValue.'
        ),
    ] = None
    services: Annotated[
        Optional[List[HostPortComponent]],
        Field(description='The hostPortComponents retrieved from scanning the port.'),
    ] = None
    status: Annotated[
        Optional[Union[HostPortStatus, Dict[str, Any]]],
        Field(
            description='The status of the port. The possible values are: open, filtered, closed, unknownFutureValue.'
        ),
    ] = None
    times_observed: Annotated[
        Optional[float],
        Field(
            description='The total amount of times that Microsoft Defender Threat Intelligence has observed the hostPort in all its scans.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    host: Optional[Host] = None
    most_recent_ssl_certificate: Annotated[
        Optional[Union[SslCertificate, Dict[str, Any]]],
        Field(
            description='The most recent sslCertificate used to communicate on the port.'
        ),
    ] = None
    field_odata_type: str


class HostSslCertificate(Artifact):
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first date and time when this hostSslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The most recent date and time when this hostSslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    ports: Annotated[
        Optional[List[HostSslCertificatePort]],
        Field(description='The ports related with this hostSslCertificate.'),
    ] = None
    host: Annotated[
        Optional[Union[Host, Dict[str, Any]]],
        Field(description='The host for this hostSslCertificate.'),
    ] = None
    ssl_certificate: Annotated[
        Optional[Union[SslCertificate, Dict[str, Any]]],
        Field(description='The sslCertificate for this hostSslCertificate.'),
    ] = None
    field_odata_type: str


class HostTracker(Artifact):
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first date and time when this hostTracker was observed by Microsoft Defender Threat Intelligence. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    kind: Annotated[
        Optional[str],
        Field(
            description='The kind of hostTracker that was detected. For example, GoogleAnalyticsID or JarmHash.'
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The most recent date and time when this hostTracker was observed by Microsoft Defender Threat Intelligence. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    value: Annotated[
        Optional[str],
        Field(description='The identification value for the hostTracker.'),
    ] = None
    host: Optional[Host] = None
    field_odata_type: str


class PassiveDnsRecord(Artifact):
    collected_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time that this passiveDnsRecord entry was collected by Microsoft. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when this passiveDnsRecord entry was first seen. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when this passiveDnsRecord entry was most recently seen. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    record_type: Annotated[
        Optional[str],
        Field(description='The DNS record type for this passiveDnsRecord entry.'),
    ] = None
    artifact: Optional[Artifact] = None
    parent_host: Optional[Host] = None
    field_odata_type: str


class SiteSource(DataSource):
    site: Optional[Site] = None
    field_odata_type: str


class SslCertificate(Artifact):
    expiration_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when a certificate expires. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    fingerprint: Annotated[
        Optional[str],
        Field(
            description='A hash of the certificate calculated on the data and signature.'
        ),
    ] = None
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first date and time when this sslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    issue_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when a certificate was issued. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    issuer: Annotated[
        Optional[Union[SslCertificateEntity, Dict[str, Any]]],
        Field(description='The entity that grants this certificate.'),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The most recent date and time when this sslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    serial_number: Annotated[
        Optional[str],
        Field(description='The serial number associated with an SSL certificate.'),
    ] = None
    sha1: Annotated[
        Optional[str],
        Field(
            description='A SHA-1 hash of the certificate. Note: This is not the signature.'
        ),
    ] = None
    subject: Annotated[
        Optional[Union[SslCertificateEntity, Dict[str, Any]]],
        Field(
            description='The person, site, machine, and so on, this certificate is for.'
        ),
    ] = None
    related_hosts: Annotated[
        Optional[List[Host]],
        Field(description='The host resources related with this sslCertificate.'),
    ] = None
    field_odata_type: str


class Subdomain(Entity):
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when Microsoft Defender Threat Intelligence first observed the subdomain. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    host: Optional[Host] = None
    field_odata_type: str


class ThreatIntelligence(Entity):
    article_indicators: Annotated[
        Optional[List[ArticleIndicator]],
        Field(
            description='Refers to indicators of threat or compromise highlighted in an article.Note: List retrieval is not yet supported.'
        ),
    ] = None
    articles: Annotated[
        Optional[List[Article]], Field(description='A list of article objects.')
    ] = None
    host_components: Annotated[
        Optional[List[HostComponent]],
        Field(
            description='Retrieve details about hostComponent objects.Note: List retrieval is not yet supported.'
        ),
    ] = None
    host_cookies: Annotated[
        Optional[List[HostCookie]],
        Field(
            description='Retrieve details about hostCookie objects.Note: List retrieval is not yet supported.'
        ),
    ] = None
    host_pairs: Annotated[
        Optional[List[HostPair]],
        Field(
            description='Retrieve details about hostTracker objects.Note: List retrieval is not yet supported.'
        ),
    ] = None
    host_ports: Annotated[
        Optional[List[HostPort]],
        Field(
            description='Retrieve details about hostPort objects.Note: List retrieval is not yet supported.'
        ),
    ] = None
    hosts: Annotated[
        Optional[List[Host]],
        Field(
            description='Refers to host objects that Microsoft Threat Intelligence has observed.Note: List retrieval is not yet supported.'
        ),
    ] = None
    host_ssl_certificates: Annotated[
        Optional[List[HostSslCertificate]],
        Field(
            description='Retrieve details about hostSslCertificate objects.Note: List retrieval is not yet supported.'
        ),
    ] = None
    host_trackers: Annotated[
        Optional[List[HostTracker]],
        Field(
            description='Retrieve details about hostTracker objects.Note: List retrieval is not yet supported.'
        ),
    ] = None
    intelligence_profile_indicators: Optional[List[IntelligenceProfileIndicator]] = None
    intel_profiles: Annotated[
        Optional[List[IntelligenceProfile]],
        Field(description='A list of intelligenceProfile objects.'),
    ] = None
    passive_dns_records: Annotated[
        Optional[List[PassiveDnsRecord]],
        Field(
            description='Retrieve details about passiveDnsRecord objects.Note: List retrieval is not yet supported.'
        ),
    ] = None
    ssl_certificates: Annotated[
        Optional[List[SslCertificate]],
        Field(
            description='Retrieve details about sslCertificate objects.Note: List retrieval is not yet supported.'
        ),
    ] = None
    subdomains: Annotated[
        Optional[List[Subdomain]],
        Field(
            description='Retrieve details about the subdomain.Note: List retrieval is not yet supported.'
        ),
    ] = None
    vulnerabilities: Annotated[
        Optional[List[Vulnerability]],
        Field(
            description='Retrieve details about vulnerabilities.Note: List retrieval is not yet supported.'
        ),
    ] = None
    whois_history_records: Annotated[
        Optional[List[WhoisHistoryRecord]],
        Field(
            description='Retrieve details about whoisHistoryRecord objects.Note: List retrieval is not yet supported.'
        ),
    ] = None
    whois_records: Annotated[
        Optional[List[WhoisRecord]], Field(description='A list of whoisRecord objects.')
    ] = None
    field_odata_type: str


class UnifiedGroupSource(DataSource):
    included_sources: Annotated[
        Optional[Union[SourceType, Dict[str, Any]]],
        Field(
            description='Specifies which sources are included in this group. Possible values are: mailbox, site.'
        ),
    ] = None
    group: Optional[Group] = None
    field_odata_type: str


class WhoisBaseRecord(Entity):
    abuse: Annotated[
        Optional[Union[WhoisContact, Dict[str, Any]]],
        Field(description='The contact information for the abuse contact.'),
    ] = None
    admin: Annotated[
        Optional[Union[WhoisContact, Dict[str, Any]]],
        Field(description='The contact information for the admin contact.'),
    ] = None
    billing: Annotated[
        Optional[Union[WhoisContact, Dict[str, Any]]],
        Field(description='The contact information for the billing contact.'),
    ] = None
    domain_status: Annotated[
        Optional[str], Field(description='The domain status for this WHOIS object.')
    ] = None
    expiration_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when this WHOIS record expires with the registrar. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first seen date and time of this WHOIS record. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The last seen date and time of this WHOIS record. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_update_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when this WHOIS record was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    nameservers: Annotated[
        Optional[List[WhoisNameserver]],
        Field(description='The nameservers for this WHOIS object.'),
    ] = None
    noc: Annotated[
        Optional[Union[WhoisContact, Dict[str, Any]]],
        Field(description='The contact information for the noc contact.'),
    ] = None
    raw_whois_text: Annotated[
        Optional[str], Field(description='The raw WHOIS details for this WHOIS object.')
    ] = None
    registrant: Annotated[
        Optional[Union[WhoisContact, Dict[str, Any]]],
        Field(description='The contact information for the registrant contact.'),
    ] = None
    registrar: Annotated[
        Optional[Union[WhoisContact, Dict[str, Any]]],
        Field(description='The contact information for the registrar contact.'),
    ] = None
    registration_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when this WHOIS record was registered with a registrar. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    technical: Annotated[
        Optional[Union[WhoisContact, Dict[str, Any]]],
        Field(description='The contact information for the technical contact.'),
    ] = None
    whois_server: Annotated[
        Optional[str], Field(description='The WHOIS server that provides the details.')
    ] = None
    zone: Annotated[
        Optional[Union[WhoisContact, Dict[str, Any]]],
        Field(description='The contact information for the zone contact.'),
    ] = None
    host: Optional[Host] = None
    field_odata_type: str


class ContainerEvidence(AlertEvidence):
    args: Annotated[
        Optional[List[str]], Field(description='The list of arguments.')
    ] = None
    command: Annotated[
        Optional[List[str]], Field(description='The list of commands.')
    ] = None
    container_id: Annotated[Optional[str], Field(description='The container ID.')] = (
        None
    )
    image: Annotated[
        Optional[Union[ContainerImageEvidence, Dict[str, Any]]],
        Field(description='The image used to run the container.'),
    ] = None
    is_privileged: Annotated[
        Optional[bool], Field(description='The privileged status.')
    ] = None
    name: Annotated[Optional[str], Field(description='The container name.')] = None
    pod: Annotated[
        Optional[Union[KubernetesPodEvidence, Dict[str, Any]]],
        Field(description='The pod this container belongs to.'),
    ] = None
    field_odata_type: str


class HostPortComponent(BaseModel):
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first date and time when Microsoft Defender Threat Intelligence observed the hostPortComponent. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    is_recent: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether this hostPortComponent is recent, which is determined by whether the hostPortComponent was observed either at the same time or after the latest hostPortBanner in the scan history, or within two days of the latest scan of the hostPort when there are no hostPortBanners in the scan history.'
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The last date and time when Microsoft Defender Threat Intelligence observed the hostPortComponent. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    component: Optional[Union[HostComponent, Dict[str, Any]]] = None
    field_odata_type: str


class KubernetesPodEvidence(AlertEvidence):
    containers: Annotated[
        Optional[List[ContainerEvidence]],
        Field(
            description='The list of pod containers which are not init or ephemeral containers.'
        ),
    ] = None
    controller: Annotated[
        Optional[Union[KubernetesControllerEvidence, Dict[str, Any]]],
        Field(description='The pod controller.'),
    ] = None
    ephemeral_containers: Annotated[
        Optional[List[ContainerEvidence]],
        Field(description='The list of pod ephemeral containers.'),
    ] = None
    init_containers: Annotated[
        Optional[List[ContainerEvidence]],
        Field(description='The list of pod init containers.'),
    ] = None
    labels: Annotated[
        Optional[Union[Dictionary, Dict[str, Any]]],
        Field(description='The pod labels.'),
    ] = None
    name: Annotated[Optional[str], Field(description='The pod name.')] = None
    namespace: Annotated[
        Optional[Union[KubernetesNamespaceEvidence, Dict[str, Any]]],
        Field(description='The pod namespace.'),
    ] = None
    pod_ip: Annotated[
        Optional[Union[IpEvidence, Dict[str, Any]]], Field(description='The pod IP.')
    ] = None
    service_account: Annotated[
        Optional[Union[KubernetesServiceAccountEvidence, Dict[str, Any]]],
        Field(description='The pod service account.'),
    ] = None
    field_odata_type: str


class WhoisNameserver(BaseModel):
    first_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The first seen date and time of this WHOIS contact. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_seen_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The last seen date and time of this WHOIS contact. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    host: Optional[Host] = None
    field_odata_type: str


class EdiscoveryCaseCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EdiscoveryCase]] = None


class EdiscoveryCustodianCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EdiscoveryCustodian]] = None


class EdiscoverySearchCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[EdiscoverySearch]] = None


class SiteSourceCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[SiteSource]] = None


class UnifiedGroupSourceCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[UnifiedGroupSource]] = None


class HostPairCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HostPair]] = None


class HostComponentCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HostComponent]] = None


class HostCookieCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HostCookie]] = None


class PassiveDnsRecordCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[PassiveDnsRecord]] = None


class HostPortCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HostPort]] = None


class HostSslCertificateCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HostSslCertificate]] = None


class SubdomainCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Subdomain]] = None


class HostTrackerCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HostTracker]] = None


class HostCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Host]] = None


class SslCertificateCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[SslCertificate]] = None


class WhoisHistoryRecordCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[WhoisHistoryRecord]] = None


class WhoisRecordCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[WhoisRecord]] = None


class EdiscoveryAddToReviewSetOperationCollectionResponse(
    BaseCollectionPaginationCountResponse
):
    value: Optional[List[EdiscoveryAddToReviewSetOperation]] = None


class EdiscoveryEstimateOperationCollectionResponse(
    BaseCollectionPaginationCountResponse
):
    value: Optional[List[EdiscoveryEstimateOperation]] = None


class EdiscoverySearchExportOperationCollectionResponse(
    BaseCollectionPaginationCountResponse
):
    value: Optional[List[EdiscoverySearchExportOperation]] = None


class HostnameCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Hostname]] = None


class IpAddressCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[IpAddress]] = None


class HostPortComponentCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[HostPortComponent]] = None


class WhoisNameserverCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[WhoisNameserver]] = None


class ContainerEvidenceCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[ContainerEvidence]] = None


class Hostname(Host):
    registrant: Annotated[
        Optional[str],
        Field(
            description='The company or individual who registered this hostname, from WHOIS data.'
        ),
    ] = None
    registrar: Annotated[
        Optional[str],
        Field(description='The registrar for this hostname, from WHOIS data.'),
    ] = None
    field_odata_type: str


class IpAddress(Host):
    autonomous_system: Annotated[
        Optional[Union[AutonomousSystem, Dict[str, Any]]],
        Field(
            description='The details about the autonomous system to which this IP address belongs.'
        ),
    ] = None
    country_or_region: Annotated[
        Optional[str], Field(description='The country/region for this IP address.')
    ] = None
    hosting_provider: Annotated[
        Optional[str], Field(description='The hosting company listed for this host.')
    ] = None
    netblock: Annotated[
        Optional[str],
        Field(description='The block of IP addresses this IP address belongs to.'),
    ] = None
    field_odata_type: str


class WhoisHistoryRecord(WhoisBaseRecord):
    field_odata_type: str


class WhoisRecord(WhoisBaseRecord):
    history: Annotated[
        Optional[List[WhoisHistoryRecord]],
        Field(
            description='The collection of historical records associated to this WHOIS object.'
        ),
    ] = None
    field_odata_type: str


EdiscoveryReviewTag.model_rebuild()
ContainerImageEvidence.model_rebuild()
CasesRoot.model_rebuild()
EdiscoveryAddToReviewSetOperation.model_rebuild()
EdiscoveryCase.model_rebuild()
EdiscoveryCustodian.model_rebuild()
EdiscoveryEstimateOperation.model_rebuild()
Host.model_rebuild()
HostPort.model_rebuild()
HostSslCertificate.model_rebuild()
SiteSource.model_rebuild()
ThreatIntelligence.model_rebuild()
WhoisBaseRecord.model_rebuild()
ContainerEvidence.model_rebuild()
WhoisHistoryRecordCollectionResponse.model_rebuild()
WhoisRecordCollectionResponse.model_rebuild()
HostnameCollectionResponse.model_rebuild()
IpAddressCollectionResponse.model_rebuild()
Hostname.model_rebuild()
IpAddress.model_rebuild()
WhoisHistoryRecord.model_rebuild()
WhoisRecord.model_rebuild()
