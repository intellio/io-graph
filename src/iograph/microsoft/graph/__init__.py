# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-02-03T21:35:42+00:00

from __future__ import annotations

from datetime import date, datetime, time
from enum import Enum
from typing import Any, Dict, List
from uuid import UUID

from pydantic import BaseModel, Field, RootModel
from typing_extensions import Annotated


class Entity(BaseModel):
    field_odata_type: str
    id: Annotated[
        str | None, Field(description='The unique identifier for an entity. Read-only.')
    ] = None

class KeyValue(BaseModel):
    field_odata_type: str
    key: Annotated[str | None, Field(description='Key for the key-value pair.')] = None
    value: Annotated[str | None, Field(description='Value for the key-value pair.')] = (
        None
    )

from ... import ReferenceNumeric
from . import security, termStore


class AccessAction(BaseModel):
    field_odata_type: str


class ActionState(Enum):
    none = 'none'
    pending = 'pending'
    canceled = 'canceled'
    active = 'active'
    done = 'done'
    failed = 'failed'
    not_supported = 'notSupported'


class AgreementAcceptanceState(Enum):
    accepted = 'accepted'
    declined = 'declined'
    unknown_future_value = 'unknownFutureValue'


class Album(BaseModel):
    field_odata_type: str
    cover_image_item_id: Annotated[
        str | None,
        Field(
            description='Unique identifier of the driveItem that is the cover of the album.'
        ),
    ] = None


class AlternativeSecurityId(BaseModel):
    field_odata_type: str
    identity_provider: Annotated[
        str | None, Field(description='For internal use only.')
    ] = None
    key: Annotated[str | None, Field(description='For internal use only.')] = None
    type: Annotated[
        float | None,
        Field(description='For internal use only.', ge=-2147483648.0, le=2147483647.0),
    ] = None


class AppIdentity(BaseModel):
    field_odata_type: str
    app_id: Annotated[
        str | None,
        Field(
            description='Refers to the unique ID representing application in Microsoft Entra ID.'
        ),
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description='Refers to the application name displayed in the Microsoft Entra admin center.'
        ),
    ] = None
    service_principal_id: Annotated[
        str | None,
        Field(
            description='Refers to the unique ID for the service principal in Microsoft Entra ID.'
        ),
    ] = None
    service_principal_name: Annotated[
        str | None,
        Field(
            description='Refers to the Service Principal Name is the Application name in the tenant.'
        ),
    ] = None


class AppLogUploadState(Enum):
    pending = 'pending'
    completed = 'completed'
    failed = 'failed'
    unknown_future_value = 'unknownFutureValue'


class AssignedLabel(BaseModel):
    field_odata_type: str
    display_name: Annotated[
        str | None, Field(description='The display name of the label. Read-only.')
    ] = None
    label_id: Annotated[
        str | None, Field(description='The unique identifier of the label.')
    ] = None


class DisabledPlan(RootModel[UUID]):
    root: Annotated[
        UUID,
        Field(
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
        ),
    ]


class AssignedLicense(BaseModel):
    field_odata_type: str
    disabled_plans: Annotated[
        List[DisabledPlan] | None,
        Field(
            description="A collection of the unique identifiers for plans that have been disabled. IDs are available in servicePlans > servicePlanId in the tenant's subscribedSkus or serviceStatus > servicePlanId in the tenant's companySubscription."
        ),
    ] = None
    sku_id: Annotated[
        UUID | None,
        Field(
            description='The unique identifier for the SKU. Corresponds to the skuId from subscribedSkus or companySubscription.',
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        ),
    ] = None


class AssignedPlan(BaseModel):
    field_odata_type: str
    assigned_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time at which the plan was assigned. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    capability_status: Annotated[
        str | None,
        Field(
            description='Condition of the capability assignment. The possible values are Enabled, Warning, Suspended, Deleted, LockedOut. See a detailed description of each value.'
        ),
    ] = None
    service: Annotated[
        str | None, Field(description='The name of the service; for example, exchange.')
    ] = None
    service_plan_id: Annotated[
        UUID | None,
        Field(
            description='A GUID that identifies the service plan. For a complete list of GUIDs and their equivalent friendly service names, see Product names and service plan identifiers for licensing.',
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        ),
    ] = None


class AttendanceInterval(BaseModel):
    field_odata_type: str
    duration_in_seconds: Annotated[
        float | None,
        Field(
            description='Duration of the meeting interval in seconds; that is, the difference between joinDateTime and leaveDateTime.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    join_date_time: Annotated[
        datetime | None,
        Field(
            description='The time the attendee joined in UTC.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    leave_date_time: Annotated[
        datetime | None,
        Field(
            description='The time the attendee left in UTC.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class AttendeeType(Enum):
    required = 'required'
    optional = 'optional'
    resource = 'resource'


class AttestationLevel(Enum):
    attested = 'attested'
    not_attested = 'notAttested'
    unknown_future_value = 'unknownFutureValue'


class Audio(BaseModel):
    field_odata_type: str
    album: Annotated[
        str | None, Field(description='The title of the album for this audio file.')
    ] = None
    album_artist: Annotated[
        str | None,
        Field(description='The artist named on the album for the audio file.'),
    ] = None
    artist: Annotated[
        str | None, Field(description='The performing artist for the audio file.')
    ] = None
    bitrate: Annotated[
        float | None, Field(description='Bitrate expressed in kbps.')
    ] = None
    composers: Annotated[
        str | None, Field(description='The name of the composer of the audio file.')
    ] = None
    copyright: Annotated[
        str | None, Field(description='Copyright information for the audio file.')
    ] = None
    disc: Annotated[
        float | None,
        Field(
            description='The number of the disc this audio file came from.',
            ge=-32768.0,
            le=32767.0,
        ),
    ] = None
    disc_count: Annotated[
        float | None,
        Field(
            description='The total number of discs in this album.',
            ge=-32768.0,
            le=32767.0,
        ),
    ] = None
    duration: Annotated[
        float | None,
        Field(description='Duration of the audio file, expressed in milliseconds'),
    ] = None
    genre: Annotated[str | None, Field(description='The genre of this audio file.')] = (
        None
    )
    has_drm: Annotated[
        bool | None,
        Field(
            description='Indicates if the file is protected with digital rights management.'
        ),
    ] = None
    is_variable_bitrate: Annotated[
        bool | None,
        Field(description='Indicates if the file is encoded with a variable bitrate.'),
    ] = None
    title: Annotated[str | None, Field(description='The title of the audio file.')] = (
        None
    )
    track: Annotated[
        float | None,
        Field(
            description='The number of the track on the original disc for this audio file.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    track_count: Annotated[
        float | None,
        Field(
            description='The total number of tracks on the original disc for this audio file.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    year: Annotated[
        float | None,
        Field(
            description='The year the audio file was recorded.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class AudioConferencing(BaseModel):
    field_odata_type: str
    conference_id: Annotated[
        str | None, Field(description='The conference id of the online meeting.')
    ] = None
    dialin_url: Annotated[
        str | None,
        Field(
            description='A URL to the externally-accessible web page that contains dial-in information.'
        ),
    ] = None
    toll_free_number: Annotated[
        str | None,
        Field(
            description='The toll-free number that connects to the Audio Conference Provider.'
        ),
    ] = None
    toll_free_numbers: Annotated[
        List[str] | None,
        Field(
            description='List of toll-free numbers that are displayed in the meeting invite.'
        ),
    ] = None
    toll_number: Annotated[
        str | None,
        Field(
            description='The toll number that connects to the Audio Conference Provider.'
        ),
    ] = None
    toll_numbers: Annotated[
        List[str] | None,
        Field(
            description='List of toll numbers that are displayed in the meeting invite.'
        ),
    ] = None


class AuthenticationMethodKeyStrength(Enum):
    normal = 'normal'
    weak = 'weak'
    unknown = 'unknown'


class AuthenticationMethodModes(Enum):
    password = 'password'
    voice = 'voice'
    hardware_oath = 'hardwareOath'
    software_oath = 'softwareOath'
    sms = 'sms'
    fido2 = 'fido2'
    windows_hello_for_business = 'windowsHelloForBusiness'
    microsoft_authenticator_push = 'microsoftAuthenticatorPush'
    device_based_push = 'deviceBasedPush'
    temporary_access_pass_one_time = 'temporaryAccessPassOneTime'
    temporary_access_pass_multi_use = 'temporaryAccessPassMultiUse'
    email = 'email'
    x509_certificate_single_factor = 'x509CertificateSingleFactor'
    x509_certificate_multi_factor = 'x509CertificateMultiFactor'
    federated_single_factor = 'federatedSingleFactor'
    federated_multi_factor = 'federatedMultiFactor'
    unknown_future_value = 'unknownFutureValue'


class AuthenticationMethodSignInState(Enum):
    not_supported = 'notSupported'
    not_allowed_by_policy = 'notAllowedByPolicy'
    not_enabled = 'notEnabled'
    phone_number_not_unique = 'phoneNumberNotUnique'
    ready = 'ready'
    not_configured = 'notConfigured'
    unknown_future_value = 'unknownFutureValue'


class AuthenticationPhoneType(Enum):
    mobile = 'mobile'
    alternate_mobile = 'alternateMobile'
    office = 'office'
    unknown_future_value = 'unknownFutureValue'


class AuthenticationStrengthPolicyType(Enum):
    built_in = 'builtIn'
    custom = 'custom'
    unknown_future_value = 'unknownFutureValue'


class AuthenticationStrengthRequirements(Enum):
    none = 'none'
    mfa = 'mfa'
    unknown_future_value = 'unknownFutureValue'


class AuthorizationInfo(BaseModel):
    field_odata_type: str
    certificate_user_ids: List[str] | None = None


class AutomaticRepliesStatus(Enum):
    disabled = 'disabled'
    always_enabled = 'alwaysEnabled'
    scheduled = 'scheduled'


class BodyType(Enum):
    text = 'text'
    html = 'html'


class BooleanColumn(BaseModel):
    field_odata_type: str


class BroadcastMeetingAudience(Enum):
    role_is_attendee = 'roleIsAttendee'
    organization = 'organization'
    everyone = 'everyone'
    unknown_future_value = 'unknownFutureValue'


class BroadcastMeetingCaptionSettings(BaseModel):
    field_odata_type: str
    is_caption_enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether captions are enabled for this Teams live event.'
        ),
    ] = None
    spoken_language: Annotated[
        str | None, Field(description='The spoken language.')
    ] = None
    translation_languages: Annotated[
        List[str] | None,
        Field(description='The translation languages (choose up to 6).'),
    ] = None


class BroadcastMeetingSettings(BaseModel):
    field_odata_type: str
    allowed_audience: Annotated[
        BroadcastMeetingAudience | Dict[str, Any] | None,
        Field(
            description='Defines who can join the Teams live event. Possible values are listed in the following table.'
        ),
    ] = None
    captions: Annotated[
        BroadcastMeetingCaptionSettings | Dict[str, Any] | None,
        Field(description='Caption settings of a Teams live event.'),
    ] = None
    is_attendee_report_enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether attendee report is enabled for this Teams live event. Default value is false.'
        ),
    ] = None
    is_question_and_answer_enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether Q&A is enabled for this Teams live event. Default value is false.'
        ),
    ] = None
    is_recording_enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether recording is enabled for this Teams live event. Default value is false.'
        ),
    ] = None
    is_video_on_demand_enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether video on demand is enabled for this Teams live event. Default value is false.'
        ),
    ] = None


class Bundle(BaseModel):
    field_odata_type: str
    album: Annotated[
        Album | Dict[str, Any] | None,
        Field(
            description='If the bundle is an album, then the album property is included'
        ),
    ] = None
    child_count: Annotated[
        float | None,
        Field(
            description='Number of children contained immediately within this container.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class CalculatedColumn(BaseModel):
    field_odata_type: str
    format: Annotated[
        str | None,
        Field(
            description='For dateTime output types, the format of the value. Possible values are: dateOnly or dateTime.'
        ),
    ] = None
    formula: Annotated[
        str | None,
        Field(description='The formula used to compute the value for this column.'),
    ] = None
    output_type: Annotated[
        str | None,
        Field(
            description='The output type used to format values in this column. Possible values are: boolean, currency, dateTime, number, or text.'
        ),
    ] = None


class CalendarColor(Enum):
    auto = 'auto'
    light_blue = 'lightBlue'
    light_green = 'lightGreen'
    light_orange = 'lightOrange'
    light_gray = 'lightGray'
    light_yellow = 'lightYellow'
    light_teal = 'lightTeal'
    light_pink = 'lightPink'
    light_brown = 'lightBrown'
    light_red = 'lightRed'
    max_color = 'maxColor'


class CalendarRoleType(Enum):
    none = 'none'
    free_busy_read = 'freeBusyRead'
    limited_read = 'limitedRead'
    read = 'read'
    write = 'write'
    delegate_without_private_event_access = 'delegateWithoutPrivateEventAccess'
    delegate_with_private_event_access = 'delegateWithPrivateEventAccess'
    custom = 'custom'


class CategoryColor(Enum):
    none = 'none'
    preset0 = 'preset0'
    preset1 = 'preset1'
    preset2 = 'preset2'
    preset3 = 'preset3'
    preset4 = 'preset4'
    preset5 = 'preset5'
    preset6 = 'preset6'
    preset7 = 'preset7'
    preset8 = 'preset8'
    preset9 = 'preset9'
    preset10 = 'preset10'
    preset11 = 'preset11'
    preset12 = 'preset12'
    preset13 = 'preset13'
    preset14 = 'preset14'
    preset15 = 'preset15'
    preset16 = 'preset16'
    preset17 = 'preset17'
    preset18 = 'preset18'
    preset19 = 'preset19'
    preset20 = 'preset20'
    preset21 = 'preset21'
    preset22 = 'preset22'
    preset23 = 'preset23'
    preset24 = 'preset24'


class ChannelIdentity(BaseModel):
    field_odata_type: str
    channel_id: Annotated[
        str | None,
        Field(
            description='The identity of the channel in which the message was posted.'
        ),
    ] = None
    team_id: Annotated[
        str | None,
        Field(description='The identity of the team in which the message was posted.'),
    ] = None


class ChannelMembershipType(Enum):
    standard = 'standard'
    private = 'private'
    unknown_future_value = 'unknownFutureValue'
    shared = 'shared'


class ChannelSummary(BaseModel):
    field_odata_type: str
    guests_count: Annotated[
        float | None,
        Field(
            description='Count of guests in a channel.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    has_members_from_other_tenants: Annotated[
        bool | None,
        Field(
            description='Indicates whether external members are included on the channel.'
        ),
    ] = None
    members_count: Annotated[
        float | None,
        Field(
            description='Count of members in a channel.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    owners_count: Annotated[
        float | None,
        Field(
            description='Count of owners in a channel.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class ChatInfo(BaseModel):
    field_odata_type: str
    message_id: Annotated[
        str | None,
        Field(
            description='The unique identifier of a message in a Microsoft Teams channel.'
        ),
    ] = None
    reply_chain_message_id: Annotated[
        str | None, Field(description='The ID of the reply message.')
    ] = None
    thread_id: Annotated[
        str | None,
        Field(description='The unique identifier for a thread in Microsoft Teams.'),
    ] = None


class ChatMessageActions(Enum):
    reaction_added = 'reactionAdded'
    reaction_removed = 'reactionRemoved'
    action_undefined = 'actionUndefined'
    unknown_future_value = 'unknownFutureValue'


class ChatMessageAttachment(BaseModel):
    field_odata_type: str
    content: Annotated[
        str | None,
        Field(
            description='The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property and contentUrl are mutually exclusive.'
        ),
    ] = None
    content_type: Annotated[
        str | None,
        Field(
            description="The media type of the content attachment. The possible values are: reference: The attachment is a link to another file. Populate the contentURL with the link to the object.forwardedMessageReference: The attachment is a reference to a forwarded message. Populate the content with the original message context.Any contentType that is supported by the Bot Framework's Attachment object.application/vnd.microsoft.card.codesnippet: A code snippet. application/vnd.microsoft.card.announcement: An announcement header."
        ),
    ] = None
    content_url: Annotated[
        str | None, Field(description='The URL for the content of the attachment.')
    ] = None
    id: Annotated[
        str | None, Field(description='Read-only. The unique ID of the attachment.')
    ] = None
    name: Annotated[str | None, Field(description='The name of the attachment.')] = None
    teams_app_id: Annotated[
        str | None,
        Field(
            description='The ID of the Teams app that is associated with the attachment. The property is used to attribute a Teams message card to the specified app.'
        ),
    ] = None
    thumbnail_url: Annotated[
        str | None,
        Field(
            description='The URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. When the user selects the image, the channel would open the document.'
        ),
    ] = None


class ChatMessageImportance(Enum):
    normal = 'normal'
    high = 'high'
    urgent = 'urgent'
    unknown_future_value = 'unknownFutureValue'


class ChatMessagePolicyViolationDlpActionTypes(Enum):
    none = 'none'
    notify_sender = 'notifySender'
    block_access = 'blockAccess'
    block_access_external = 'blockAccessExternal'


class ChatMessagePolicyViolationPolicyTip(BaseModel):
    field_odata_type: str
    compliance_url: Annotated[
        str | None,
        Field(
            description="The URL a user can visit to read about the data loss prevention policies for the organization. (ie, policies about what users shouldn't say in chats)"
        ),
    ] = None
    general_text: Annotated[
        str | None,
        Field(description='Explanatory text shown to the sender of the message.'),
    ] = None
    matched_condition_descriptions: Annotated[
        List[str] | None,
        Field(
            description="The list of improper data in the message that was detected by the data loss prevention app. Each DLP app defines its own conditions, examples include 'Credit Card Number' and 'Social Security Number'."
        ),
    ] = None


class ChatMessagePolicyViolationUserActionTypes(Enum):
    none = 'none'
    override = 'override'
    report_false_positive = 'reportFalsePositive'


class ChatMessagePolicyViolationVerdictDetailsTypes(Enum):
    none = 'none'
    allow_false_positive_override = 'allowFalsePositiveOverride'
    allow_override_without_justification = 'allowOverrideWithoutJustification'
    allow_override_with_justification = 'allowOverrideWithJustification'


class ChatMessageType(Enum):
    message = 'message'
    chat_event = 'chatEvent'
    typing = 'typing'
    unknown_future_value = 'unknownFutureValue'
    system_event_message = 'systemEventMessage'


class ChatRestrictions(BaseModel):
    field_odata_type: str
    allow_text_only: Annotated[
        bool | None,
        Field(
            description='Indicates whether only text is allowed in the meeting chat. Optional.'
        ),
    ] = None


class ChatType(Enum):
    one_on_one = 'oneOnOne'
    group = 'group'
    meeting = 'meeting'
    unknown_future_value = 'unknownFutureValue'


class ChatViewpoint(BaseModel):
    field_odata_type: str
    is_hidden: Annotated[
        bool | None,
        Field(description='Indicates whether the chat is hidden for the current user.'),
    ] = None
    last_message_read_date_time: Annotated[
        datetime | None,
        Field(
            description='Represents the dateTime up until which the current user has read chatMessages in a specific chat.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class ChoiceColumn(BaseModel):
    field_odata_type: str
    allow_text_entry: Annotated[
        bool | None,
        Field(
            description="If true, allows custom values that aren't in the configured choices."
        ),
    ] = None
    choices: Annotated[
        List[str] | None,
        Field(description='The list of values available for this column.'),
    ] = None
    display_as: Annotated[
        str | None,
        Field(
            description='How the choices are to be presented in the UX. Must be one of checkBoxes, dropDownMenu, or radioButtons'
        ),
    ] = None


class CloudAppSecuritySessionControlType(Enum):
    mcas_configured = 'mcasConfigured'
    monitor_only = 'monitorOnly'
    block_downloads = 'blockDownloads'
    unknown_future_value = 'unknownFutureValue'


class CloudClipboardItemPayload(BaseModel):
    field_odata_type: str
    content: Annotated[
        str | None,
        Field(
            description='The formatName version of the value of a cloud clipboard encoded in base64.'
        ),
    ] = None
    format_name: Annotated[
        str | None,
        Field(description='For a list of possible values see formatName values.'),
    ] = None


class ColumnTypes(Enum):
    note = 'note'
    text = 'text'
    choice = 'choice'
    multichoice = 'multichoice'
    number = 'number'
    currency = 'currency'
    date_time = 'dateTime'
    lookup = 'lookup'
    boolean = 'boolean'
    user = 'user'
    url = 'url'
    calculated = 'calculated'
    location = 'location'
    geolocation = 'geolocation'
    term = 'term'
    multiterm = 'multiterm'
    thumbnail = 'thumbnail'
    approval_status = 'approvalStatus'
    unknown_future_value = 'unknownFutureValue'


class ComplianceState(Enum):
    unknown = 'unknown'
    compliant = 'compliant'
    noncompliant = 'noncompliant'
    conflict = 'conflict'
    error = 'error'
    in_grace_period = 'inGracePeriod'
    config_manager = 'configManager'


class ComplianceStatus(Enum):
    unknown = 'unknown'
    not_applicable = 'notApplicable'
    compliant = 'compliant'
    remediated = 'remediated'
    non_compliant = 'nonCompliant'
    error = 'error'
    conflict = 'conflict'
    not_assigned = 'notAssigned'


class ConditionalAccessClientApp(Enum):
    all = 'all'
    browser = 'browser'
    mobile_apps_and_desktop_clients = 'mobileAppsAndDesktopClients'
    exchange_active_sync = 'exchangeActiveSync'
    eas_supported = 'easSupported'
    other = 'other'
    unknown_future_value = 'unknownFutureValue'


class ConditionalAccessDevicePlatform(Enum):
    android = 'android'
    i_os = 'iOS'
    windows = 'windows'
    windows_phone = 'windowsPhone'
    mac_os = 'macOS'
    all = 'all'
    unknown_future_value = 'unknownFutureValue'
    linux = 'linux'


class ConditionalAccessExternalTenantsMembershipKind(Enum):
    all = 'all'
    enumerated = 'enumerated'
    unknown_future_value = 'unknownFutureValue'


class ConditionalAccessGrantControl(Enum):
    block = 'block'
    mfa = 'mfa'
    compliant_device = 'compliantDevice'
    domain_joined_device = 'domainJoinedDevice'
    approved_application = 'approvedApplication'
    compliant_application = 'compliantApplication'
    password_change = 'passwordChange'
    unknown_future_value = 'unknownFutureValue'


class ConditionalAccessGuestOrExternalUserTypes(Enum):
    none = 'none'
    internal_guest = 'internalGuest'
    b2b_collaboration_guest = 'b2bCollaborationGuest'
    b2b_collaboration_member = 'b2bCollaborationMember'
    b2b_direct_connect_user = 'b2bDirectConnectUser'
    other_external_user = 'otherExternalUser'
    service_provider = 'serviceProvider'
    unknown_future_value = 'unknownFutureValue'


class ConditionalAccessInsiderRiskLevels(Enum):
    minor = 'minor'
    moderate = 'moderate'
    elevated = 'elevated'
    unknown_future_value = 'unknownFutureValue'


class ConditionalAccessLocations(BaseModel):
    field_odata_type: str
    exclude_locations: Annotated[
        List[str] | None,
        Field(description='Location IDs excluded from scope of policy.'),
    ] = None
    include_locations: Annotated[
        List[str] | None,
        Field(
            description='Location IDs in scope of policy unless explicitly excluded, All, or AllTrusted.'
        ),
    ] = None


class ConditionalAccessPlatforms(BaseModel):
    field_odata_type: str
    exclude_platforms: Annotated[
        List[ConditionalAccessDevicePlatform] | None,
        Field(
            description='Possible values are: android, iOS, windows, windowsPhone, macOS, linux, all, unknownFutureValue.'
        ),
    ] = None
    include_platforms: Annotated[
        List[ConditionalAccessDevicePlatform] | None,
        Field(
            description='Possible values are: android, iOS, windows, windowsPhone, macOS, linux, all, unknownFutureValue.'
        ),
    ] = None


class ConditionalAccessPolicyState(Enum):
    enabled = 'enabled'
    disabled = 'disabled'
    enabled_for_reporting_but_not_enforced = 'enabledForReportingButNotEnforced'


class ConditionalAccessSessionControl(BaseModel):
    field_odata_type: str
    is_enabled: Annotated[
        bool | None,
        Field(description='Specifies whether the session control is enabled.'),
    ] = None


class ConditionalAccessTransferMethods(Enum):
    none = 'none'
    device_code_flow = 'deviceCodeFlow'
    authentication_transfer = 'authenticationTransfer'
    unknown_future_value = 'unknownFutureValue'


class ConfigurationManagerClientEnabledFeatures(BaseModel):
    field_odata_type: str
    compliance_policy: Annotated[
        bool | None, Field(description='Whether compliance policy is managed by Intune')
    ] = None
    device_configuration: Annotated[
        bool | None,
        Field(description='Whether device configuration is managed by Intune'),
    ] = None
    inventory: Annotated[
        bool | None, Field(description='Whether inventory is managed by Intune')
    ] = None
    modern_apps: Annotated[
        bool | None,
        Field(description='Whether modern application is managed by Intune'),
    ] = None
    resource_access: Annotated[
        bool | None, Field(description='Whether resource access is managed by Intune')
    ] = None
    windows_update_for_business: Annotated[
        bool | None,
        Field(description='Whether Windows Update for Business is managed by Intune'),
    ] = None


class ContentApprovalStatusColumn(BaseModel):
    field_odata_type: str


class ContentTypeInfo(BaseModel):
    field_odata_type: str
    id: Annotated[str | None, Field(description='The ID of the content type.')] = None
    name: Annotated[str | None, Field(description='The name of the content type.')] = (
        None
    )


class ContentTypeOrder(BaseModel):
    field_odata_type: str
    default: Annotated[
        bool | None,
        Field(description='Indicates whether this is the default content type'),
    ] = None
    position: Annotated[
        float | None,
        Field(
            description='Specifies the position in which the content type appears in the selection UI.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class CountryLookupMethodType(Enum):
    client_ip_address = 'clientIpAddress'
    authenticator_app_gps = 'authenticatorAppGps'
    unknown_future_value = 'unknownFutureValue'


class CourseStatus(Enum):
    not_started = 'notStarted'
    in_progress = 'inProgress'
    completed = 'completed'
    unknown_future_value = 'unknownFutureValue'


class CurrencyColumn(BaseModel):
    field_odata_type: str
    locale: Annotated[
        str | None,
        Field(
            description='Specifies the locale from which to infer the currency symbol.'
        ),
    ] = None


class CustomSecurityAttributeValue(BaseModel):
    field_odata_type: str


class DateTimeColumn(BaseModel):
    field_odata_type: str
    display_as: Annotated[
        str | None,
        Field(
            description='How the value should be presented in the UX. Must be one of default, friendly, or standard. See below for more details. If unspecified, treated as default.'
        ),
    ] = None
    format: Annotated[
        str | None,
        Field(
            description='Indicates whether the value should be presented as a date only or a date and time. Must be one of dateOnly or dateTime'
        ),
    ] = None


class DateTimeTimeZone(BaseModel):
    field_odata_type: str
    date_time: Annotated[
        str | None,
        Field(
            description='A single point of time in a combined date and time representation ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).'
        ),
    ] = None
    time_zone: Annotated[
        str | None,
        Field(
            description="Represents a time zone, for example, 'Pacific Standard Time'. See below for more possible values."
        ),
    ] = None


class DayOfWeek(Enum):
    sunday = 'sunday'
    monday = 'monday'
    tuesday = 'tuesday'
    wednesday = 'wednesday'
    thursday = 'thursday'
    friday = 'friday'
    saturday = 'saturday'


class DefaultColumnValue(BaseModel):
    field_odata_type: str
    formula: Annotated[
        str | None,
        Field(
            description='The formula used to compute the default value for the column.'
        ),
    ] = None
    value: Annotated[
        str | None,
        Field(
            description='The direct value to use as the default value for the column.'
        ),
    ] = None


class DelegateMeetingMessageDeliveryOptions(Enum):
    send_to_delegate_and_information_to_principal = (
        'sendToDelegateAndInformationToPrincipal'
    )
    send_to_delegate_and_principal = 'sendToDelegateAndPrincipal'
    send_to_delegate_only = 'sendToDelegateOnly'


class Deleted(BaseModel):
    field_odata_type: str
    state: Annotated[
        str | None, Field(description='Represents the state of the deleted item.')
    ] = None


class DeviceActionResult(BaseModel):
    field_odata_type: str
    action_name: Annotated[str | None, Field(description='Action name')] = None
    action_state: ActionState | None = None
    last_updated_date_time: Annotated[
        datetime | None,
        Field(
            description='Time the action state was last updated',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    start_date_time: Annotated[
        datetime | None,
        Field(
            description='Time the action was initiated',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class DeviceEnrollmentType(Enum):
    unknown = 'unknown'
    user_enrollment = 'userEnrollment'
    device_enrollment_manager = 'deviceEnrollmentManager'
    apple_bulk_with_user = 'appleBulkWithUser'
    apple_bulk_without_user = 'appleBulkWithoutUser'
    windows_azure_ad_join = 'windowsAzureADJoin'
    windows_bulk_userless = 'windowsBulkUserless'
    windows_auto_enrollment = 'windowsAutoEnrollment'
    windows_bulk_azure_domain_join = 'windowsBulkAzureDomainJoin'
    windows_co_management = 'windowsCoManagement'
    windows_azure_ad_join_using_device_auth = 'windowsAzureADJoinUsingDeviceAuth'
    apple_user_enrollment = 'appleUserEnrollment'
    apple_user_enrollment_with_service_account = 'appleUserEnrollmentWithServiceAccount'


class DeviceHealthAttestationState(BaseModel):
    field_odata_type: str
    attestation_identity_key: Annotated[
        str | None,
        Field(
            description='TWhen an Attestation Identity Key (AIK) is present on a device, it indicates that the device has an endorsement key (EK) certificate.'
        ),
    ] = None
    bit_locker_status: Annotated[
        str | None, Field(description='On or Off of BitLocker Drive Encryption')
    ] = None
    boot_app_security_version: Annotated[
        str | None,
        Field(description='The security version number of the Boot Application'),
    ] = None
    boot_debugging: Annotated[
        str | None,
        Field(
            description='When bootDebugging is enabled, the device is used in development and testing'
        ),
    ] = None
    boot_manager_security_version: Annotated[
        str | None,
        Field(description='The security version number of the Boot Application'),
    ] = None
    boot_manager_version: Annotated[
        str | None, Field(description='The version of the Boot Manager')
    ] = None
    boot_revision_list_info: Annotated[
        str | None,
        Field(
            description='The Boot Revision List that was loaded during initial boot on the attested device'
        ),
    ] = None
    code_integrity: Annotated[
        str | None,
        Field(
            description='When code integrity is enabled, code execution is restricted to integrity verified code'
        ),
    ] = None
    code_integrity_check_version: Annotated[
        str | None, Field(description='The version of the Boot Manager')
    ] = None
    code_integrity_policy: Annotated[
        str | None,
        Field(
            description='The Code Integrity policy that is controlling the security of the boot environment'
        ),
    ] = None
    content_namespace_url: Annotated[
        str | None, Field(description='The DHA report version. (Namespace version)')
    ] = None
    content_version: Annotated[
        str | None, Field(description='The HealthAttestation state schema version')
    ] = None
    data_excution_policy: Annotated[
        str | None,
        Field(
            description='DEP Policy defines a set of hardware and software technologies that perform additional checks on memory'
        ),
    ] = None
    device_health_attestation_status: Annotated[
        str | None, Field(description='The DHA report version. (Namespace version)')
    ] = None
    early_launch_anti_malware_driver_protection: Annotated[
        str | None,
        Field(
            description='ELAM provides protection for the computers in your network when they start up'
        ),
    ] = None
    health_attestation_supported_status: Annotated[
        str | None,
        Field(
            description='This attribute indicates if DHA is supported for the device'
        ),
    ] = None
    health_status_mismatch_info: Annotated[
        str | None,
        Field(
            description='This attribute appears if DHA-Service detects an integrity issue'
        ),
    ] = None
    issued_date_time: Annotated[
        datetime | None,
        Field(
            description='The DateTime when device was evaluated or issued to MDM',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_update_date_time: Annotated[
        str | None, Field(description='The Timestamp of the last update.')
    ] = None
    operating_system_kernel_debugging: Annotated[
        str | None,
        Field(
            description='When operatingSystemKernelDebugging is enabled, the device is used in development and testing'
        ),
    ] = None
    operating_system_rev_list_info: Annotated[
        str | None,
        Field(
            description='The Operating System Revision List that was loaded during initial boot on the attested device'
        ),
    ] = None
    pcr0: Annotated[
        str | None, Field(description='The measurement that is captured in PCR[0]')
    ] = None
    pcr_hash_algorithm: Annotated[
        str | None,
        Field(
            description='Informational attribute that identifies the HASH algorithm that was used by TPM'
        ),
    ] = None
    reset_count: Annotated[
        float | None,
        Field(description='The number of times a PC device has hibernated or resumed'),
    ] = None
    restart_count: Annotated[
        float | None, Field(description='The number of times a PC device has rebooted')
    ] = None
    safe_mode: Annotated[
        str | None,
        Field(
            description='Safe mode is a troubleshooting option for Windows that starts your computer in a limited state'
        ),
    ] = None
    secure_boot: Annotated[
        str | None,
        Field(
            description='When Secure Boot is enabled, the core components must have the correct cryptographic signatures'
        ),
    ] = None
    secure_boot_configuration_policy_finger_print: Annotated[
        str | None,
        Field(description='Fingerprint of the Custom Secure Boot Configuration Policy'),
    ] = None
    test_signing: Annotated[
        str | None,
        Field(
            description='When test signing is allowed, the device does not enforce signature validation during boot'
        ),
    ] = None
    tpm_version: Annotated[
        str | None,
        Field(description='The security version number of the Boot Application'),
    ] = None
    virtual_secure_mode: Annotated[
        str | None,
        Field(
            description='VSM is a container that protects high value assets from a compromised kernel'
        ),
    ] = None
    windows_pe: Annotated[
        str | None,
        Field(
            description='Operating system running with limited services that is used to prepare a computer for Windows'
        ),
    ] = None


class DeviceManagementExchangeAccessState(Enum):
    none = 'none'
    unknown = 'unknown'
    allowed = 'allowed'
    blocked = 'blocked'
    quarantined = 'quarantined'


class DeviceManagementExchangeAccessStateReason(Enum):
    none = 'none'
    unknown = 'unknown'
    exchange_global_rule = 'exchangeGlobalRule'
    exchange_individual_rule = 'exchangeIndividualRule'
    exchange_device_rule = 'exchangeDeviceRule'
    exchange_upgrade = 'exchangeUpgrade'
    exchange_mailbox_policy = 'exchangeMailboxPolicy'
    other = 'other'
    compliant = 'compliant'
    not_compliant = 'notCompliant'
    not_enrolled = 'notEnrolled'
    unknown_location = 'unknownLocation'
    mfa_required = 'mfaRequired'
    azure_ad_block_due_to_access_policy = 'azureADBlockDueToAccessPolicy'
    compromised_password = 'compromisedPassword'
    device_not_known_with_managed_app = 'deviceNotKnownWithManagedApp'


class DeviceRegistrationState(Enum):
    not_registered = 'notRegistered'
    registered = 'registered'
    revoked = 'revoked'
    key_conflict = 'keyConflict'
    approval_pending = 'approvalPending'
    certificate_reset = 'certificateReset'
    not_registered_pending_enrollment = 'notRegisteredPendingEnrollment'
    unknown = 'unknown'


class DisplayNameLocalization(BaseModel):
    field_odata_type: str
    display_name: Annotated[
        str | None,
        Field(
            description='If present, the value of this field contains the displayName string that has been set for the language present in the languageTag field.'
        ),
    ] = None
    language_tag: Annotated[
        str | None,
        Field(
            description='Provides the language culture-code and friendly name of the language that the displayName field has been provided in.'
        ),
    ] = None


class DocumentSetContent(BaseModel):
    field_odata_type: str
    content_type: Annotated[
        ContentTypeInfo | Dict[str, Any] | None,
        Field(description='Content type information of the file.'),
    ] = None
    file_name: Annotated[
        str | None,
        Field(
            description='Name of the file in resource folder that should be added as a default content or a template in the document set.'
        ),
    ] = None
    folder_name: Annotated[
        str | None,
        Field(
            description='Folder name in which the file will be placed when a new document set is created in the library.'
        ),
    ] = None


class DocumentSetVersionItem(BaseModel):
    field_odata_type: str
    item_id: Annotated[
        str | None, Field(description='The unique identifier for the item.')
    ] = None
    title: Annotated[str | None, Field(description='The title of the item.')] = None
    version_id: Annotated[
        str | None, Field(description='The version ID of the item.')
    ] = None


class EmailAddress(BaseModel):
    field_odata_type: str
    address: Annotated[
        str | None, Field(description='The email address of the person or entity.')
    ] = None
    name: Annotated[
        str | None, Field(description='The display name of the person or entity.')
    ] = None


class EmployeeOrgData(BaseModel):
    field_odata_type: str
    cost_center: Annotated[
        str | None,
        Field(
            description='The cost center associated with the user. Returned only on $select. Supports $filter.'
        ),
    ] = None
    division: Annotated[
        str | None,
        Field(
            description='The name of the division in which the user works. Returned only on $select. Supports $filter.'
        ),
    ] = None




class EventMessageDetail(BaseModel):
    field_odata_type: str


class EventType(Enum):
    single_instance = 'singleInstance'
    occurrence = 'occurrence'
    exception = 'exception'
    series_master = 'seriesMaster'


class Extension(Entity):
    field_odata_type: str


class ExternalAudienceScope(Enum):
    none = 'none'
    contacts_only = 'contactsOnly'
    all = 'all'


class ExternalLink(BaseModel):
    field_odata_type: str
    href: Annotated[str | None, Field(description='The URL of the link.')] = None


class FieldValueSet(Entity):
    field_odata_type: str


class FileSystemInfo(BaseModel):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The UTC date and time the file was created on a client.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_accessed_date_time: Annotated[
        datetime | None,
        Field(
            description='The UTC date and time the file was last accessed. Available for the recent file list only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The UTC date and time the file was last modified on a client.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class FilterMode(Enum):
    include = 'include'
    exclude = 'exclude'


class FolderView(BaseModel):
    field_odata_type: str
    sort_by: Annotated[
        str | None,
        Field(description='The method by which the folder should be sorted.'),
    ] = None
    sort_order: Annotated[
        str | None,
        Field(
            description='If true, indicates that items should be sorted in descending order. Otherwise, items should be sorted ascending.'
        ),
    ] = None
    view_type: Annotated[
        str | None,
        Field(
            description='The type of view that should be used to represent the folder.'
        ),
    ] = None


class FollowupFlagStatus(Enum):
    not_flagged = 'notFlagged'
    complete = 'complete'
    flagged = 'flagged'


class FreeBusyStatus(Enum):
    unknown = 'unknown'
    free = 'free'
    tentative = 'tentative'
    busy = 'busy'
    oof = 'oof'
    working_elsewhere = 'workingElsewhere'


class GeoCoordinates(BaseModel):
    field_odata_type: str
    altitude: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='Optional. The altitude (height), in feet,  above sea level for the item. Read-only.'
        ),
    ] = None
    latitude: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='Optional. The latitude, in decimal, for the item. Read-only.'
        ),
    ] = None
    longitude: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='Optional. The longitude, in decimal, for the item. Read-only.'
        ),
    ] = None


class GeolocationColumn(BaseModel):
    field_odata_type: str


class GiphyRatingType(Enum):
    strict = 'strict'
    moderate = 'moderate'
    unknown_future_value = 'unknownFutureValue'


class GroupLifecyclePolicy(Entity):
    field_odata_type: str
    alternate_notification_emails: Annotated[
        str | None,
        Field(
            description='List of email address to send notifications for groups without owners. Multiple email address can be defined by separating email address with a semicolon.'
        ),
    ] = None
    group_lifetime_in_days: Annotated[
        float | None,
        Field(
            description='Number of days before a group expires and needs to be renewed. Once renewed, the group expiration is extended by the number of days defined.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    managed_group_types: Annotated[
        str | None,
        Field(
            description='The group type for which the expiration policy applies. Possible values are All, Selected or None.'
        ),
    ] = None


class Hashes(BaseModel):
    field_odata_type: str
    crc32_hash: Annotated[
        str | None,
        Field(
            description='The CRC32 value of the file in little endian (if available). Read-only.'
        ),
    ] = None
    quick_xor_hash: Annotated[
        str | None,
        Field(
            description='A proprietary hash of the file that can be used to determine if the contents of the file have changed (if available). Read-only.'
        ),
    ] = None
    sha1_hash: Annotated[
        str | None,
        Field(
            description='SHA1 hash for the contents of the file (if available). Read-only.'
        ),
    ] = None
    sha256_hash: Annotated[
        str | None,
        Field(
            description='SHA256 hash for the contents of the file (if available). Read-only.'
        ),
    ] = None


class HyperlinkOrPictureColumn(BaseModel):
    field_odata_type: str
    is_picture: Annotated[
        bool | None,
        Field(
            description='Specifies whether the display format used for URL columns is an image or a hyperlink.'
        ),
    ] = None


class Identity(BaseModel):
    field_odata_type: str
    display_name: Annotated[
        str | None,
        Field(
            description="The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta."
        ),
    ] = None
    id: Annotated[
        str | None,
        Field(
            description="Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review."
        ),
    ] = None


class IdentitySet(BaseModel):
    field_odata_type: str
    application: Annotated[
        Identity | Dict[str, Any] | None,
        Field(description='Optional. The application associated with this action.'),
    ] = None
    device: Annotated[
        Identity | Dict[str, Any] | None,
        Field(description='Optional. The device associated with this action.'),
    ] = None
    user: Annotated[
        Identity | Dict[str, Any] | None,
        Field(description='Optional. The user associated with this action.'),
    ] = None


class Image(BaseModel):
    field_odata_type: str
    height: Annotated[
        float | None,
        Field(
            description='Optional. Height of the image, in pixels. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    width: Annotated[
        float | None,
        Field(
            description='Optional. Width of the image, in pixels. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class ImageInfo(BaseModel):
    field_odata_type: str
    add_image_query: Annotated[
        bool | None,
        Field(
            description='Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For example – a high contrast image'
        ),
    ] = None
    alternate_text: Annotated[
        str | None,
        Field(description='Optional; alt-text accessible content for the image'),
    ] = None
    alternative_text: str | None = None
    icon_url: Annotated[
        str | None,
        Field(
            description='Optional; URI that points to an icon which represents the application used to generate the activity'
        ),
    ] = None


class Importance(Enum):
    low = 'low'
    normal = 'normal'
    high = 'high'


class IncompleteData(BaseModel):
    field_odata_type: str
    missing_data_before_date_time: Annotated[
        datetime | None,
        Field(
            description='The service does not have source data before the specified time.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    was_throttled: Annotated[
        bool | None,
        Field(description='Some data was not recorded due to excessive activity.'),
    ] = None


class InferenceClassificationType(Enum):
    focused = 'focused'
    other = 'other'


class InsightIdentity(BaseModel):
    field_odata_type: str
    address: Annotated[
        str | None,
        Field(description='The email address of the user who shared the item.'),
    ] = None
    display_name: Annotated[
        str | None,
        Field(description='The display name of the user who shared the item.'),
    ] = None
    id: Annotated[
        str | None, Field(description='The ID of the user who shared the item.')
    ] = None


class IntegerRange(BaseModel):
    field_odata_type: str
    end: Annotated[
        float | None,
        Field(description='The inclusive upper bound of the integer range.'),
    ] = None
    start: Annotated[
        float | None,
        Field(description='The inclusive lower bound of the integer range.'),
    ] = None


class InternetMessageHeader(BaseModel):
    field_odata_type: str
    name: Annotated[
        str | None, Field(description='Represents the key in a key-value pair.')
    ] = None
    value: Annotated[
        str | None, Field(description='The value in a key-value pair.')
    ] = None


class IpRange(BaseModel):
    field_odata_type: str


class ItemActionStat(BaseModel):
    field_odata_type: str
    action_count: Annotated[
        float | None,
        Field(
            description='The number of times the action took place. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    actor_count: Annotated[
        float | None,
        Field(
            description='The number of distinct actors that performed the action. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class ItemBody(BaseModel):
    field_odata_type: str
    content: Annotated[str | None, Field(description='The content of the item.')] = None
    content_type: Annotated[
        BodyType | Dict[str, Any] | None,
        Field(
            description='The type of the content. Possible values are text and html.'
        ),
    ] = None


class JoinMeetingIdSettings(BaseModel):
    field_odata_type: str
    is_passcode_required: Annotated[
        bool | None,
        Field(
            description='Indicates whether a passcode is required to join a meeting when using joinMeetingId. Optional.'
        ),
    ] = None
    join_meeting_id: Annotated[
        str | None,
        Field(
            description='The meeting ID to be used to join a meeting. Optional. Read-only.'
        ),
    ] = None
    passcode: Annotated[
        str | None,
        Field(description='The passcode to join a meeting.  Optional. Read-only.'),
    ] = None





class LearningCourseActivity(Entity):
    field_odata_type: str
    completed_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time when the assignment was completed. Optional.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    completion_percentage: Annotated[
        float | None,
        Field(
            description='The percentage completion value of the course activity. Optional.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    externalcourse_activity_id: str | None = None
    learner_user_id: Annotated[
        str | None,
        Field(
            description='The user ID of the learner to whom the activity is assigned. Required.'
        ),
    ] = None
    learning_content_id: Annotated[
        str | None,
        Field(
            description='The ID of the learning content created in Viva Learning. Required.'
        ),
    ] = None
    learning_provider_id: Annotated[
        str | None, Field(description='The registration ID of the provider. Required.')
    ] = None
    status: Annotated[
        CourseStatus | Dict[str, Any] | None,
        Field(
            description='The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.'
        ),
    ] = None


class DisabledPlanModel(RootModel[UUID | None]):
    root: Annotated[
        UUID | None,
        Field(
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
        ),
    ] = None


class LicenseAssignmentState(BaseModel):
    field_odata_type: str
    assigned_by_group: str | None = None
    disabled_plans: List[DisabledPlanModel] | None = None
    error: str | None = None
    last_updated_date_time: Annotated[
        datetime | None,
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    sku_id: Annotated[
        UUID | None,
        Field(
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
        ),
    ] = None
    state: str | None = None


class LicenseProcessingState(BaseModel):
    field_odata_type: str
    state: str | None = None


class LinkedResource(Entity):
    field_odata_type: str
    application_name: Annotated[
        str | None,
        Field(description='The app name of the source that sends the linkedResource.'),
    ] = None
    display_name: Annotated[
        str | None, Field(description='The title of the linkedResource.')
    ] = None
    external_id: Annotated[
        str | None,
        Field(
            description='ID of the object that is associated with this task on the third-party/partner system.'
        ),
    ] = None
    web_url: Annotated[
        str | None, Field(description='Deep link to the linkedResource.')
    ] = None


class ListInfo(BaseModel):
    field_odata_type: str
    content_types_enabled: Annotated[
        bool | None,
        Field(
            description='If true, indicates that content types are enabled for this list.'
        ),
    ] = None
    hidden: Annotated[
        bool | None,
        Field(
            description="If true, indicates that the list isn't normally visible in the SharePoint user experience."
        ),
    ] = None
    template: Annotated[
        str | None,
        Field(
            description='An enumerated value that represents the base list template used in creating the list. Possible values include documentLibrary, genericList, task, survey, announcements, contacts, and more.'
        ),
    ] = None


class LobbyBypassScope(Enum):
    organizer = 'organizer'
    organization = 'organization'
    organization_and_federated = 'organizationAndFederated'
    everyone = 'everyone'
    unknown_future_value = 'unknownFutureValue'
    invited = 'invited'
    organization_excluding_guests = 'organizationExcludingGuests'


class LobbyBypassSettings(BaseModel):
    field_odata_type: str
    is_dial_in_bypass_enabled: Annotated[
        bool | None,
        Field(
            description='Specifies whether or not to always let dial-in callers bypass the lobby. Optional.'
        ),
    ] = None
    scope: Annotated[
        LobbyBypassScope | Dict[str, Any] | None,
        Field(
            description='Specifies the type of participants that are automatically admitted into a meeting, bypassing the lobby. Optional.'
        ),
    ] = None


class LocaleInfo(BaseModel):
    field_odata_type: str
    display_name: Annotated[
        str | None,
        Field(
            description="A name representing the user's locale in natural language, for example, 'English (United States)'."
        ),
    ] = None
    locale: Annotated[
        str | None,
        Field(
            description="A locale representation for the user, which includes the user's preferred language and country/region. For example, 'en-us'. The language component follows 2-letter codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in ISO 3166-1 alpha-2."
        ),
    ] = None


class LocationType(Enum):
    default = 'default'
    conference_room = 'conferenceRoom'
    home_address = 'homeAddress'
    business_address = 'businessAddress'
    geo_coordinates = 'geoCoordinates'
    street_address = 'streetAddress'
    hotel = 'hotel'
    restaurant = 'restaurant'
    local_business = 'localBusiness'
    postal_address = 'postalAddress'


class LocationUniqueIdType(Enum):
    unknown = 'unknown'
    location_store = 'locationStore'
    directory = 'directory'
    private = 'private'
    bing = 'bing'


class LongRunningOperationStatus(Enum):
    not_started = 'notStarted'
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'
    unknown_future_value = 'unknownFutureValue'


class LookupColumn(BaseModel):
    field_odata_type: str
    allow_multiple_values: Annotated[
        bool | None,
        Field(
            description='Indicates whether multiple values can be selected from the source.'
        ),
    ] = None
    allow_unlimited_length: Annotated[
        bool | None,
        Field(
            description='Indicates whether values in the column should be able to exceed the standard limit of 255 characters.'
        ),
    ] = None
    column_name: Annotated[
        str | None, Field(description='The name of the lookup source column.')
    ] = None
    list_id: Annotated[
        str | None,
        Field(description='The unique identifier of the lookup source list.'),
    ] = None
    primary_lookup_column_id: Annotated[
        str | None,
        Field(
            description='If specified, this column is a secondary lookup, pulling an additional field from the list item looked up by the primary lookup. Use the list item looked up by the primary as the source for the column named here.'
        ),
    ] = None


class Malware(BaseModel):
    field_odata_type: str
    description: Annotated[
        str | None,
        Field(description='Contains the virus details for the malware facet.'),
    ] = None


class ManagedAppFlaggedReason(Enum):
    none = 'none'
    rooted_device = 'rootedDevice'


class ManagedAppOperation(Entity):
    field_odata_type: str
    display_name: Annotated[str | None, Field(description='The operation name.')] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The last time the app operation was modified.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    state: Annotated[
        str | None, Field(description='The current state of the operation')
    ] = None
    version: Annotated[str | None, Field(description='Version of the entity.')] = None


class ManagedAppPolicy(Entity):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time the policy was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    description: Annotated[
        str | None, Field(description="The policy's description.")
    ] = None
    display_name: Annotated[str | None, Field(description='Policy display name.')] = (
        None
    )
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='Last time the policy was modified.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    version: Annotated[str | None, Field(description='Version of the entity.')] = None


class ManagedDeviceOwnerType(Enum):
    unknown = 'unknown'
    company = 'company'
    personal = 'personal'
    unknown_future_value = 'unknownFutureValue'


class ManagedDevicePartnerReportedHealthState(Enum):
    unknown = 'unknown'
    activated = 'activated'
    deactivated = 'deactivated'
    secured = 'secured'
    low_severity = 'lowSeverity'
    medium_severity = 'mediumSeverity'
    high_severity = 'highSeverity'
    unresponsive = 'unresponsive'
    compromised = 'compromised'
    misconfigured = 'misconfigured'


class ManagementAgentType(Enum):
    eas = 'eas'
    mdm = 'mdm'
    eas_mdm = 'easMdm'
    intune_client = 'intuneClient'
    eas_intune_client = 'easIntuneClient'
    configuration_manager_client = 'configurationManagerClient'
    configuration_manager_client_mdm = 'configurationManagerClientMdm'
    configuration_manager_client_mdm_eas = 'configurationManagerClientMdmEas'
    unknown = 'unknown'
    jamf = 'jamf'
    google_cloud_device_policy_controller = 'googleCloudDevicePolicyController'
    microsoft365_managed_mdm = 'microsoft365ManagedMdm'
    ms_sense = 'msSense'


class MeetingChatHistoryDefaultMode(Enum):
    none = 'none'
    all = 'all'
    unknown_future_value = 'unknownFutureValue'


class MeetingChatMode(Enum):
    enabled = 'enabled'
    disabled = 'disabled'
    limited = 'limited'
    unknown_future_value = 'unknownFutureValue'


class MessageActionFlag(Enum):
    any = 'any'
    call = 'call'
    do_not_forward = 'doNotForward'
    follow_up = 'followUp'
    fyi = 'fyi'
    forward = 'forward'
    no_response_necessary = 'noResponseNecessary'
    read = 'read'
    reply = 'reply'
    reply_to_all = 'replyToAll'
    review = 'review'


class MobileAppIdentifier(BaseModel):
    field_odata_type: str


class MultiValueLegacyExtendedProperty(Entity):
    field_odata_type: str
    value: Annotated[
        List[str] | None, Field(description='A collection of property values.')
    ] = None


class NamedLocation(Entity):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents creation date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    display_name: Annotated[
        str | None, Field(description='Human-readable name of the location.')
    ] = None
    modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents last modified date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class NotebookLinks(BaseModel):
    field_odata_type: str
    one_note_client_url: Annotated[
        ExternalLink | Dict[str, Any] | None,
        Field(
            description="Opens the notebook in the OneNote native client if it's installed."
        ),
    ] = None
    one_note_web_url: Annotated[
        ExternalLink | Dict[str, Any] | None,
        Field(description='Opens the notebook in OneNote on the web.'),
    ] = None


class NumberColumn(BaseModel):
    field_odata_type: str
    decimal_places: Annotated[
        str | None,
        Field(
            description='How many decimal places to display. See below for information about the possible values.'
        ),
    ] = None
    display_as: Annotated[
        str | None,
        Field(
            description='How the value should be presented in the UX. Must be one of number or percentage. If unspecified, treated as number.'
        ),
    ] = None
    maximum: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The maximum permitted value.'),
    ] = None
    minimum: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The minimum permitted value.'),
    ] = None


class OAuth2PermissionGrant(Entity):
    field_odata_type: str
    client_id: Annotated[
        str | None,
        Field(
            description="The object id (not appId) of the client service principal for the application that's authorized to act on behalf of a signed-in user when accessing an API. Required. Supports $filter (eq only)."
        ),
    ] = None
    consent_type: Annotated[
        str | None,
        Field(
            description='Indicates if authorization is granted for the client application to impersonate all users or only a specific user. AllPrincipals indicates authorization to impersonate all users. Principal indicates authorization to impersonate a specific user. Consent on behalf of all users can be granted by an administrator. Nonadmin users might be authorized to consent on behalf of themselves in some cases, for some delegated permissions. Required. Supports $filter (eq only).'
        ),
    ] = None
    principal_id: Annotated[
        str | None,
        Field(
            description='The id of the user on behalf of whom the client is authorized to access the resource, when consentType is Principal. If consentType is AllPrincipals this value is null. Required when consentType is Principal. Supports $filter (eq only).'
        ),
    ] = None
    resource_id: Annotated[
        str | None,
        Field(
            description='The id of the resource service principal to which access is authorized. This identifies the API that the client is authorized to attempt to call on behalf of a signed-in user. Supports $filter (eq only).'
        ),
    ] = None
    scope: Annotated[
        str | None,
        Field(
            description='A space-separated list of the claim values for delegated permissions that should be included in access tokens for the resource application (the API). For example, openid User.Read GroupMember.Read.All. Each claim value should match the value field of one of the delegated permissions defined by the API, listed in the oauth2PermissionScopes property of the resource service principal. Must not exceed 3,850 characters in length.'
        ),
    ] = None


class ObjectIdentity(BaseModel):
    field_odata_type: str
    issuer: Annotated[
        str | None,
        Field(
            description="Specifies the issuer of the identity, for example facebook.com. 512 character limit. For local accounts (where signInType isn't federated), this property is the local default domain name for the tenant, for example contoso.com.  For guests from other Microsoft Entra organizations, this is the domain of the federated organization, for example contoso.com. For more information about filtering behavior for this property, see Filtering on the identities property of a user."
        ),
    ] = None
    issuer_assigned_id: Annotated[
        str | None,
        Field(
            description='Specifies the unique identifier assigned to the user by the issuer. 64 character limit. The combination of issuer and issuerAssignedId must be unique within the organization. Represents the sign-in name for the user, when signInType is set to emailAddress or userName (also known as local accounts).When signInType is set to: emailAddress (or a custom string that starts with emailAddress like emailAddress1), issuerAssignedId must be a valid email addressuserName, issuerAssignedId must begin with an alphabetical character or number, and can only contain alphanumeric characters and the following symbols: - or _  For more information about filtering behavior for this property, see Filtering on the identities property of a user.'
        ),
    ] = None
    sign_in_type: Annotated[
        str | None,
        Field(
            description='Specifies the user sign-in types in your directory, such as emailAddress, userName, federated, or userPrincipalName. federated represents a unique identifier for a user from an issuer that can be in any format chosen by the issuer. Setting or updating a userPrincipalName identity updates the value of the userPrincipalName property on the user object. The validations performed on the userPrincipalName property on the user object, for example, verified domains and acceptable characters, are performed when setting or updating a userPrincipalName identity. Extra validation is enforced on issuerAssignedId when the sign-in type is set to emailAddress or userName. This property can also be set to any custom string.  For more information about filtering behavior for this property, see Filtering on the identities property of a user.'
        ),
    ] = None


class OnPremisesExtensionAttributes(BaseModel):
    field_odata_type: str
    extension_attribute1: Annotated[
        str | None, Field(description='First customizable extension attribute.')
    ] = None
    extension_attribute10: Annotated[
        str | None, Field(description='Tenth customizable extension attribute.')
    ] = None
    extension_attribute11: Annotated[
        str | None, Field(description='Eleventh customizable extension attribute.')
    ] = None
    extension_attribute12: Annotated[
        str | None, Field(description='Twelfth customizable extension attribute.')
    ] = None
    extension_attribute13: Annotated[
        str | None, Field(description='Thirteenth customizable extension attribute.')
    ] = None
    extension_attribute14: Annotated[
        str | None, Field(description='Fourteenth customizable extension attribute.')
    ] = None
    extension_attribute15: Annotated[
        str | None, Field(description='Fifteenth customizable extension attribute.')
    ] = None
    extension_attribute2: Annotated[
        str | None, Field(description='Second customizable extension attribute.')
    ] = None
    extension_attribute3: Annotated[
        str | None, Field(description='Third customizable extension attribute.')
    ] = None
    extension_attribute4: Annotated[
        str | None, Field(description='Fourth customizable extension attribute.')
    ] = None
    extension_attribute5: Annotated[
        str | None, Field(description='Fifth customizable extension attribute.')
    ] = None
    extension_attribute6: Annotated[
        str | None, Field(description='Sixth customizable extension attribute.')
    ] = None
    extension_attribute7: Annotated[
        str | None, Field(description='Seventh customizable extension attribute.')
    ] = None
    extension_attribute8: Annotated[
        str | None, Field(description='Eighth customizable extension attribute.')
    ] = None
    extension_attribute9: Annotated[
        str | None, Field(description='Ninth customizable extension attribute.')
    ] = None


class OnPremisesProvisioningError(BaseModel):
    field_odata_type: str
    category: Annotated[
        str | None,
        Field(
            description='Category of the provisioning error. Note: Currently, there is only one possible value. Possible value: PropertyConflict - indicates a property value is not unique. Other objects contain the same value for the property.'
        ),
    ] = None
    occurred_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time at which the error occurred.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    property_causing_error: Annotated[
        str | None,
        Field(
            description='Name of the directory property causing the error. Current possible values: UserPrincipalName or ProxyAddress'
        ),
    ] = None
    value: Annotated[
        str | None, Field(description='Value of the property causing the error.')
    ] = None


class OnenoteEntityBaseModel(Entity):
    field_odata_type: str
    self: Annotated[
        str | None,
        Field(
            description='The endpoint where you can get details about the page. Read-only.'
        ),
    ] = None


class OnenoteEntitySchemaObjectModel(OnenoteEntityBaseModel):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class OnenoteOperationError(BaseModel):
    field_odata_type: str
    code: Annotated[str | None, Field(description='The error code.')] = None
    message: Annotated[str | None, Field(description='The error message.')] = None


class OnenoteResource(OnenoteEntityBaseModel):
    field_odata_type: str
    content: Annotated[str | None, Field(description='The content stream')] = None
    content_url: Annotated[
        str | None, Field(description='The URL for downloading the content')
    ] = None


class OnenoteUserRole(Enum):
    none = 'None'
    owner = 'Owner'
    contributor = 'Contributor'
    reader = 'Reader'


class OnlineMeetingPresenters(Enum):
    everyone = 'everyone'
    organization = 'organization'
    role_is_presenter = 'roleIsPresenter'
    organizer = 'organizer'
    unknown_future_value = 'unknownFutureValue'


class OnlineMeetingProviderType(Enum):
    unknown = 'unknown'
    skype_for_business = 'skypeForBusiness'
    skype_for_consumer = 'skypeForConsumer'
    teams_for_business = 'teamsForBusiness'


class OnlineMeetingRole(Enum):
    attendee = 'attendee'
    presenter = 'presenter'
    unknown_future_value = 'unknownFutureValue'
    producer = 'producer'
    coorganizer = 'coorganizer'


class OperationError(BaseModel):
    field_odata_type: str
    code: Annotated[str | None, Field(description='Operation error code.')] = None
    message: Annotated[str | None, Field(description='Operation error message.')] = None


class OperationStatus(Enum):
    not_started = 'NotStarted'
    running = 'Running'
    completed = 'Completed'
    failed = 'Failed'


class OutlookCategory(Entity):
    field_odata_type: str
    color: Annotated[
        CategoryColor | Dict[str, Any] | None,
        Field(
            description='A pre-set color constant that characterizes a category, and that is mapped to one of 25 predefined colors. For more details, see the following note.'
        ),
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description="A unique name that identifies a category in the user's mailbox. After a category is created, the name cannot be changed. Read-only."
        ),
    ] = None


class OutlookGeoCoordinates(BaseModel):
    field_odata_type: str
    accuracy: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude and longitude are accurate to within 50 meters.'
        ),
    ] = None
    altitude: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The altitude of the location.'),
    ] = None
    altitude_accuracy: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The accuracy of the altitude.'),
    ] = None
    latitude: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The latitude of the location.'),
    ] = None
    longitude: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The longitude of the location.'),
    ] = None


class OutlookItem(Entity):
    field_odata_type: str
    categories: Annotated[
        List[str] | None, Field(description='The categories associated with the item')
    ] = None
    change_key: Annotated[
        str | None,
        Field(
            description='Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class OutlookUser(Entity):
    field_odata_type: str
    master_categories: Annotated[
        List[OutlookCategory] | None,
        Field(description='A list of categories defined for the user.'),
    ] = None


class Package(BaseModel):
    field_odata_type: str
    type: Annotated[
        str | None,
        Field(
            description='A string indicating the type of package. While oneNote is the only currently defined value, you should expect other package types to be returned and handle them accordingly.'
        ),
    ] = None


class PageLayoutType(Enum):
    microsoft_reserved = 'microsoftReserved'
    article = 'article'
    home = 'home'
    unknown_future_value = 'unknownFutureValue'


class PageLinks(BaseModel):
    field_odata_type: str
    one_note_client_url: Annotated[
        ExternalLink | Dict[str, Any] | None,
        Field(
            description="Opens the page in the OneNote native client if it's installed."
        ),
    ] = None
    one_note_web_url: Annotated[
        ExternalLink | Dict[str, Any] | None,
        Field(description='Opens the page in OneNote on the web.'),
    ] = None


class PasswordProfile(BaseModel):
    field_odata_type: str
    force_change_password_next_sign_in: Annotated[
        bool | None,
        Field(
            description='true if the user must change their password on the next sign-in; otherwise false.'
        ),
    ] = None
    force_change_password_next_sign_in_with_mfa: Annotated[
        bool | None,
        Field(
            description='If true, at next sign-in, the user must perform a multifactor authentication (MFA) before being forced to change their password. The behavior is identical to forceChangePasswordNextSignIn except that the user is required to first perform a multifactor authentication before password change. After a password change, this property will be automatically reset to false. If not set, default is false.'
        ),
    ] = None
    password: Annotated[
        str | None,
        Field(
            description="The password for the user. This property is required when a user is created. It can be updated, but the user will be required to change the password on the next sign-in. The password must satisfy minimum requirements as specified by the user's passwordPolicies property. By default, a strong password is required."
        ),
    ] = None


class PendingContentUpdate(BaseModel):
    field_odata_type: str
    queued_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time the pending binary operation was queued in UTC time. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class PendingOperations(BaseModel):
    field_odata_type: str
    pending_content_update: Annotated[
        PendingContentUpdate | Dict[str, Any] | None,
        Field(
            description='A property that indicates that an operation that might update the binary content of a file is pending completion.'
        ),
    ] = None


class PersistentBrowserSessionMode(Enum):
    always = 'always'
    never = 'never'


class PersonOrGroupColumn(BaseModel):
    field_odata_type: str
    allow_multiple_selection: Annotated[
        bool | None,
        Field(
            description='Indicates whether multiple values can be selected from the source.'
        ),
    ] = None
    choose_from_type: Annotated[
        str | None,
        Field(
            description='Whether to allow selection of people only, or people and groups. Must be one of peopleAndGroups or peopleOnly.'
        ),
    ] = None
    display_as: Annotated[
        str | None,
        Field(
            description='How to display the information about the person or group chosen. See below.'
        ),
    ] = None


class PersonType(BaseModel):
    field_odata_type: str
    class_: Annotated[
        str | None, Field(description='The type of data source, such as Person.')
    ] = None
    subclass: Annotated[
        str | None,
        Field(
            description='The secondary type of data source, such as OrganizationUser.'
        ),
    ] = None


class PhoneType(Enum):
    home = 'home'
    business = 'business'
    mobile = 'mobile'
    other = 'other'
    assistant = 'assistant'
    home_fax = 'homeFax'
    business_fax = 'businessFax'
    other_fax = 'otherFax'
    pager = 'pager'
    radio = 'radio'


class Photo(BaseModel):
    field_odata_type: str
    camera_make: Annotated[
        str | None, Field(description='Camera manufacturer. Read-only.')
    ] = None
    camera_model: Annotated[
        str | None, Field(description='Camera model. Read-only.')
    ] = None
    exposure_denominator: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='The denominator for the exposure time fraction from the camera. Read-only.'
        ),
    ] = None
    exposure_numerator: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='The numerator for the exposure time fraction from the camera. Read-only.'
        ),
    ] = None
    f_number: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The F-stop value from the camera. Read-only.'),
    ] = None
    focal_length: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The focal length from the camera. Read-only.'),
    ] = None
    iso: Annotated[
        float | None,
        Field(
            description='The ISO value from the camera. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    orientation: Annotated[
        float | None,
        Field(
            description='The orientation value from the camera. Writable on OneDrive Personal.',
            ge=-32768.0,
            le=32767.0,
        ),
    ] = None
    taken_date_time: Annotated[
        datetime | None,
        Field(
            description='Represents the date and time the photo was taken. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class PhysicalAddress(BaseModel):
    field_odata_type: str
    city: Annotated[str | None, Field(description='The city.')] = None
    country_or_region: Annotated[
        str | None,
        Field(
            description="The country or region. It's a free-format string value, for example, 'United States'."
        ),
    ] = None
    postal_code: Annotated[str | None, Field(description='The postal code.')] = None
    state: Annotated[str | None, Field(description='The state.')] = None
    street: Annotated[str | None, Field(description='The street.')] = None


class PlannerAppliedCategories(BaseModel):
    field_odata_type: str


class PlannerAssignments(BaseModel):
    field_odata_type: str


class PlannerBucketTaskBoardTaskFormat(Entity):
    field_odata_type: str
    order_hint: Annotated[
        str | None,
        Field(
            description='Hint used to order tasks in the bucket view of the task board. For details about the supported format, see Using order hints in Planner.'
        ),
    ] = None


class PlannerCategoryDescriptions(BaseModel):
    field_odata_type: str
    category1: Annotated[
        str | None, Field(description='The label associated with Category 1')
    ] = None
    category10: Annotated[
        str | None, Field(description='The label associated with Category 10')
    ] = None
    category11: Annotated[
        str | None, Field(description='The label associated with Category 11')
    ] = None
    category12: Annotated[
        str | None, Field(description='The label associated with Category 12')
    ] = None
    category13: Annotated[
        str | None, Field(description='The label associated with Category 13')
    ] = None
    category14: Annotated[
        str | None, Field(description='The label associated with Category 14')
    ] = None
    category15: Annotated[
        str | None, Field(description='The label associated with Category 15')
    ] = None
    category16: Annotated[
        str | None, Field(description='The label associated with Category 16')
    ] = None
    category17: Annotated[
        str | None, Field(description='The label associated with Category 17')
    ] = None
    category18: Annotated[
        str | None, Field(description='The label associated with Category 18')
    ] = None
    category19: Annotated[
        str | None, Field(description='The label associated with Category 19')
    ] = None
    category2: Annotated[
        str | None, Field(description='The label associated with Category 2')
    ] = None
    category20: Annotated[
        str | None, Field(description='The label associated with Category 20')
    ] = None
    category21: Annotated[
        str | None, Field(description='The label associated with Category 21')
    ] = None
    category22: Annotated[
        str | None, Field(description='The label associated with Category 22')
    ] = None
    category23: Annotated[
        str | None, Field(description='The label associated with Category 23')
    ] = None
    category24: Annotated[
        str | None, Field(description='The label associated with Category 24')
    ] = None
    category25: Annotated[
        str | None, Field(description='The label associated with Category 25')
    ] = None
    category3: Annotated[
        str | None, Field(description='The label associated with Category 3')
    ] = None
    category4: Annotated[
        str | None, Field(description='The label associated with Category 4')
    ] = None
    category5: Annotated[
        str | None, Field(description='The label associated with Category 5')
    ] = None
    category6: Annotated[
        str | None, Field(description='The label associated with Category 6')
    ] = None
    category7: Annotated[
        str | None, Field(description='The label associated with Category 7')
    ] = None
    category8: Annotated[
        str | None, Field(description='The label associated with Category 8')
    ] = None
    category9: Annotated[
        str | None, Field(description='The label associated with Category 9')
    ] = None


class PlannerChecklistItems(BaseModel):
    field_odata_type: str


class PlannerContainerType(Enum):
    group = 'group'
    unknown_future_value = 'unknownFutureValue'
    roster = 'roster'


class PlannerExternalReferences(BaseModel):
    field_odata_type: str


class PlannerOrderHintsByAssignee(BaseModel):
    field_odata_type: str


class PlannerPlanContainer(BaseModel):
    field_odata_type: str
    container_id: Annotated[
        str | None,
        Field(
            description='The identifier of the resource that contains the plan. Optional.'
        ),
    ] = None
    type: Annotated[
        PlannerContainerType | Dict[str, Any] | None,
        Field(
            description='The type of the resource that contains the plan. For supported types, see the previous table. Possible values are: group, unknownFutureValue, roster. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: roster. Optional.'
        ),
    ] = None
    url: Annotated[
        str | None,
        Field(description='The full canonical URL of the container. Optional.'),
    ] = None


class PlannerPreviewType(Enum):
    automatic = 'automatic'
    no_preview = 'noPreview'
    checklist = 'checklist'
    description = 'description'
    reference = 'reference'


class PlannerProgressTaskBoardTaskFormat(Entity):
    field_odata_type: str
    order_hint: Annotated[
        str | None,
        Field(
            description='Hint value used to order the task on the progress view of the task board. For details about the supported format, see Using order hints in Planner.'
        ),
    ] = None


class PlannerTaskDetails(Entity):
    field_odata_type: str
    checklist: Annotated[
        PlannerChecklistItems | Dict[str, Any] | None,
        Field(description='The collection of checklist items on the task.'),
    ] = None
    description: Annotated[
        str | None, Field(description='Description of the task.')
    ] = None
    preview_type: Annotated[
        PlannerPreviewType | Dict[str, Any] | None,
        Field(
            description='This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference. When set to automatic the displayed preview is chosen by the app viewing the task.'
        ),
    ] = None
    references: Annotated[
        PlannerExternalReferences | Dict[str, Any] | None,
        Field(description='The collection of references on the task.'),
    ] = None


class PlannerUserIds(BaseModel):
    field_odata_type: str


class PolicyPlatformType(Enum):
    android = 'android'
    android_for_work = 'androidForWork'
    i_os = 'iOS'
    mac_os = 'macOS'
    windows_phone81 = 'windowsPhone81'
    windows81_and_later = 'windows81AndLater'
    windows10_and_later = 'windows10AndLater'
    all = 'all'


class PresenceStatusMessage(BaseModel):
    field_odata_type: str
    expiry_date_time: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(
            description="Time in which the status message expires.If not provided, the status message doesn't expire.expiryDateTime.dateTime shouldn't include time zone.expiryDateTime isn't available when you request the presence of another user."
        ),
    ] = None
    message: Annotated[
        ItemBody | Dict[str, Any] | None,
        Field(
            description="Status message item. The only supported format currently is message.contentType = 'text'."
        ),
    ] = None
    published_date_time: Annotated[
        datetime | None,
        Field(
            description="Time in which the status message was published.Read-only.publishedDateTime isn't available when you request the presence of another user.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class PrintColorMode(Enum):
    black_and_white = 'blackAndWhite'
    grayscale = 'grayscale'
    color = 'color'
    auto = 'auto'
    unknown_future_value = 'unknownFutureValue'


class PrintDocument(Entity):
    field_odata_type: str
    content_type: Annotated[
        str | None, Field(description="The document's content (MIME) type. Read-only.")
    ] = None
    display_name: Annotated[
        str | None, Field(description="The document's name. Read-only.")
    ] = None
    size: Annotated[
        float | None, Field(description="The document's size in bytes. Read-only.")
    ] = None


class PrintDuplexMode(Enum):
    flip_on_long_edge = 'flipOnLongEdge'
    flip_on_short_edge = 'flipOnShortEdge'
    one_sided = 'oneSided'
    unknown_future_value = 'unknownFutureValue'


class PrintEvent(Enum):
    job_started = 'jobStarted'
    unknown_future_value = 'unknownFutureValue'


class PrintFinishing(Enum):
    none = 'none'
    staple = 'staple'
    punch = 'punch'
    cover = 'cover'
    bind = 'bind'
    saddle_stitch = 'saddleStitch'
    stitch_edge = 'stitchEdge'
    staple_top_left = 'stapleTopLeft'
    staple_bottom_left = 'stapleBottomLeft'
    staple_top_right = 'stapleTopRight'
    staple_bottom_right = 'stapleBottomRight'
    stitch_left_edge = 'stitchLeftEdge'
    stitch_top_edge = 'stitchTopEdge'
    stitch_right_edge = 'stitchRightEdge'
    stitch_bottom_edge = 'stitchBottomEdge'
    staple_dual_left = 'stapleDualLeft'
    staple_dual_top = 'stapleDualTop'
    staple_dual_right = 'stapleDualRight'
    staple_dual_bottom = 'stapleDualBottom'
    unknown_future_value = 'unknownFutureValue'
    staple_triple_left = 'stapleTripleLeft'
    staple_triple_top = 'stapleTripleTop'
    staple_triple_right = 'stapleTripleRight'
    staple_triple_bottom = 'stapleTripleBottom'
    bind_left = 'bindLeft'
    bind_top = 'bindTop'
    bind_right = 'bindRight'
    bind_bottom = 'bindBottom'
    fold_accordion = 'foldAccordion'
    fold_double_gate = 'foldDoubleGate'
    fold_gate = 'foldGate'
    fold_half = 'foldHalf'
    fold_half_z = 'foldHalfZ'
    fold_left_gate = 'foldLeftGate'
    fold_letter = 'foldLetter'
    fold_parallel = 'foldParallel'
    fold_poster = 'foldPoster'
    fold_right_gate = 'foldRightGate'
    fold_z = 'foldZ'
    fold_engineering_z = 'foldEngineeringZ'
    punch_top_left = 'punchTopLeft'
    punch_bottom_left = 'punchBottomLeft'
    punch_top_right = 'punchTopRight'
    punch_bottom_right = 'punchBottomRight'
    punch_dual_left = 'punchDualLeft'
    punch_dual_top = 'punchDualTop'
    punch_dual_right = 'punchDualRight'
    punch_dual_bottom = 'punchDualBottom'
    punch_triple_left = 'punchTripleLeft'
    punch_triple_top = 'punchTripleTop'
    punch_triple_right = 'punchTripleRight'
    punch_triple_bottom = 'punchTripleBottom'
    punch_quad_left = 'punchQuadLeft'
    punch_quad_top = 'punchQuadTop'
    punch_quad_right = 'punchQuadRight'
    punch_quad_bottom = 'punchQuadBottom'
    fold = 'fold'
    trim = 'trim'
    bale = 'bale'
    booklet_maker = 'bookletMaker'
    coat = 'coat'
    laminate = 'laminate'
    trim_after_pages = 'trimAfterPages'
    trim_after_documents = 'trimAfterDocuments'
    trim_after_copies = 'trimAfterCopies'
    trim_after_job = 'trimAfterJob'


class PrintJobProcessingState(Enum):
    unknown = 'unknown'
    pending = 'pending'
    processing = 'processing'
    paused = 'paused'
    stopped = 'stopped'
    completed = 'completed'
    canceled = 'canceled'
    aborted = 'aborted'
    unknown_future_value = 'unknownFutureValue'


class PrintJobStateDetail(Enum):
    upload_pending = 'uploadPending'
    transforming = 'transforming'
    completed_successfully = 'completedSuccessfully'
    completed_with_warnings = 'completedWithWarnings'
    completed_with_errors = 'completedWithErrors'
    release_wait = 'releaseWait'
    interpreting = 'interpreting'
    unknown_future_value = 'unknownFutureValue'


class PrintJobStatus(BaseModel):
    field_odata_type: str
    description: Annotated[
        str | None,
        Field(
            description="A human-readable description of the print job's current processing state. Read-only."
        ),
    ] = None
    details: Annotated[
        List[PrintJobStateDetail] | None,
        Field(
            description='Additional details for print job state. Valid values are described in the following table. Read-only.'
        ),
    ] = None
    is_acquired_by_printer: Annotated[
        bool | None,
        Field(
            description='True if the job was acknowledged by a printer; false otherwise. Read-only.'
        ),
    ] = None
    state: PrintJobProcessingState | None = None


class PrintMargin(BaseModel):
    field_odata_type: str
    bottom: Annotated[
        float | None,
        Field(
            description='The margin in microns from the bottom edge.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    left: Annotated[
        float | None,
        Field(
            description='The margin in microns from the left edge.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    right: Annotated[
        float | None,
        Field(
            description='The margin in microns from the right edge.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    top: Annotated[
        float | None,
        Field(
            description='The margin in microns from the top edge.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class PrintMultipageLayout(Enum):
    clockwise_from_top_left = 'clockwiseFromTopLeft'
    counterclockwise_from_top_left = 'counterclockwiseFromTopLeft'
    counterclockwise_from_top_right = 'counterclockwiseFromTopRight'
    clockwise_from_top_right = 'clockwiseFromTopRight'
    counterclockwise_from_bottom_left = 'counterclockwiseFromBottomLeft'
    clockwise_from_bottom_left = 'clockwiseFromBottomLeft'
    counterclockwise_from_bottom_right = 'counterclockwiseFromBottomRight'
    clockwise_from_bottom_right = 'clockwiseFromBottomRight'
    unknown_future_value = 'unknownFutureValue'


class PrintOrientation(Enum):
    portrait = 'portrait'
    landscape = 'landscape'
    reverse_landscape = 'reverseLandscape'
    reverse_portrait = 'reversePortrait'
    unknown_future_value = 'unknownFutureValue'


class PrintQuality(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'
    unknown_future_value = 'unknownFutureValue'


class PrintScaling(Enum):
    auto = 'auto'
    shrink_to_fit = 'shrinkToFit'
    fill = 'fill'
    fit = 'fit'
    none = 'none'
    unknown_future_value = 'unknownFutureValue'


class PrintTaskProcessingState(Enum):
    pending = 'pending'
    processing = 'processing'
    completed = 'completed'
    aborted = 'aborted'
    unknown_future_value = 'unknownFutureValue'


class PrintTaskStatus(BaseModel):
    field_odata_type: str
    description: Annotated[
        str | None,
        Field(
            description='A human-readable description of the current processing state of the printTask.'
        ),
    ] = None
    state: PrintTaskProcessingState | None = None


class BottomMargin(RootModel[float | None]):
    root: Annotated[float | None, Field(ge=-2147483648.0, le=2147483647.0)] = None


class Dpi(RootModel[float | None]):
    root: Annotated[float | None, Field(ge=-2147483648.0, le=2147483647.0)] = None


class LeftMargin(RootModel[float | None]):
    root: Annotated[float | None, Field(ge=-2147483648.0, le=2147483647.0)] = None


class PagesPerSheetItem(RootModel[float | None]):
    root: Annotated[float | None, Field(ge=-2147483648.0, le=2147483647.0)] = None


class RightMargin(RootModel[float | None]):
    root: Annotated[float | None, Field(ge=-2147483648.0, le=2147483647.0)] = None


class TopMargin(RootModel[float | None]):
    root: Annotated[float | None, Field(ge=-2147483648.0, le=2147483647.0)] = None


class PrinterDefaults(BaseModel):
    field_odata_type: str
    color_mode: Annotated[
        PrintColorMode | Dict[str, Any] | None,
        Field(
            description='The default color mode to use when printing the document. Valid values are described in the following table.'
        ),
    ] = None
    content_type: Annotated[
        str | None,
        Field(
            description='The default content (MIME) type to use when processing documents.'
        ),
    ] = None
    copies_per_job: Annotated[
        float | None,
        Field(
            description='The default number of copies printed per job.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    dpi: Annotated[
        float | None,
        Field(
            description='The default resolution in DPI to use when printing the job.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    duplex_mode: Annotated[
        PrintDuplexMode | Dict[str, Any] | None,
        Field(
            description='The default duplex (double-sided) configuration to use when printing a document. Valid values are described in the following table.'
        ),
    ] = None
    finishings: Annotated[
        List[PrintFinishing | Dict[str, Any]] | None,
        Field(
            description='The default set of finishings to apply to print jobs. Valid values are described in the following table.'
        ),
    ] = None
    fit_pdf_to_page: Annotated[
        bool | None,
        Field(
            description='The default fitPdfToPage setting. True to fit each page of a PDF document to a physical sheet of media; false to let the printer decide how to lay out impressions.'
        ),
    ] = None
    input_bin: Annotated[
        str | None,
        Field(description='The default input bin that serves as the paper source.'),
    ] = None
    media_color: Annotated[
        str | None,
        Field(
            description='The default media (such as paper) color to print the document on.'
        ),
    ] = None
    media_size: Annotated[
        str | None,
        Field(
            description='The default media size to use. Supports standard size names for ISO and ANSI media sizes. Valid values are listed in the printerCapabilities topic.'
        ),
    ] = None
    media_type: Annotated[
        str | None,
        Field(
            description='The default media (such as paper) type to print the document on.'
        ),
    ] = None
    multipage_layout: Annotated[
        PrintMultipageLayout | Dict[str, Any] | None,
        Field(
            description='The default direction to lay out pages when multiple pages are being printed per sheet. Valid values are described in the following table.'
        ),
    ] = None
    orientation: Annotated[
        PrintOrientation | Dict[str, Any] | None,
        Field(
            description='The default orientation to use when printing the document. Valid values are described in the following table.'
        ),
    ] = None
    output_bin: Annotated[
        str | None,
        Field(
            description="The default output bin to place completed prints into. See the printer's capabilities for a list of supported output bins."
        ),
    ] = None
    pages_per_sheet: Annotated[
        float | None,
        Field(
            description='The default number of document pages to print on each sheet.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    quality: Annotated[
        PrintQuality | Dict[str, Any] | None,
        Field(
            description='The default quality to use when printing the document. Valid values are described in the following table.'
        ),
    ] = None
    scaling: Annotated[
        PrintScaling | Dict[str, Any] | None,
        Field(
            description='Specifies how the printer scales the document data to fit the requested media. Valid values are described in the following table.'
        ),
    ] = None


class PrinterFeedOrientation(Enum):
    long_edge_first = 'longEdgeFirst'
    short_edge_first = 'shortEdgeFirst'
    unknown_future_value = 'unknownFutureValue'


class PrinterLocation(BaseModel):
    field_odata_type: str
    altitude_in_meters: Annotated[
        float | None,
        Field(
            description='The altitude, in meters, that the printer is located at.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    building: Annotated[
        str | None, Field(description='The building that the printer is located in.')
    ] = None
    city: Annotated[
        str | None, Field(description='The city that the printer is located in.')
    ] = None
    country_or_region: Annotated[
        str | None,
        Field(description='The country or region that the printer is located in.'),
    ] = None
    floor: Annotated[
        str | None,
        Field(
            description='The floor that the printer is located on. Only numerical values are supported right now.'
        ),
    ] = None
    floor_description: Annotated[
        str | None,
        Field(
            description='The description of the floor that the printer is located on.'
        ),
    ] = None
    latitude: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The latitude that the printer is located at.'),
    ] = None
    longitude: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The longitude that the printer is located at.'),
    ] = None
    organization: Annotated[
        List[str] | None,
        Field(
            description='The organizational hierarchy that the printer belongs to. The elements should be in hierarchical order.'
        ),
    ] = None
    postal_code: Annotated[
        str | None, Field(description='The postal code that the printer is located in.')
    ] = None
    room_description: Annotated[
        str | None,
        Field(
            description='The description of the room that the printer is located in.'
        ),
    ] = None
    room_name: Annotated[
        str | None,
        Field(
            description='The room that the printer is located in. Only numerical values are supported right now.'
        ),
    ] = None
    site: Annotated[
        str | None, Field(description='The site that the printer is located in.')
    ] = None
    state_or_province: Annotated[
        str | None,
        Field(description='The state or province that the printer is located in.'),
    ] = None
    street_address: Annotated[
        str | None,
        Field(description='The street address where the printer is located.'),
    ] = None
    subdivision: Annotated[
        List[str] | None,
        Field(
            description='The subdivision that the printer is located in. The elements should be in hierarchical order.'
        ),
    ] = None
    subunit: List[str] | None = None


class PrinterProcessingState(Enum):
    unknown = 'unknown'
    idle = 'idle'
    processing = 'processing'
    stopped = 'stopped'
    unknown_future_value = 'unknownFutureValue'


class PrinterProcessingStateDetail(Enum):
    paused = 'paused'
    media_jam = 'mediaJam'
    media_needed = 'mediaNeeded'
    media_low = 'mediaLow'
    media_empty = 'mediaEmpty'
    cover_open = 'coverOpen'
    interlock_open = 'interlockOpen'
    output_tray_missing = 'outputTrayMissing'
    output_area_full = 'outputAreaFull'
    marker_supply_low = 'markerSupplyLow'
    marker_supply_empty = 'markerSupplyEmpty'
    input_tray_missing = 'inputTrayMissing'
    output_area_almost_full = 'outputAreaAlmostFull'
    marker_waste_almost_full = 'markerWasteAlmostFull'
    marker_waste_full = 'markerWasteFull'
    fuser_over_temp = 'fuserOverTemp'
    fuser_under_temp = 'fuserUnderTemp'
    other = 'other'
    none = 'none'
    moving_to_paused = 'movingToPaused'
    shutdown = 'shutdown'
    connecting_to_device = 'connectingToDevice'
    timed_out = 'timedOut'
    stopping = 'stopping'
    stopped_partially = 'stoppedPartially'
    toner_low = 'tonerLow'
    toner_empty = 'tonerEmpty'
    spool_area_full = 'spoolAreaFull'
    door_open = 'doorOpen'
    optical_photo_conductor_near_end_of_life = 'opticalPhotoConductorNearEndOfLife'
    optical_photo_conductor_life_over = 'opticalPhotoConductorLifeOver'
    developer_low = 'developerLow'
    developer_empty = 'developerEmpty'
    interpreter_resource_unavailable = 'interpreterResourceUnavailable'
    unknown_future_value = 'unknownFutureValue'
    alert_removal_of_binary_change_entry = 'alertRemovalOfBinaryChangeEntry'
    bander_added = 'banderAdded'
    bander_almost_empty = 'banderAlmostEmpty'
    bander_almost_full = 'banderAlmostFull'
    bander_at_limit = 'banderAtLimit'
    bander_closed = 'banderClosed'
    bander_configuration_change = 'banderConfigurationChange'
    bander_cover_closed = 'banderCoverClosed'
    bander_cover_open = 'banderCoverOpen'
    bander_empty = 'banderEmpty'
    bander_full = 'banderFull'
    bander_interlock_closed = 'banderInterlockClosed'
    bander_interlock_open = 'banderInterlockOpen'
    bander_jam = 'banderJam'
    bander_life_almost_over = 'banderLifeAlmostOver'
    bander_life_over = 'banderLifeOver'
    bander_memory_exhausted = 'banderMemoryExhausted'
    bander_missing = 'banderMissing'
    bander_motor_failure = 'banderMotorFailure'
    bander_near_limit = 'banderNearLimit'
    bander_offline = 'banderOffline'
    bander_opened = 'banderOpened'
    bander_over_temperature = 'banderOverTemperature'
    bander_power_saver = 'banderPowerSaver'
    bander_recoverable_failure = 'banderRecoverableFailure'
    bander_recoverable_storage = 'banderRecoverableStorage'
    bander_removed = 'banderRemoved'
    bander_resource_added = 'banderResourceAdded'
    bander_resource_removed = 'banderResourceRemoved'
    bander_thermistor_failure = 'banderThermistorFailure'
    bander_timing_failure = 'banderTimingFailure'
    bander_turned_off = 'banderTurnedOff'
    bander_turned_on = 'banderTurnedOn'
    bander_under_temperature = 'banderUnderTemperature'
    bander_unrecoverable_failure = 'banderUnrecoverableFailure'
    bander_unrecoverable_storage_error = 'banderUnrecoverableStorageError'
    bander_warming_up = 'banderWarmingUp'
    binder_added = 'binderAdded'
    binder_almost_empty = 'binderAlmostEmpty'
    binder_almost_full = 'binderAlmostFull'
    binder_at_limit = 'binderAtLimit'
    binder_closed = 'binderClosed'
    binder_configuration_change = 'binderConfigurationChange'
    binder_cover_closed = 'binderCoverClosed'
    binder_cover_open = 'binderCoverOpen'
    binder_empty = 'binderEmpty'
    binder_full = 'binderFull'
    binder_interlock_closed = 'binderInterlockClosed'
    binder_interlock_open = 'binderInterlockOpen'
    binder_jam = 'binderJam'
    binder_life_almost_over = 'binderLifeAlmostOver'
    binder_life_over = 'binderLifeOver'
    binder_memory_exhausted = 'binderMemoryExhausted'
    binder_missing = 'binderMissing'
    binder_motor_failure = 'binderMotorFailure'
    binder_near_limit = 'binderNearLimit'
    binder_offline = 'binderOffline'
    binder_opened = 'binderOpened'
    binder_over_temperature = 'binderOverTemperature'
    binder_power_saver = 'binderPowerSaver'
    binder_recoverable_failure = 'binderRecoverableFailure'
    binder_recoverable_storage = 'binderRecoverableStorage'
    binder_removed = 'binderRemoved'
    binder_resource_added = 'binderResourceAdded'
    binder_resource_removed = 'binderResourceRemoved'
    binder_thermistor_failure = 'binderThermistorFailure'
    binder_timing_failure = 'binderTimingFailure'
    binder_turned_off = 'binderTurnedOff'
    binder_turned_on = 'binderTurnedOn'
    binder_under_temperature = 'binderUnderTemperature'
    binder_unrecoverable_failure = 'binderUnrecoverableFailure'
    binder_unrecoverable_storage_error = 'binderUnrecoverableStorageError'
    binder_warming_up = 'binderWarmingUp'
    camera_failure = 'cameraFailure'
    chamber_cooling = 'chamberCooling'
    chamber_failure = 'chamberFailure'
    chamber_heating = 'chamberHeating'
    chamber_temperature_high = 'chamberTemperatureHigh'
    chamber_temperature_low = 'chamberTemperatureLow'
    cleaner_life_almost_over = 'cleanerLifeAlmostOver'
    cleaner_life_over = 'cleanerLifeOver'
    configuration_change = 'configurationChange'
    deactivated = 'deactivated'
    deleted = 'deleted'
    die_cutter_added = 'dieCutterAdded'
    die_cutter_almost_empty = 'dieCutterAlmostEmpty'
    die_cutter_almost_full = 'dieCutterAlmostFull'
    die_cutter_at_limit = 'dieCutterAtLimit'
    die_cutter_closed = 'dieCutterClosed'
    die_cutter_configuration_change = 'dieCutterConfigurationChange'
    die_cutter_cover_closed = 'dieCutterCoverClosed'
    die_cutter_cover_open = 'dieCutterCoverOpen'
    die_cutter_empty = 'dieCutterEmpty'
    die_cutter_full = 'dieCutterFull'
    die_cutter_interlock_closed = 'dieCutterInterlockClosed'
    die_cutter_interlock_open = 'dieCutterInterlockOpen'
    die_cutter_jam = 'dieCutterJam'
    die_cutter_life_almost_over = 'dieCutterLifeAlmostOver'
    die_cutter_life_over = 'dieCutterLifeOver'
    die_cutter_memory_exhausted = 'dieCutterMemoryExhausted'
    die_cutter_missing = 'dieCutterMissing'
    die_cutter_motor_failure = 'dieCutterMotorFailure'
    die_cutter_near_limit = 'dieCutterNearLimit'
    die_cutter_offline = 'dieCutterOffline'
    die_cutter_opened = 'dieCutterOpened'
    die_cutter_over_temperature = 'dieCutterOverTemperature'
    die_cutter_power_saver = 'dieCutterPowerSaver'
    die_cutter_recoverable_failure = 'dieCutterRecoverableFailure'
    die_cutter_recoverable_storage = 'dieCutterRecoverableStorage'
    die_cutter_removed = 'dieCutterRemoved'
    die_cutter_resource_added = 'dieCutterResourceAdded'
    die_cutter_resource_removed = 'dieCutterResourceRemoved'
    die_cutter_thermistor_failure = 'dieCutterThermistorFailure'
    die_cutter_timing_failure = 'dieCutterTimingFailure'
    die_cutter_turned_off = 'dieCutterTurnedOff'
    die_cutter_turned_on = 'dieCutterTurnedOn'
    die_cutter_under_temperature = 'dieCutterUnderTemperature'
    die_cutter_unrecoverable_failure = 'dieCutterUnrecoverableFailure'
    die_cutter_unrecoverable_storage_error = 'dieCutterUnrecoverableStorageError'
    die_cutter_warming_up = 'dieCutterWarmingUp'
    extruder_cooling = 'extruderCooling'
    extruder_failure = 'extruderFailure'
    extruder_heating = 'extruderHeating'
    extruder_jam = 'extruderJam'
    extruder_temperature_high = 'extruderTemperatureHigh'
    extruder_temperature_low = 'extruderTemperatureLow'
    fan_failure = 'fanFailure'
    fax_modem_life_almost_over = 'faxModemLifeAlmostOver'
    fax_modem_life_over = 'faxModemLifeOver'
    fax_modem_missing = 'faxModemMissing'
    fax_modem_turned_off = 'faxModemTurnedOff'
    fax_modem_turned_on = 'faxModemTurnedOn'
    folder_added = 'folderAdded'
    folder_almost_empty = 'folderAlmostEmpty'
    folder_almost_full = 'folderAlmostFull'
    folder_at_limit = 'folderAtLimit'
    folder_closed = 'folderClosed'
    folder_configuration_change = 'folderConfigurationChange'
    folder_cover_closed = 'folderCoverClosed'
    folder_cover_open = 'folderCoverOpen'
    folder_empty = 'folderEmpty'
    folder_full = 'folderFull'
    folder_interlock_closed = 'folderInterlockClosed'
    folder_interlock_open = 'folderInterlockOpen'
    folder_jam = 'folderJam'
    folder_life_almost_over = 'folderLifeAlmostOver'
    folder_life_over = 'folderLifeOver'
    folder_memory_exhausted = 'folderMemoryExhausted'
    folder_missing = 'folderMissing'
    folder_motor_failure = 'folderMotorFailure'
    folder_near_limit = 'folderNearLimit'
    folder_offline = 'folderOffline'
    folder_opened = 'folderOpened'
    folder_over_temperature = 'folderOverTemperature'
    folder_power_saver = 'folderPowerSaver'
    folder_recoverable_failure = 'folderRecoverableFailure'
    folder_recoverable_storage = 'folderRecoverableStorage'
    folder_removed = 'folderRemoved'
    folder_resource_added = 'folderResourceAdded'
    folder_resource_removed = 'folderResourceRemoved'
    folder_thermistor_failure = 'folderThermistorFailure'
    folder_timing_failure = 'folderTimingFailure'
    folder_turned_off = 'folderTurnedOff'
    folder_turned_on = 'folderTurnedOn'
    folder_under_temperature = 'folderUnderTemperature'
    folder_unrecoverable_failure = 'folderUnrecoverableFailure'
    folder_unrecoverable_storage_error = 'folderUnrecoverableStorageError'
    folder_warming_up = 'folderWarmingUp'
    hibernate = 'hibernate'
    hold_new_jobs = 'holdNewJobs'
    identify_printer_requested = 'identifyPrinterRequested'
    imprinter_added = 'imprinterAdded'
    imprinter_almost_empty = 'imprinterAlmostEmpty'
    imprinter_almost_full = 'imprinterAlmostFull'
    imprinter_at_limit = 'imprinterAtLimit'
    imprinter_closed = 'imprinterClosed'
    imprinter_configuration_change = 'imprinterConfigurationChange'
    imprinter_cover_closed = 'imprinterCoverClosed'
    imprinter_cover_open = 'imprinterCoverOpen'
    imprinter_empty = 'imprinterEmpty'
    imprinter_full = 'imprinterFull'
    imprinter_interlock_closed = 'imprinterInterlockClosed'
    imprinter_interlock_open = 'imprinterInterlockOpen'
    imprinter_jam = 'imprinterJam'
    imprinter_life_almost_over = 'imprinterLifeAlmostOver'
    imprinter_life_over = 'imprinterLifeOver'
    imprinter_memory_exhausted = 'imprinterMemoryExhausted'
    imprinter_missing = 'imprinterMissing'
    imprinter_motor_failure = 'imprinterMotorFailure'
    imprinter_near_limit = 'imprinterNearLimit'
    imprinter_offline = 'imprinterOffline'
    imprinter_opened = 'imprinterOpened'
    imprinter_over_temperature = 'imprinterOverTemperature'
    imprinter_power_saver = 'imprinterPowerSaver'
    imprinter_recoverable_failure = 'imprinterRecoverableFailure'
    imprinter_recoverable_storage = 'imprinterRecoverableStorage'
    imprinter_removed = 'imprinterRemoved'
    imprinter_resource_added = 'imprinterResourceAdded'
    imprinter_resource_removed = 'imprinterResourceRemoved'
    imprinter_thermistor_failure = 'imprinterThermistorFailure'
    imprinter_timing_failure = 'imprinterTimingFailure'
    imprinter_turned_off = 'imprinterTurnedOff'
    imprinter_turned_on = 'imprinterTurnedOn'
    imprinter_under_temperature = 'imprinterUnderTemperature'
    imprinter_unrecoverable_failure = 'imprinterUnrecoverableFailure'
    imprinter_unrecoverable_storage_error = 'imprinterUnrecoverableStorageError'
    imprinter_warming_up = 'imprinterWarmingUp'
    input_cannot_feed_size_selected = 'inputCannotFeedSizeSelected'
    input_manual_input_request = 'inputManualInputRequest'
    input_media_color_change = 'inputMediaColorChange'
    input_media_form_parts_change = 'inputMediaFormPartsChange'
    input_media_size_change = 'inputMediaSizeChange'
    input_media_tray_failure = 'inputMediaTrayFailure'
    input_media_tray_feed_error = 'inputMediaTrayFeedError'
    input_media_tray_jam = 'inputMediaTrayJam'
    input_media_type_change = 'inputMediaTypeChange'
    input_media_weight_change = 'inputMediaWeightChange'
    input_pick_roller_failure = 'inputPickRollerFailure'
    input_pick_roller_life_over = 'inputPickRollerLifeOver'
    input_pick_roller_life_warn = 'inputPickRollerLifeWarn'
    input_pick_roller_missing = 'inputPickRollerMissing'
    input_tray_elevation_failure = 'inputTrayElevationFailure'
    input_tray_position_failure = 'inputTrayPositionFailure'
    inserter_added = 'inserterAdded'
    inserter_almost_empty = 'inserterAlmostEmpty'
    inserter_almost_full = 'inserterAlmostFull'
    inserter_at_limit = 'inserterAtLimit'
    inserter_closed = 'inserterClosed'
    inserter_configuration_change = 'inserterConfigurationChange'
    inserter_cover_closed = 'inserterCoverClosed'
    inserter_cover_open = 'inserterCoverOpen'
    inserter_empty = 'inserterEmpty'
    inserter_full = 'inserterFull'
    inserter_interlock_closed = 'inserterInterlockClosed'
    inserter_interlock_open = 'inserterInterlockOpen'
    inserter_jam = 'inserterJam'
    inserter_life_almost_over = 'inserterLifeAlmostOver'
    inserter_life_over = 'inserterLifeOver'
    inserter_memory_exhausted = 'inserterMemoryExhausted'
    inserter_missing = 'inserterMissing'
    inserter_motor_failure = 'inserterMotorFailure'
    inserter_near_limit = 'inserterNearLimit'
    inserter_offline = 'inserterOffline'
    inserter_opened = 'inserterOpened'
    inserter_over_temperature = 'inserterOverTemperature'
    inserter_power_saver = 'inserterPowerSaver'
    inserter_recoverable_failure = 'inserterRecoverableFailure'
    inserter_recoverable_storage = 'inserterRecoverableStorage'
    inserter_removed = 'inserterRemoved'
    inserter_resource_added = 'inserterResourceAdded'
    inserter_resource_removed = 'inserterResourceRemoved'
    inserter_thermistor_failure = 'inserterThermistorFailure'
    inserter_timing_failure = 'inserterTimingFailure'
    inserter_turned_off = 'inserterTurnedOff'
    inserter_turned_on = 'inserterTurnedOn'
    inserter_under_temperature = 'inserterUnderTemperature'
    inserter_unrecoverable_failure = 'inserterUnrecoverableFailure'
    inserter_unrecoverable_storage_error = 'inserterUnrecoverableStorageError'
    inserter_warming_up = 'inserterWarmingUp'
    interlock_closed = 'interlockClosed'
    interpreter_cartridge_added = 'interpreterCartridgeAdded'
    interpreter_cartridge_deleted = 'interpreterCartridgeDeleted'
    interpreter_complex_page_encountered = 'interpreterComplexPageEncountered'
    interpreter_memory_decrease = 'interpreterMemoryDecrease'
    interpreter_memory_increase = 'interpreterMemoryIncrease'
    interpreter_resource_added = 'interpreterResourceAdded'
    interpreter_resource_deleted = 'interpreterResourceDeleted'
    lamp_at_eol = 'lampAtEol'
    lamp_failure = 'lampFailure'
    lamp_near_eol = 'lampNearEol'
    laser_at_eol = 'laserAtEol'
    laser_failure = 'laserFailure'
    laser_near_eol = 'laserNearEol'
    make_envelope_added = 'makeEnvelopeAdded'
    make_envelope_almost_empty = 'makeEnvelopeAlmostEmpty'
    make_envelope_almost_full = 'makeEnvelopeAlmostFull'
    make_envelope_at_limit = 'makeEnvelopeAtLimit'
    make_envelope_closed = 'makeEnvelopeClosed'
    make_envelope_configuration_change = 'makeEnvelopeConfigurationChange'
    make_envelope_cover_closed = 'makeEnvelopeCoverClosed'
    make_envelope_cover_open = 'makeEnvelopeCoverOpen'
    make_envelope_empty = 'makeEnvelopeEmpty'
    make_envelope_full = 'makeEnvelopeFull'
    make_envelope_interlock_closed = 'makeEnvelopeInterlockClosed'
    make_envelope_interlock_open = 'makeEnvelopeInterlockOpen'
    make_envelope_jam = 'makeEnvelopeJam'
    make_envelope_life_almost_over = 'makeEnvelopeLifeAlmostOver'
    make_envelope_life_over = 'makeEnvelopeLifeOver'
    make_envelope_memory_exhausted = 'makeEnvelopeMemoryExhausted'
    make_envelope_missing = 'makeEnvelopeMissing'
    make_envelope_motor_failure = 'makeEnvelopeMotorFailure'
    make_envelope_near_limit = 'makeEnvelopeNearLimit'
    make_envelope_offline = 'makeEnvelopeOffline'
    make_envelope_opened = 'makeEnvelopeOpened'
    make_envelope_over_temperature = 'makeEnvelopeOverTemperature'
    make_envelope_power_saver = 'makeEnvelopePowerSaver'
    make_envelope_recoverable_failure = 'makeEnvelopeRecoverableFailure'
    make_envelope_recoverable_storage = 'makeEnvelopeRecoverableStorage'
    make_envelope_removed = 'makeEnvelopeRemoved'
    make_envelope_resource_added = 'makeEnvelopeResourceAdded'
    make_envelope_resource_removed = 'makeEnvelopeResourceRemoved'
    make_envelope_thermistor_failure = 'makeEnvelopeThermistorFailure'
    make_envelope_timing_failure = 'makeEnvelopeTimingFailure'
    make_envelope_turned_off = 'makeEnvelopeTurnedOff'
    make_envelope_turned_on = 'makeEnvelopeTurnedOn'
    make_envelope_under_temperature = 'makeEnvelopeUnderTemperature'
    make_envelope_unrecoverable_failure = 'makeEnvelopeUnrecoverableFailure'
    make_envelope_unrecoverable_storage_error = 'makeEnvelopeUnrecoverableStorageError'
    make_envelope_warming_up = 'makeEnvelopeWarmingUp'
    marker_adjusting_print_quality = 'markerAdjustingPrintQuality'
    marker_cleaner_missing = 'markerCleanerMissing'
    marker_developer_almost_empty = 'markerDeveloperAlmostEmpty'
    marker_developer_empty = 'markerDeveloperEmpty'
    marker_developer_missing = 'markerDeveloperMissing'
    marker_fuser_missing = 'markerFuserMissing'
    marker_fuser_thermistor_failure = 'markerFuserThermistorFailure'
    marker_fuser_timing_failure = 'markerFuserTimingFailure'
    marker_ink_almost_empty = 'markerInkAlmostEmpty'
    marker_ink_empty = 'markerInkEmpty'
    marker_ink_missing = 'markerInkMissing'
    marker_opc_missing = 'markerOpcMissing'
    marker_print_ribbon_almost_empty = 'markerPrintRibbonAlmostEmpty'
    marker_print_ribbon_empty = 'markerPrintRibbonEmpty'
    marker_print_ribbon_missing = 'markerPrintRibbonMissing'
    marker_supply_almost_empty = 'markerSupplyAlmostEmpty'
    marker_supply_missing = 'markerSupplyMissing'
    marker_toner_cartridge_missing = 'markerTonerCartridgeMissing'
    marker_toner_missing = 'markerTonerMissing'
    marker_waste_ink_receptacle_almost_full = 'markerWasteInkReceptacleAlmostFull'
    marker_waste_ink_receptacle_full = 'markerWasteInkReceptacleFull'
    marker_waste_ink_receptacle_missing = 'markerWasteInkReceptacleMissing'
    marker_waste_missing = 'markerWasteMissing'
    marker_waste_toner_receptacle_almost_full = 'markerWasteTonerReceptacleAlmostFull'
    marker_waste_toner_receptacle_full = 'markerWasteTonerReceptacleFull'
    marker_waste_toner_receptacle_missing = 'markerWasteTonerReceptacleMissing'
    material_empty = 'materialEmpty'
    material_low = 'materialLow'
    material_needed = 'materialNeeded'
    media_drying = 'mediaDrying'
    media_path_cannot_duplex_media_selected = 'mediaPathCannotDuplexMediaSelected'
    media_path_failure = 'mediaPathFailure'
    media_path_input_empty = 'mediaPathInputEmpty'
    media_path_input_feed_error = 'mediaPathInputFeedError'
    media_path_input_jam = 'mediaPathInputJam'
    media_path_input_request = 'mediaPathInputRequest'
    media_path_jam = 'mediaPathJam'
    media_path_media_tray_almost_full = 'mediaPathMediaTrayAlmostFull'
    media_path_media_tray_full = 'mediaPathMediaTrayFull'
    media_path_media_tray_missing = 'mediaPathMediaTrayMissing'
    media_path_output_feed_error = 'mediaPathOutputFeedError'
    media_path_output_full = 'mediaPathOutputFull'
    media_path_output_jam = 'mediaPathOutputJam'
    media_path_pick_roller_failure = 'mediaPathPickRollerFailure'
    media_path_pick_roller_life_over = 'mediaPathPickRollerLifeOver'
    media_path_pick_roller_life_warn = 'mediaPathPickRollerLifeWarn'
    media_path_pick_roller_missing = 'mediaPathPickRollerMissing'
    motor_failure = 'motorFailure'
    output_mailbox_select_failure = 'outputMailboxSelectFailure'
    output_media_tray_failure = 'outputMediaTrayFailure'
    output_media_tray_feed_error = 'outputMediaTrayFeedError'
    output_media_tray_jam = 'outputMediaTrayJam'
    perforater_added = 'perforaterAdded'
    perforater_almost_empty = 'perforaterAlmostEmpty'
    perforater_almost_full = 'perforaterAlmostFull'
    perforater_at_limit = 'perforaterAtLimit'
    perforater_closed = 'perforaterClosed'
    perforater_configuration_change = 'perforaterConfigurationChange'
    perforater_cover_closed = 'perforaterCoverClosed'
    perforater_cover_open = 'perforaterCoverOpen'
    perforater_empty = 'perforaterEmpty'
    perforater_full = 'perforaterFull'
    perforater_interlock_closed = 'perforaterInterlockClosed'
    perforater_interlock_open = 'perforaterInterlockOpen'
    perforater_jam = 'perforaterJam'
    perforater_life_almost_over = 'perforaterLifeAlmostOver'
    perforater_life_over = 'perforaterLifeOver'
    perforater_memory_exhausted = 'perforaterMemoryExhausted'
    perforater_missing = 'perforaterMissing'
    perforater_motor_failure = 'perforaterMotorFailure'
    perforater_near_limit = 'perforaterNearLimit'
    perforater_offline = 'perforaterOffline'
    perforater_opened = 'perforaterOpened'
    perforater_over_temperature = 'perforaterOverTemperature'
    perforater_power_saver = 'perforaterPowerSaver'
    perforater_recoverable_failure = 'perforaterRecoverableFailure'
    perforater_recoverable_storage = 'perforaterRecoverableStorage'
    perforater_removed = 'perforaterRemoved'
    perforater_resource_added = 'perforaterResourceAdded'
    perforater_resource_removed = 'perforaterResourceRemoved'
    perforater_thermistor_failure = 'perforaterThermistorFailure'
    perforater_timing_failure = 'perforaterTimingFailure'
    perforater_turned_off = 'perforaterTurnedOff'
    perforater_turned_on = 'perforaterTurnedOn'
    perforater_under_temperature = 'perforaterUnderTemperature'
    perforater_unrecoverable_failure = 'perforaterUnrecoverableFailure'
    perforater_unrecoverable_storage_error = 'perforaterUnrecoverableStorageError'
    perforater_warming_up = 'perforaterWarmingUp'
    platform_cooling = 'platformCooling'
    platform_failure = 'platformFailure'
    platform_heating = 'platformHeating'
    platform_temperature_high = 'platformTemperatureHigh'
    platform_temperature_low = 'platformTemperatureLow'
    power_down = 'powerDown'
    power_up = 'powerUp'
    printer_manual_reset = 'printerManualReset'
    printer_nms_reset = 'printerNmsReset'
    printer_ready_to_print = 'printerReadyToPrint'
    puncher_added = 'puncherAdded'
    puncher_almost_empty = 'puncherAlmostEmpty'
    puncher_almost_full = 'puncherAlmostFull'
    puncher_at_limit = 'puncherAtLimit'
    puncher_closed = 'puncherClosed'
    puncher_configuration_change = 'puncherConfigurationChange'
    puncher_cover_closed = 'puncherCoverClosed'
    puncher_cover_open = 'puncherCoverOpen'
    puncher_empty = 'puncherEmpty'
    puncher_full = 'puncherFull'
    puncher_interlock_closed = 'puncherInterlockClosed'
    puncher_interlock_open = 'puncherInterlockOpen'
    puncher_jam = 'puncherJam'
    puncher_life_almost_over = 'puncherLifeAlmostOver'
    puncher_life_over = 'puncherLifeOver'
    puncher_memory_exhausted = 'puncherMemoryExhausted'
    puncher_missing = 'puncherMissing'
    puncher_motor_failure = 'puncherMotorFailure'
    puncher_near_limit = 'puncherNearLimit'
    puncher_offline = 'puncherOffline'
    puncher_opened = 'puncherOpened'
    puncher_over_temperature = 'puncherOverTemperature'
    puncher_power_saver = 'puncherPowerSaver'
    puncher_recoverable_failure = 'puncherRecoverableFailure'
    puncher_recoverable_storage = 'puncherRecoverableStorage'
    puncher_removed = 'puncherRemoved'
    puncher_resource_added = 'puncherResourceAdded'
    puncher_resource_removed = 'puncherResourceRemoved'
    puncher_thermistor_failure = 'puncherThermistorFailure'
    puncher_timing_failure = 'puncherTimingFailure'
    puncher_turned_off = 'puncherTurnedOff'
    puncher_turned_on = 'puncherTurnedOn'
    puncher_under_temperature = 'puncherUnderTemperature'
    puncher_unrecoverable_failure = 'puncherUnrecoverableFailure'
    puncher_unrecoverable_storage_error = 'puncherUnrecoverableStorageError'
    puncher_warming_up = 'puncherWarmingUp'
    resuming = 'resuming'
    scan_media_path_failure = 'scanMediaPathFailure'
    scan_media_path_input_empty = 'scanMediaPathInputEmpty'
    scan_media_path_input_feed_error = 'scanMediaPathInputFeedError'
    scan_media_path_input_jam = 'scanMediaPathInputJam'
    scan_media_path_input_request = 'scanMediaPathInputRequest'
    scan_media_path_jam = 'scanMediaPathJam'
    scan_media_path_output_feed_error = 'scanMediaPathOutputFeedError'
    scan_media_path_output_full = 'scanMediaPathOutputFull'
    scan_media_path_output_jam = 'scanMediaPathOutputJam'
    scan_media_path_pick_roller_failure = 'scanMediaPathPickRollerFailure'
    scan_media_path_pick_roller_life_over = 'scanMediaPathPickRollerLifeOver'
    scan_media_path_pick_roller_life_warn = 'scanMediaPathPickRollerLifeWarn'
    scan_media_path_pick_roller_missing = 'scanMediaPathPickRollerMissing'
    scan_media_path_tray_almost_full = 'scanMediaPathTrayAlmostFull'
    scan_media_path_tray_full = 'scanMediaPathTrayFull'
    scan_media_path_tray_missing = 'scanMediaPathTrayMissing'
    scanner_light_failure = 'scannerLightFailure'
    scanner_light_life_almost_over = 'scannerLightLifeAlmostOver'
    scanner_light_life_over = 'scannerLightLifeOver'
    scanner_light_missing = 'scannerLightMissing'
    scanner_sensor_failure = 'scannerSensorFailure'
    scanner_sensor_life_almost_over = 'scannerSensorLifeAlmostOver'
    scanner_sensor_life_over = 'scannerSensorLifeOver'
    scanner_sensor_missing = 'scannerSensorMissing'
    separation_cutter_added = 'separationCutterAdded'
    separation_cutter_almost_empty = 'separationCutterAlmostEmpty'
    separation_cutter_almost_full = 'separationCutterAlmostFull'
    separation_cutter_at_limit = 'separationCutterAtLimit'
    separation_cutter_closed = 'separationCutterClosed'
    separation_cutter_configuration_change = 'separationCutterConfigurationChange'
    separation_cutter_cover_closed = 'separationCutterCoverClosed'
    separation_cutter_cover_open = 'separationCutterCoverOpen'
    separation_cutter_empty = 'separationCutterEmpty'
    separation_cutter_full = 'separationCutterFull'
    separation_cutter_interlock_closed = 'separationCutterInterlockClosed'
    separation_cutter_interlock_open = 'separationCutterInterlockOpen'
    separation_cutter_jam = 'separationCutterJam'
    separation_cutter_life_almost_over = 'separationCutterLifeAlmostOver'
    separation_cutter_life_over = 'separationCutterLifeOver'
    separation_cutter_memory_exhausted = 'separationCutterMemoryExhausted'
    separation_cutter_missing = 'separationCutterMissing'
    separation_cutter_motor_failure = 'separationCutterMotorFailure'
    separation_cutter_near_limit = 'separationCutterNearLimit'
    separation_cutter_offline = 'separationCutterOffline'
    separation_cutter_opened = 'separationCutterOpened'
    separation_cutter_over_temperature = 'separationCutterOverTemperature'
    separation_cutter_power_saver = 'separationCutterPowerSaver'
    separation_cutter_recoverable_failure = 'separationCutterRecoverableFailure'
    separation_cutter_recoverable_storage = 'separationCutterRecoverableStorage'
    separation_cutter_removed = 'separationCutterRemoved'
    separation_cutter_resource_added = 'separationCutterResourceAdded'
    separation_cutter_resource_removed = 'separationCutterResourceRemoved'
    separation_cutter_thermistor_failure = 'separationCutterThermistorFailure'
    separation_cutter_timing_failure = 'separationCutterTimingFailure'
    separation_cutter_turned_off = 'separationCutterTurnedOff'
    separation_cutter_turned_on = 'separationCutterTurnedOn'
    separation_cutter_under_temperature = 'separationCutterUnderTemperature'
    separation_cutter_unrecoverable_failure = 'separationCutterUnrecoverableFailure'
    separation_cutter_unrecoverable_storage_error = (
        'separationCutterUnrecoverableStorageError'
    )
    separation_cutter_warming_up = 'separationCutterWarmingUp'
    sheet_rotator_added = 'sheetRotatorAdded'
    sheet_rotator_almost_empty = 'sheetRotatorAlmostEmpty'
    sheet_rotator_almost_full = 'sheetRotatorAlmostFull'
    sheet_rotator_at_limit = 'sheetRotatorAtLimit'
    sheet_rotator_closed = 'sheetRotatorClosed'
    sheet_rotator_configuration_change = 'sheetRotatorConfigurationChange'
    sheet_rotator_cover_closed = 'sheetRotatorCoverClosed'
    sheet_rotator_cover_open = 'sheetRotatorCoverOpen'
    sheet_rotator_empty = 'sheetRotatorEmpty'
    sheet_rotator_full = 'sheetRotatorFull'
    sheet_rotator_interlock_closed = 'sheetRotatorInterlockClosed'
    sheet_rotator_interlock_open = 'sheetRotatorInterlockOpen'
    sheet_rotator_jam = 'sheetRotatorJam'
    sheet_rotator_life_almost_over = 'sheetRotatorLifeAlmostOver'
    sheet_rotator_life_over = 'sheetRotatorLifeOver'
    sheet_rotator_memory_exhausted = 'sheetRotatorMemoryExhausted'
    sheet_rotator_missing = 'sheetRotatorMissing'
    sheet_rotator_motor_failure = 'sheetRotatorMotorFailure'
    sheet_rotator_near_limit = 'sheetRotatorNearLimit'
    sheet_rotator_offline = 'sheetRotatorOffline'
    sheet_rotator_opened = 'sheetRotatorOpened'
    sheet_rotator_over_temperature = 'sheetRotatorOverTemperature'
    sheet_rotator_power_saver = 'sheetRotatorPowerSaver'
    sheet_rotator_recoverable_failure = 'sheetRotatorRecoverableFailure'
    sheet_rotator_recoverable_storage = 'sheetRotatorRecoverableStorage'
    sheet_rotator_removed = 'sheetRotatorRemoved'
    sheet_rotator_resource_added = 'sheetRotatorResourceAdded'
    sheet_rotator_resource_removed = 'sheetRotatorResourceRemoved'
    sheet_rotator_thermistor_failure = 'sheetRotatorThermistorFailure'
    sheet_rotator_timing_failure = 'sheetRotatorTimingFailure'
    sheet_rotator_turned_off = 'sheetRotatorTurnedOff'
    sheet_rotator_turned_on = 'sheetRotatorTurnedOn'
    sheet_rotator_under_temperature = 'sheetRotatorUnderTemperature'
    sheet_rotator_unrecoverable_failure = 'sheetRotatorUnrecoverableFailure'
    sheet_rotator_unrecoverable_storage_error = 'sheetRotatorUnrecoverableStorageError'
    sheet_rotator_warming_up = 'sheetRotatorWarmingUp'
    slitter_added = 'slitterAdded'
    slitter_almost_empty = 'slitterAlmostEmpty'
    slitter_almost_full = 'slitterAlmostFull'
    slitter_at_limit = 'slitterAtLimit'
    slitter_closed = 'slitterClosed'
    slitter_configuration_change = 'slitterConfigurationChange'
    slitter_cover_closed = 'slitterCoverClosed'
    slitter_cover_open = 'slitterCoverOpen'
    slitter_empty = 'slitterEmpty'
    slitter_full = 'slitterFull'
    slitter_interlock_closed = 'slitterInterlockClosed'
    slitter_interlock_open = 'slitterInterlockOpen'
    slitter_jam = 'slitterJam'
    slitter_life_almost_over = 'slitterLifeAlmostOver'
    slitter_life_over = 'slitterLifeOver'
    slitter_memory_exhausted = 'slitterMemoryExhausted'
    slitter_missing = 'slitterMissing'
    slitter_motor_failure = 'slitterMotorFailure'
    slitter_near_limit = 'slitterNearLimit'
    slitter_offline = 'slitterOffline'
    slitter_opened = 'slitterOpened'
    slitter_over_temperature = 'slitterOverTemperature'
    slitter_power_saver = 'slitterPowerSaver'
    slitter_recoverable_failure = 'slitterRecoverableFailure'
    slitter_recoverable_storage = 'slitterRecoverableStorage'
    slitter_removed = 'slitterRemoved'
    slitter_resource_added = 'slitterResourceAdded'
    slitter_resource_removed = 'slitterResourceRemoved'
    slitter_thermistor_failure = 'slitterThermistorFailure'
    slitter_timing_failure = 'slitterTimingFailure'
    slitter_turned_off = 'slitterTurnedOff'
    slitter_turned_on = 'slitterTurnedOn'
    slitter_under_temperature = 'slitterUnderTemperature'
    slitter_unrecoverable_failure = 'slitterUnrecoverableFailure'
    slitter_unrecoverable_storage_error = 'slitterUnrecoverableStorageError'
    slitter_warming_up = 'slitterWarmingUp'
    stacker_added = 'stackerAdded'
    stacker_almost_empty = 'stackerAlmostEmpty'
    stacker_almost_full = 'stackerAlmostFull'
    stacker_at_limit = 'stackerAtLimit'
    stacker_closed = 'stackerClosed'
    stacker_configuration_change = 'stackerConfigurationChange'
    stacker_cover_closed = 'stackerCoverClosed'
    stacker_cover_open = 'stackerCoverOpen'
    stacker_empty = 'stackerEmpty'
    stacker_full = 'stackerFull'
    stacker_interlock_closed = 'stackerInterlockClosed'
    stacker_interlock_open = 'stackerInterlockOpen'
    stacker_jam = 'stackerJam'
    stacker_life_almost_over = 'stackerLifeAlmostOver'
    stacker_life_over = 'stackerLifeOver'
    stacker_memory_exhausted = 'stackerMemoryExhausted'
    stacker_missing = 'stackerMissing'
    stacker_motor_failure = 'stackerMotorFailure'
    stacker_near_limit = 'stackerNearLimit'
    stacker_offline = 'stackerOffline'
    stacker_opened = 'stackerOpened'
    stacker_over_temperature = 'stackerOverTemperature'
    stacker_power_saver = 'stackerPowerSaver'
    stacker_recoverable_failure = 'stackerRecoverableFailure'
    stacker_recoverable_storage = 'stackerRecoverableStorage'
    stacker_removed = 'stackerRemoved'
    stacker_resource_added = 'stackerResourceAdded'
    stacker_resource_removed = 'stackerResourceRemoved'
    stacker_thermistor_failure = 'stackerThermistorFailure'
    stacker_timing_failure = 'stackerTimingFailure'
    stacker_turned_off = 'stackerTurnedOff'
    stacker_turned_on = 'stackerTurnedOn'
    stacker_under_temperature = 'stackerUnderTemperature'
    stacker_unrecoverable_failure = 'stackerUnrecoverableFailure'
    stacker_unrecoverable_storage_error = 'stackerUnrecoverableStorageError'
    stacker_warming_up = 'stackerWarmingUp'
    standby = 'standby'
    stapler_added = 'staplerAdded'
    stapler_almost_empty = 'staplerAlmostEmpty'
    stapler_almost_full = 'staplerAlmostFull'
    stapler_at_limit = 'staplerAtLimit'
    stapler_closed = 'staplerClosed'
    stapler_configuration_change = 'staplerConfigurationChange'
    stapler_cover_closed = 'staplerCoverClosed'
    stapler_cover_open = 'staplerCoverOpen'
    stapler_empty = 'staplerEmpty'
    stapler_full = 'staplerFull'
    stapler_interlock_closed = 'staplerInterlockClosed'
    stapler_interlock_open = 'staplerInterlockOpen'
    stapler_jam = 'staplerJam'
    stapler_life_almost_over = 'staplerLifeAlmostOver'
    stapler_life_over = 'staplerLifeOver'
    stapler_memory_exhausted = 'staplerMemoryExhausted'
    stapler_missing = 'staplerMissing'
    stapler_motor_failure = 'staplerMotorFailure'
    stapler_near_limit = 'staplerNearLimit'
    stapler_offline = 'staplerOffline'
    stapler_opened = 'staplerOpened'
    stapler_over_temperature = 'staplerOverTemperature'
    stapler_power_saver = 'staplerPowerSaver'
    stapler_recoverable_failure = 'staplerRecoverableFailure'
    stapler_recoverable_storage = 'staplerRecoverableStorage'
    stapler_removed = 'staplerRemoved'
    stapler_resource_added = 'staplerResourceAdded'
    stapler_resource_removed = 'staplerResourceRemoved'
    stapler_thermistor_failure = 'staplerThermistorFailure'
    stapler_timing_failure = 'staplerTimingFailure'
    stapler_turned_off = 'staplerTurnedOff'
    stapler_turned_on = 'staplerTurnedOn'
    stapler_under_temperature = 'staplerUnderTemperature'
    stapler_unrecoverable_failure = 'staplerUnrecoverableFailure'
    stapler_unrecoverable_storage_error = 'staplerUnrecoverableStorageError'
    stapler_warming_up = 'staplerWarmingUp'
    stitcher_added = 'stitcherAdded'
    stitcher_almost_empty = 'stitcherAlmostEmpty'
    stitcher_almost_full = 'stitcherAlmostFull'
    stitcher_at_limit = 'stitcherAtLimit'
    stitcher_closed = 'stitcherClosed'
    stitcher_configuration_change = 'stitcherConfigurationChange'
    stitcher_cover_closed = 'stitcherCoverClosed'
    stitcher_cover_open = 'stitcherCoverOpen'
    stitcher_empty = 'stitcherEmpty'
    stitcher_full = 'stitcherFull'
    stitcher_interlock_closed = 'stitcherInterlockClosed'
    stitcher_interlock_open = 'stitcherInterlockOpen'
    stitcher_jam = 'stitcherJam'
    stitcher_life_almost_over = 'stitcherLifeAlmostOver'
    stitcher_life_over = 'stitcherLifeOver'
    stitcher_memory_exhausted = 'stitcherMemoryExhausted'
    stitcher_missing = 'stitcherMissing'
    stitcher_motor_failure = 'stitcherMotorFailure'
    stitcher_near_limit = 'stitcherNearLimit'
    stitcher_offline = 'stitcherOffline'
    stitcher_opened = 'stitcherOpened'
    stitcher_over_temperature = 'stitcherOverTemperature'
    stitcher_power_saver = 'stitcherPowerSaver'
    stitcher_recoverable_failure = 'stitcherRecoverableFailure'
    stitcher_recoverable_storage = 'stitcherRecoverableStorage'
    stitcher_removed = 'stitcherRemoved'
    stitcher_resource_added = 'stitcherResourceAdded'
    stitcher_resource_removed = 'stitcherResourceRemoved'
    stitcher_thermistor_failure = 'stitcherThermistorFailure'
    stitcher_timing_failure = 'stitcherTimingFailure'
    stitcher_turned_off = 'stitcherTurnedOff'
    stitcher_turned_on = 'stitcherTurnedOn'
    stitcher_under_temperature = 'stitcherUnderTemperature'
    stitcher_unrecoverable_failure = 'stitcherUnrecoverableFailure'
    stitcher_unrecoverable_storage_error = 'stitcherUnrecoverableStorageError'
    stitcher_warming_up = 'stitcherWarmingUp'
    subunit_added = 'subunitAdded'
    subunit_almost_empty = 'subunitAlmostEmpty'
    subunit_almost_full = 'subunitAlmostFull'
    subunit_at_limit = 'subunitAtLimit'
    subunit_closed = 'subunitClosed'
    subunit_cooling_down = 'subunitCoolingDown'
    subunit_empty = 'subunitEmpty'
    subunit_full = 'subunitFull'
    subunit_life_almost_over = 'subunitLifeAlmostOver'
    subunit_life_over = 'subunitLifeOver'
    subunit_memory_exhausted = 'subunitMemoryExhausted'
    subunit_missing = 'subunitMissing'
    subunit_motor_failure = 'subunitMotorFailure'
    subunit_near_limit = 'subunitNearLimit'
    subunit_offline = 'subunitOffline'
    subunit_opened = 'subunitOpened'
    subunit_over_temperature = 'subunitOverTemperature'
    subunit_power_saver = 'subunitPowerSaver'
    subunit_recoverable_failure = 'subunitRecoverableFailure'
    subunit_recoverable_storage = 'subunitRecoverableStorage'
    subunit_removed = 'subunitRemoved'
    subunit_resource_added = 'subunitResourceAdded'
    subunit_resource_removed = 'subunitResourceRemoved'
    subunit_thermistor_failure = 'subunitThermistorFailure'
    subunit_timing_failure = 'subunitTimingFailure'
    subunit_turned_off = 'subunitTurnedOff'
    subunit_turned_on = 'subunitTurnedOn'
    subunit_under_temperature = 'subunitUnderTemperature'
    subunit_unrecoverable_failure = 'subunitUnrecoverableFailure'
    subunit_unrecoverable_storage = 'subunitUnrecoverableStorage'
    subunit_warming_up = 'subunitWarmingUp'
    suspend = 'suspend'
    testing = 'testing'
    trimmer_added = 'trimmerAdded'
    trimmer_almost_empty = 'trimmerAlmostEmpty'
    trimmer_almost_full = 'trimmerAlmostFull'
    trimmer_at_limit = 'trimmerAtLimit'
    trimmer_closed = 'trimmerClosed'
    trimmer_configuration_change = 'trimmerConfigurationChange'
    trimmer_cover_closed = 'trimmerCoverClosed'
    trimmer_cover_open = 'trimmerCoverOpen'
    trimmer_empty = 'trimmerEmpty'
    trimmer_full = 'trimmerFull'
    trimmer_interlock_closed = 'trimmerInterlockClosed'
    trimmer_interlock_open = 'trimmerInterlockOpen'
    trimmer_jam = 'trimmerJam'
    trimmer_life_almost_over = 'trimmerLifeAlmostOver'
    trimmer_life_over = 'trimmerLifeOver'
    trimmer_memory_exhausted = 'trimmerMemoryExhausted'
    trimmer_missing = 'trimmerMissing'
    trimmer_motor_failure = 'trimmerMotorFailure'
    trimmer_near_limit = 'trimmerNearLimit'
    trimmer_offline = 'trimmerOffline'
    trimmer_opened = 'trimmerOpened'
    trimmer_over_temperature = 'trimmerOverTemperature'
    trimmer_power_saver = 'trimmerPowerSaver'
    trimmer_recoverable_failure = 'trimmerRecoverableFailure'
    trimmer_recoverable_storage = 'trimmerRecoverableStorage'
    trimmer_removed = 'trimmerRemoved'
    trimmer_resource_added = 'trimmerResourceAdded'
    trimmer_resource_removed = 'trimmerResourceRemoved'
    trimmer_thermistor_failure = 'trimmerThermistorFailure'
    trimmer_timing_failure = 'trimmerTimingFailure'
    trimmer_turned_off = 'trimmerTurnedOff'
    trimmer_turned_on = 'trimmerTurnedOn'
    trimmer_under_temperature = 'trimmerUnderTemperature'
    trimmer_unrecoverable_failure = 'trimmerUnrecoverableFailure'
    trimmer_unrecoverable_storage_error = 'trimmerUnrecoverableStorageError'
    trimmer_warming_up = 'trimmerWarmingUp'
    unknown = 'unknown'
    wrapper_added = 'wrapperAdded'
    wrapper_almost_empty = 'wrapperAlmostEmpty'
    wrapper_almost_full = 'wrapperAlmostFull'
    wrapper_at_limit = 'wrapperAtLimit'
    wrapper_closed = 'wrapperClosed'
    wrapper_configuration_change = 'wrapperConfigurationChange'
    wrapper_cover_closed = 'wrapperCoverClosed'
    wrapper_cover_open = 'wrapperCoverOpen'
    wrapper_empty = 'wrapperEmpty'
    wrapper_full = 'wrapperFull'
    wrapper_interlock_closed = 'wrapperInterlockClosed'
    wrapper_interlock_open = 'wrapperInterlockOpen'
    wrapper_jam = 'wrapperJam'
    wrapper_life_almost_over = 'wrapperLifeAlmostOver'
    wrapper_life_over = 'wrapperLifeOver'
    wrapper_memory_exhausted = 'wrapperMemoryExhausted'
    wrapper_missing = 'wrapperMissing'
    wrapper_motor_failure = 'wrapperMotorFailure'
    wrapper_near_limit = 'wrapperNearLimit'
    wrapper_offline = 'wrapperOffline'
    wrapper_opened = 'wrapperOpened'
    wrapper_over_temperature = 'wrapperOverTemperature'
    wrapper_power_saver = 'wrapperPowerSaver'
    wrapper_recoverable_failure = 'wrapperRecoverableFailure'
    wrapper_recoverable_storage = 'wrapperRecoverableStorage'
    wrapper_removed = 'wrapperRemoved'
    wrapper_resource_added = 'wrapperResourceAdded'
    wrapper_resource_removed = 'wrapperResourceRemoved'
    wrapper_thermistor_failure = 'wrapperThermistorFailure'
    wrapper_timing_failure = 'wrapperTimingFailure'
    wrapper_turned_off = 'wrapperTurnedOff'
    wrapper_turned_on = 'wrapperTurnedOn'
    wrapper_under_temperature = 'wrapperUnderTemperature'
    wrapper_unrecoverable_failure = 'wrapperUnrecoverableFailure'
    wrapper_unrecoverable_storage_error = 'wrapperUnrecoverableStorageError'
    wrapper_warming_up = 'wrapperWarmingUp'


class PrinterShareViewpoint(BaseModel):
    field_odata_type: str
    last_used_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time when the printer was last used by the signed-in user. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class PrinterStatus(BaseModel):
    field_odata_type: str
    description: Annotated[
        str | None,
        Field(
            description="A human-readable description of the printer's current processing state. Read-only."
        ),
    ] = None
    details: Annotated[
        List[PrinterProcessingStateDetail] | None,
        Field(
            description='The list of details describing why the printer is in the current state. Valid values are described in the following table. Read-only.'
        ),
    ] = None
    state: PrinterProcessingState | None = None


class ProfilePhoto(Entity):
    field_odata_type: str
    height: Annotated[
        float | None,
        Field(
            description='The height of the photo. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    width: Annotated[
        float | None,
        Field(
            description='The width of the photo. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class ProvisionedPlan(BaseModel):
    field_odata_type: str
    capability_status: Annotated[
        str | None,
        Field(
            description='Condition of the capability assignment. The possible values are Enabled, Warning, Suspended, Deleted, LockedOut. See a detailed description of each value.'
        ),
    ] = None
    provisioning_status: Annotated[
        str | None,
        Field(
            description="The possible values are:Success - Service is fully provisioned.Disabled - Service is disabled.Error - The service plan isn't provisioned and is in an error state.PendingInput - The service isn't provisioned and is awaiting service confirmation.PendingActivation - The service is provisioned but requires explicit activation by an administrator (for example, Intune_O365 service plan)PendingProvisioning - Microsoft has added a new service to the product SKU and it isn't activated in the tenant."
        ),
    ] = None
    service: Annotated[
        str | None,
        Field(description="The name of the service; for example, 'AccessControlS2S'."),
    ] = None


class PublicErrorDetail(BaseModel):
    field_odata_type: str
    code: Annotated[str | None, Field(description='The error code.')] = None
    message: Annotated[str | None, Field(description='The error message.')] = None
    target: Annotated[str | None, Field(description='The target of the error.')] = None


class PublicInnerError(BaseModel):
    field_odata_type: str
    code: Annotated[str | None, Field(description='The error code.')] = None
    details: Annotated[
        List[PublicErrorDetail] | None,
        Field(description='A collection of error details.'),
    ] = None
    message: Annotated[str | None, Field(description='The error message.')] = None
    target: Annotated[str | None, Field(description='The target of the error.')] = None


class PublicationFacet(BaseModel):
    field_odata_type: str
    checked_out_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='The user who checked out the file.'),
    ] = None
    level: Annotated[
        str | None,
        Field(
            description='The state of publication for this document. Either published or checkout. Read-only.'
        ),
    ] = None
    version_id: Annotated[
        str | None,
        Field(
            description='The unique identifier for the version that is visible to the current caller. Read-only.'
        ),
    ] = None


class Recipient(BaseModel):
    field_odata_type: str
    email_address: Annotated[
        EmailAddress | Dict[str, Any] | None,
        Field(description="The recipient's email address."),
    ] = None


class RecurrencePatternType(Enum):
    daily = 'daily'
    weekly = 'weekly'
    absolute_monthly = 'absoluteMonthly'
    relative_monthly = 'relativeMonthly'
    absolute_yearly = 'absoluteYearly'
    relative_yearly = 'relativeYearly'


class RecurrenceRangeType(Enum):
    end_date = 'endDate'
    no_end = 'noEnd'
    numbered = 'numbered'


class ResourceReference(BaseModel):
    field_odata_type: str
    id: Annotated[str | None, Field(description="The item's unique identifier.")] = None
    type: Annotated[
        str | None,
        Field(
            description="A string value that can be used to classify the item, such as 'microsoft.graph.driveItem'"
        ),
    ] = None
    web_url: Annotated[
        str | None, Field(description='A URL leading to the referenced item.')
    ] = None


class ResourceVisualization(BaseModel):
    field_odata_type: str
    container_display_name: Annotated[
        str | None,
        Field(
            description='A string describing where the item is stored. For example, the name of a SharePoint site or the user name identifying the owner of the OneDrive storing the item.'
        ),
    ] = None
    container_type: Annotated[
        str | None,
        Field(
            description='Can be used for filtering by the type of container in which the file is stored. Such as Site or OneDriveBusiness.'
        ),
    ] = None
    container_web_url: Annotated[
        str | None,
        Field(description='A path leading to the folder in which the item is stored.'),
    ] = None
    media_type: Annotated[
        str | None,
        Field(
            description="The item's media type. Can be used for filtering for a specific type of file based on supported IANA Media Mime Types. Not all Media Mime Types are supported."
        ),
    ] = None
    preview_image_url: Annotated[
        str | None,
        Field(description='A URL leading to the preview image for the item.'),
    ] = None
    preview_text: Annotated[
        str | None, Field(description='A preview text for the item.')
    ] = None
    title: Annotated[str | None, Field(description="The item's title text.")] = None
    type: Annotated[
        str | None,
        Field(
            description="The item's media type. Can be used for filtering for a specific file based on a specific type. See the section Type property values for supported types."
        ),
    ] = None


class ResponseType(Enum):
    none = 'none'
    organizer = 'organizer'
    tentatively_accepted = 'tentativelyAccepted'
    accepted = 'accepted'
    declined = 'declined'
    not_responded = 'notResponded'


class RiskLevel(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'
    hidden = 'hidden'
    none = 'none'
    unknown_future_value = 'unknownFutureValue'


class Root(BaseModel):
    field_odata_type: str


class ScheduleChangeRequestActor(Enum):
    sender = 'sender'
    recipient = 'recipient'
    manager = 'manager'
    system = 'system'
    unknown_future_value = 'unknownFutureValue'


class ScheduleChangeState(Enum):
    pending = 'pending'
    approved = 'approved'
    declined = 'declined'
    unknown_future_value = 'unknownFutureValue'


class ScheduleEntityTheme(Enum):
    white = 'white'
    blue = 'blue'
    green = 'green'
    purple = 'purple'
    pink = 'pink'
    yellow = 'yellow'
    gray = 'gray'
    dark_blue = 'darkBlue'
    dark_green = 'darkGreen'
    dark_purple = 'darkPurple'
    dark_pink = 'darkPink'
    dark_yellow = 'darkYellow'
    unknown_future_value = 'unknownFutureValue'


class ScopedRoleMembership(Entity):
    field_odata_type: str
    administrative_unit_id: Annotated[
        str | None,
        Field(
            description='Unique identifier for the administrative unit that the directory role is scoped to'
        ),
    ] = None
    role_id: Annotated[
        str | None,
        Field(
            description='Unique identifier for the directory role that the member is in.'
        ),
    ] = None
    role_member_info: Identity | None = None


class SearchResult(BaseModel):
    field_odata_type: str
    on_click_telemetry_url: Annotated[
        str | None,
        Field(
            description='A callback URL that can be used to record telemetry information. The application should issue a GET on this URL if the user interacts with this item to improve the quality of results.'
        ),
    ] = None


class SectionLinks(BaseModel):
    field_odata_type: str
    one_note_client_url: Annotated[
        ExternalLink | Dict[str, Any] | None,
        Field(
            description="Opens the section in the OneNote native client if it's installed."
        ),
    ] = None
    one_note_web_url: Annotated[
        ExternalLink | Dict[str, Any] | None,
        Field(description='Opens the section in OneNote on the web.'),
    ] = None


class SelectionLikelihoodInfo(Enum):
    not_specified = 'notSpecified'
    high = 'high'


class Sensitivity(Enum):
    normal = 'normal'
    personal = 'personal'
    private = 'private'
    confidential = 'confidential'


class ServicePlanInfo(BaseModel):
    field_odata_type: str
    applies_to: Annotated[
        str | None,
        Field(
            description='The object the service plan can be assigned to. The possible values are:User - service plan can be assigned to individual users.Company - service plan can be assigned to the entire tenant.'
        ),
    ] = None
    provisioning_status: Annotated[
        str | None,
        Field(
            description="The provisioning status of the service plan. The possible values are:Success - Service is fully provisioned.Disabled - Service is disabled.Error - The service plan isn't provisioned and is in an error state.PendingInput - The service isn't provisioned and is awaiting service confirmation.PendingActivation - The service is provisioned but requires explicit activation by an administrator (for example, Intune_O365 service plan)PendingProvisioning - Microsoft has added a new service to the product SKU and it isn't activated in the tenant."
        ),
    ] = None
    service_plan_id: Annotated[
        UUID | None,
        Field(
            description='The unique identifier of the service plan.',
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        ),
    ] = None
    service_plan_name: Annotated[
        str | None, Field(description='The name of the service plan.')
    ] = None


class ServiceProvisioningError(BaseModel):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time at which the error occurred.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    is_resolved: Annotated[
        bool | None,
        Field(description='Indicates whether the error has been attended to.'),
    ] = None
    service_instance: Annotated[
        str | None,
        Field(
            description="Qualified service instance (for example, 'SharePoint/Dublin') that published the service error information."
        ),
    ] = None


class SettingSourceType(Enum):
    device_configuration = 'deviceConfiguration'
    device_intent = 'deviceIntent'


class SettingValue(BaseModel):
    field_odata_type: str
    name: Annotated[
        str | None,
        Field(
            description='Name of the setting (as defined by the groupSettingTemplate).'
        ),
    ] = None
    value: Annotated[str | None, Field(description='Value of the setting.')] = None


class SharePointIdentity(Identity):
    field_odata_type: str
    login_name: Annotated[
        str | None, Field(description='The sign in name of the SharePoint identity.')
    ] = None


class SharePointIdentitySet(IdentitySet):
    field_odata_type: str
    group: Annotated[
        Identity | Dict[str, Any] | None,
        Field(description='The group associated with this action. Optional.'),
    ] = None
    site_group: Annotated[
        SharePointIdentity | Dict[str, Any] | None,
        Field(
            description='The SharePoint group associated with this action. Optional.'
        ),
    ] = None
    site_user: Annotated[
        SharePointIdentity | Dict[str, Any] | None,
        Field(description='The SharePoint user associated with this action. Optional.'),
    ] = None


class Shared(BaseModel):
    field_odata_type: str
    owner: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='The identity of the owner of the shared item. Read-only.'),
    ] = None
    scope: Annotated[
        str | None,
        Field(
            description='Indicates the scope of how the item is shared. The possible values are: anonymous, organization, or users. Read-only.'
        ),
    ] = None
    shared_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='The identity of the user who shared the item. Read-only.'),
    ] = None
    shared_date_time: Annotated[
        datetime | None,
        Field(
            description='The UTC date and time when the item was shared. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class SharepointIds(BaseModel):
    field_odata_type: str
    list_id: Annotated[
        str | None,
        Field(
            description="The unique identifier (guid) for the item's list in SharePoint."
        ),
    ] = None
    list_item_id: Annotated[
        str | None,
        Field(
            description='An integer identifier for the item within the containing list.'
        ),
    ] = None
    list_item_unique_id: Annotated[
        str | None,
        Field(
            description='The unique identifier (guid) for the item within OneDrive for Business or a SharePoint site.'
        ),
    ] = None
    site_id: Annotated[
        str | None,
        Field(
            description="The unique identifier (guid) for the item's site collection (SPSite)."
        ),
    ] = None
    site_url: Annotated[
        str | None,
        Field(description='The SharePoint URL for the site that contains the item.'),
    ] = None
    tenant_id: Annotated[
        str | None, Field(description='The unique identifier (guid) for the tenancy.')
    ] = None
    web_id: Annotated[
        str | None,
        Field(description="The unique identifier (guid) for the item's site (SPWeb)."),
    ] = None


class SharingDetail(BaseModel):
    field_odata_type: str
    shared_by: Annotated[
        InsightIdentity | Dict[str, Any] | None,
        Field(description='The user who shared the document.'),
    ] = None
    shared_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time the file was last shared. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    sharing_reference: Annotated[
        ResourceReference | Dict[str, Any] | None,
        Field(
            description='Reference properties of the document, such as the URL and type of the document. Read-only'
        ),
    ] = None
    sharing_subject: Annotated[
        str | None, Field(description='The subject with which the document was shared.')
    ] = None
    sharing_type: Annotated[
        str | None,
        Field(
            description='Determines the way the document was shared. Can be by a 1Link1, 1Attachment1, 1Group1, 1Site1.'
        ),
    ] = None


class SharingInvitation(BaseModel):
    field_odata_type: str
    email: Annotated[
        str | None,
        Field(
            description='The email address provided for the recipient of the sharing invitation. Read-only.'
        ),
    ] = None
    invited_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='Provides information about who sent the invitation that created this permission, if that information is available. Read-only.'
        ),
    ] = None
    redeemed_by: str | None = None
    sign_in_required: Annotated[
        bool | None,
        Field(
            description='If true the recipient of the invitation needs to sign in in order to access the shared item. Read-only.'
        ),
    ] = None


class SharingLink(BaseModel):
    field_odata_type: str
    application: Annotated[
        Identity | Dict[str, Any] | None,
        Field(description='The app the link is associated with.'),
    ] = None
    prevents_download: Annotated[
        bool | None,
        Field(
            description='If true then the user can only use this link to view the item on the web, and cannot use it to download the contents of the item. Only for OneDrive for Business and SharePoint.'
        ),
    ] = None
    scope: Annotated[
        str | None,
        Field(
            description='The scope of the link represented by this permission. Value anonymous indicates the link is usable by anyone, organization indicates the link is only usable for users signed into the same tenant.'
        ),
    ] = None
    type: Annotated[str | None, Field(description='The type of the link created.')] = (
        None
    )
    web_html: Annotated[
        str | None,
        Field(
            description='For embed links, this property contains the HTML code for an <iframe> element that will embed the item in a webpage.'
        ),
    ] = None
    web_url: Annotated[
        str | None,
        Field(
            description='A URL that opens the item in the browser on the OneDrive website.'
        ),
    ] = None


class ShiftActivity(BaseModel):
    field_odata_type: str
    code: Annotated[
        str | None,
        Field(description='Customer defined code for the shiftActivity. Required.'),
    ] = None
    display_name: Annotated[
        str | None, Field(description='The name of the shiftActivity. Required.')
    ] = None
    end_date_time: Annotated[
        datetime | None,
        Field(
            description='The end date and time for the shiftActivity. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    is_paid: Annotated[
        bool | None,
        Field(
            description='Indicates whether the microsoft.graph.user should be paid for the activity during their shift. Required.'
        ),
    ] = None
    start_date_time: Annotated[
        datetime | None,
        Field(
            description='The start date and time for the shiftActivity. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    theme: ScheduleEntityTheme | None = None


class SignInActivity(BaseModel):
    field_odata_type: str
    last_non_interactive_sign_in_date_time: Annotated[
        datetime | None,
        Field(
            description='The last non-interactive sign-in date for a specific user. You can use this field to calculate the last time a client attempted (either successfully or unsuccessfully) to sign in to the directory on behalf of a user. Because some users may use clients to access tenant resources rather than signing into your tenant directly, you can use the non-interactive sign-in date to along with lastSignInDateTime to identify inactive users. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Microsoft Entra ID maintains non-interactive sign-ins going back to May 2020. For more information about using the value of this property, see Manage inactive user accounts in Microsoft Entra ID.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_non_interactive_sign_in_request_id: Annotated[
        str | None,
        Field(
            description='Request identifier of the last non-interactive sign-in performed by this user.'
        ),
    ] = None
    last_sign_in_date_time: Annotated[
        datetime | None,
        Field(
            description='The last interactive sign-in date and time for a specific user. You can use this field to calculate the last time a user attempted (either successfully or unsuccessfully) to sign in to the directory with an interactive authentication method. This field can be used to build reports, such as inactive users. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Microsoft Entra ID maintains interactive sign-ins going back to April 2020. For more information about using the value of this property, see Manage inactive user accounts in Microsoft Entra ID.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_sign_in_request_id: Annotated[
        str | None,
        Field(
            description='Request identifier of the last interactive sign-in performed by this user.'
        ),
    ] = None
    last_successful_sign_in_date_time: Annotated[
        datetime | None,
        Field(
            description="The date and time of the user's most recent successful sign-in activity. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_successful_sign_in_request_id: Annotated[
        str | None, Field(description='The request ID of the last successful sign-in.')
    ] = None


class SignInFrequencyAuthenticationType(Enum):
    primary_and_secondary_authentication = 'primaryAndSecondaryAuthentication'
    secondary_authentication = 'secondaryAuthentication'
    unknown_future_value = 'unknownFutureValue'


class SignInFrequencyInterval(Enum):
    time_based = 'timeBased'
    every_time = 'everyTime'
    unknown_future_value = 'unknownFutureValue'


class SigninFrequencyType(Enum):
    days = 'days'
    hours = 'hours'


class SingleValueLegacyExtendedProperty(Entity):
    field_odata_type: str
    value: Annotated[str | None, Field(description='A property value.')] = None


class SiteArchiveStatus(Enum):
    recently_archived = 'recentlyArchived'
    fully_archived = 'fullyArchived'
    reactivating = 'reactivating'
    unknown_future_value = 'unknownFutureValue'


class SizeRange(BaseModel):
    field_odata_type: str
    maximum_size: Annotated[
        float | None,
        Field(
            description='The maximum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    minimum_size: Annotated[
        float | None,
        Field(
            description='The minimum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class SpecialFolder(BaseModel):
    field_odata_type: str
    name: Annotated[
        str | None,
        Field(
            description='The unique identifier for this item in the /drive/special collection'
        ),
    ] = None


class Status(Enum):
    active = 'active'
    updated = 'updated'
    deleted = 'deleted'
    ignored = 'ignored'
    unknown_future_value = 'unknownFutureValue'


class StoragePlanInformation(BaseModel):
    field_odata_type: str
    upgrade_available: Annotated[
        bool | None,
        Field(
            description='Indicates whether there are higher storage quota plans available. Read-only.'
        ),
    ] = None


class StorageQuotaBreakdown(Entity):
    field_odata_type: str
    display_name: str | None = None
    manage_web_url: str | None = None
    used: float | None = None


class Subscription(Entity):
    field_odata_type: str
    application_id: Annotated[
        str | None,
        Field(
            description='Optional. Identifier of the application used to create the subscription. Read-only.'
        ),
    ] = None
    change_type: Annotated[
        str | None,
        Field(
            description='Required. Indicates the type of change in the subscribed resource that raises a change notification. The supported values are: created, updated, deleted. Multiple values can be combined using a comma-separated list. Note:  Drive root item and list change notifications support only the updated changeType. User and group change notifications support updated and deleted changeType. Use updated to receive notifications when user or group is created, updated, or soft deleted. Use deleted to receive notifications when user or group is permanently deleted.'
        ),
    ] = None
    client_state: Annotated[
        str | None,
        Field(
            description='Optional. Specifies the value of the clientState property sent by the service in each change notification. The maximum length is 128 characters. The client can check that the change notification came from the service by comparing the value of the clientState property sent with the subscription with the value of the clientState property received with each change notification.'
        ),
    ] = None
    creator_id: Annotated[
        str | None,
        Field(
            description='Optional. Identifier of the user or service principal that created the subscription. If the app used delegated permissions to create the subscription, this field contains the ID of the signed-in user the app called on behalf of. If the app used application permissions, this field contains the ID of the service principal corresponding to the app. Read-only.'
        ),
    ] = None
    encryption_certificate: Annotated[
        str | None,
        Field(
            description='Optional. A base64-encoded representation of a certificate with a public key used to encrypt resource data in change notifications. Optional but required when includeResourceData is true.'
        ),
    ] = None
    encryption_certificate_id: Annotated[
        str | None,
        Field(
            description='Optional. A custom app-provided identifier to help identify the certificate needed to decrypt resource data.'
        ),
    ] = None
    expiration_date_time: Annotated[
        datetime | None,
        Field(
            description='Required. Specifies the date and time when the webhook subscription expires. The time is in UTC, and can be an amount of time from subscription creation that varies for the resource subscribed to. For the maximum supported subscription length of time, see Subscription lifetime.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    include_resource_data: Annotated[
        bool | None,
        Field(
            description='Optional. When set to true, change notifications include resource data (such as content of a chat message).'
        ),
    ] = None
    latest_supported_tls_version: Annotated[
        str | None,
        Field(
            description='Optional. Specifies the latest version of Transport Layer Security (TLS) that the notification endpoint, specified by notificationUrl, supports. The possible values are: v10, v11, v12, v13. For subscribers whose notification endpoint supports a version lower than the currently recommended version (TLS 1.2), specifying this property by a set timeline allows them to temporarily use their deprecated version of TLS before completing their upgrade to TLS 1.2. For these subscribers, not setting this property per the timeline would result in subscription operations failing. For subscribers whose notification endpoint already supports TLS 1.2, setting this property is optional. In such cases, Microsoft Graph defaults the property to v1_2.'
        ),
    ] = None
    lifecycle_notification_url: Annotated[
        str | None,
        Field(
            description='Required for Teams resources if  the expirationDateTime value is more than 1 hour from now; optional otherwise. The URL of the endpoint that receives lifecycle notifications, including subscriptionRemoved, reauthorizationRequired, and missed notifications. This URL must make use of the HTTPS protocol. For more information, see Reduce missing subscriptions and change notifications.'
        ),
    ] = None
    notification_query_options: Annotated[
        str | None,
        Field(
            description='Optional. OData query options for specifying value for the targeting resource. Clients receive notifications when resource reaches the state matching the query options provided here. With this new property in the subscription creation payload along with all existing properties, Webhooks deliver notifications whenever a resource reaches the desired state mentioned in the notificationQueryOptions property. For example, when the print job is completed or when a print job resource isFetchable property value becomes true etc.  Supported only for Universal Print Service. For more information, see Subscribe to change notifications from cloud printing APIs using Microsoft Graph.'
        ),
    ] = None
    notification_url: Annotated[
        str | None,
        Field(
            description='Required. The URL of the endpoint that receives the change notifications. This URL must make use of the HTTPS protocol. Any query string parameter included in the notificationUrl property is included in the HTTP POST request when Microsoft Graph sends the change notifications.'
        ),
    ] = None
    notification_url_app_id: Annotated[
        str | None,
        Field(
            description='Optional. The app ID that the subscription service can use to generate the validation token. The value allows the client to validate the authenticity of the notification received.'
        ),
    ] = None
    resource: Annotated[
        str | None,
        Field(
            description="Required. Specifies the resource that is monitored for changes. Don't include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values for each supported resource."
        ),
    ] = None


class SystemFacet(BaseModel):
    field_odata_type: str


class TaskStatus(Enum):
    not_started = 'notStarted'
    in_progress = 'inProgress'
    completed = 'completed'
    waiting_on_others = 'waitingOnOthers'
    deferred = 'deferred'


class TeamFunSettings(BaseModel):
    field_odata_type: str
    allow_custom_memes: Annotated[
        bool | None,
        Field(description='If set to true, enables users to include custom memes.'),
    ] = None
    allow_giphy: Annotated[
        bool | None, Field(description='If set to true, enables Giphy use.')
    ] = None
    allow_stickers_and_memes: Annotated[
        bool | None,
        Field(
            description='If set to true, enables users to include stickers and memes.'
        ),
    ] = None
    giphy_content_rating: Annotated[
        GiphyRatingType | Dict[str, Any] | None,
        Field(
            description='Giphy content rating. Possible values are: moderate, strict.'
        ),
    ] = None


class TeamGuestSettings(BaseModel):
    field_odata_type: str
    allow_create_update_channels: Annotated[
        bool | None,
        Field(description='If set to true, guests can add and update channels.'),
    ] = None
    allow_delete_channels: Annotated[
        bool | None, Field(description='If set to true, guests can delete channels.')
    ] = None


class TeamMemberSettings(BaseModel):
    field_odata_type: str
    allow_add_remove_apps: Annotated[
        bool | None,
        Field(description='If set to true, members can add and remove apps.'),
    ] = None
    allow_create_private_channels: Annotated[
        bool | None,
        Field(
            description='If set to true, members can add and update private channels.'
        ),
    ] = None
    allow_create_update_channels: Annotated[
        bool | None,
        Field(description='If set to true, members can add and update channels.'),
    ] = None
    allow_create_update_remove_connectors: Annotated[
        bool | None,
        Field(
            description='If set to true, members can add, update, and remove connectors.'
        ),
    ] = None
    allow_create_update_remove_tabs: Annotated[
        bool | None,
        Field(description='If set to true, members can add, update, and remove tabs.'),
    ] = None
    allow_delete_channels: Annotated[
        bool | None, Field(description='If set to true, members can delete channels.')
    ] = None


class TeamMessagingSettings(BaseModel):
    field_odata_type: str
    allow_channel_mentions: Annotated[
        bool | None, Field(description='If set to true, @channel mentions are allowed.')
    ] = None
    allow_owner_delete_messages: Annotated[
        bool | None, Field(description='If set to true, owners can delete any message.')
    ] = None
    allow_team_mentions: Annotated[
        bool | None, Field(description='If set to true, @team mentions are allowed.')
    ] = None
    allow_user_delete_messages: Annotated[
        bool | None,
        Field(description='If set to true, users can delete their messages.'),
    ] = None
    allow_user_edit_messages: Annotated[
        bool | None, Field(description='If set to true, users can edit their messages.')
    ] = None


class TeamSpecialization(Enum):
    none = 'none'
    education_standard = 'educationStandard'
    education_class = 'educationClass'
    education_professional_learning_community = 'educationProfessionalLearningCommunity'
    education_staff = 'educationStaff'
    healthcare_standard = 'healthcareStandard'
    healthcare_care_coordination = 'healthcareCareCoordination'
    unknown_future_value = 'unknownFutureValue'


class TeamSummary(BaseModel):
    field_odata_type: str
    guests_count: Annotated[
        float | None,
        Field(
            description='Count of guests in a team.', ge=-2147483648.0, le=2147483647.0
        ),
    ] = None
    members_count: Annotated[
        float | None,
        Field(
            description='Count of members in a team.', ge=-2147483648.0, le=2147483647.0
        ),
    ] = None
    owners_count: Annotated[
        float | None,
        Field(
            description='Count of owners in a team.', ge=-2147483648.0, le=2147483647.0
        ),
    ] = None


class TeamVisibilityType(Enum):
    private = 'private'
    public = 'public'
    hidden_membership = 'hiddenMembership'
    unknown_future_value = 'unknownFutureValue'


class TeamsAppDistributionMethod(Enum):
    store = 'store'
    organization = 'organization'
    sideloaded = 'sideloaded'
    unknown_future_value = 'unknownFutureValue'


class TeamsAppPublishingState(Enum):
    submitted = 'submitted'
    rejected = 'rejected'
    published = 'published'
    unknown_future_value = 'unknownFutureValue'


class TeamsAppResourceSpecificPermissionType(Enum):
    delegated = 'delegated'
    application = 'application'
    unknown_future_value = 'unknownFutureValue'


class TeamsAsyncOperationStatus(Enum):
    invalid = 'invalid'
    not_started = 'notStarted'
    in_progress = 'inProgress'
    succeeded = 'succeeded'
    failed = 'failed'
    unknown_future_value = 'unknownFutureValue'


class TeamsAsyncOperationType(Enum):
    invalid = 'invalid'
    clone_team = 'cloneTeam'
    archive_team = 'archiveTeam'
    unarchive_team = 'unarchiveTeam'
    create_team = 'createTeam'
    unknown_future_value = 'unknownFutureValue'
    teamify_group = 'teamifyGroup'
    create_channel = 'createChannel'
    archive_channel = 'archiveChannel'
    unarchive_channel = 'unarchiveChannel'


class TeamsTabConfiguration(BaseModel):
    field_odata_type: str
    content_url: Annotated[
        str | None,
        Field(description='Url used for rendering tab contents in Teams. Required.'),
    ] = None
    entity_id: Annotated[
        str | None,
        Field(description='Identifier for the entity hosted by the tab provider.'),
    ] = None
    remove_url: Annotated[
        str | None,
        Field(
            description='Url called by Teams client when a Tab is removed using the Teams Client.'
        ),
    ] = None
    website_url: Annotated[
        str | None, Field(description='Url for showing tab contents outside of Teams.')
    ] = None


class TeamsTemplate(Entity):
    field_odata_type: str


class TeamworkBot(Entity):
    field_odata_type: str


class TeamworkConversationIdentityType(Enum):
    team = 'team'
    channel = 'channel'
    chat = 'chat'
    unknown_future_value = 'unknownFutureValue'


class TeamworkHostedContent(Entity):
    field_odata_type: str
    content_bytes: Annotated[
        str | None,
        Field(description='Write only. Bytes for the hosted content (such as images).'),
    ] = None
    content_type: Annotated[
        str | None,
        Field(description='Write only. Content type. such as image/png, image/jpg.'),
    ] = None


class TeamworkTagMember(Entity):
    field_odata_type: str
    display_name: Annotated[
        str | None, Field(description="The member's display name.")
    ] = None
    tenant_id: Annotated[
        str | None,
        Field(description='The ID of the tenant that the tag member is a part of.'),
    ] = None
    user_id: Annotated[str | None, Field(description='The user ID of the member.')] = (
        None
    )


class TeamworkTagType(Enum):
    standard = 'standard'
    unknown_future_value = 'unknownFutureValue'


class TeamworkUserIdentityType(Enum):
    aad_user = 'aadUser'
    on_premise_aad_user = 'onPremiseAadUser'
    anonymous_guest = 'anonymousGuest'
    federated_user = 'federatedUser'
    personal_microsoft_account_user = 'personalMicrosoftAccountUser'
    skype_user = 'skypeUser'
    phone_user = 'phoneUser'
    unknown_future_value = 'unknownFutureValue'
    email_user = 'emailUser'


class TenantInformation(BaseModel):
    field_odata_type: str
    default_domain_name: Annotated[
        str | None,
        Field(description='Primary domain name of a Microsoft Entra tenant.'),
    ] = None
    display_name: Annotated[
        str | None, Field(description='Display name of a Microsoft Entra tenant.')
    ] = None
    federation_brand_name: Annotated[
        str | None,
        Field(
            description='Name shown to users that sign in to a Microsoft Entra tenant.'
        ),
    ] = None
    tenant_id: Annotated[
        str | None, Field(description='Unique identifier of a Microsoft Entra tenant.')
    ] = None


class TextColumn(BaseModel):
    field_odata_type: str
    allow_multiple_lines: Annotated[
        bool | None, Field(description='Whether to allow multiple lines of text.')
    ] = None
    append_changes_to_existing_text: Annotated[
        bool | None,
        Field(
            description='Whether updates to this column should replace existing text, or append to it.'
        ),
    ] = None
    lines_for_editing: Annotated[
        float | None,
        Field(
            description='The size of the text box.', ge=-2147483648.0, le=2147483647.0
        ),
    ] = None
    max_length: Annotated[
        float | None,
        Field(
            description='The maximum number of characters for the value.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    text_type: Annotated[
        str | None,
        Field(
            description='The type of text being stored. Must be one of plain or richText'
        ),
    ] = None


class Thumbnail(BaseModel):
    field_odata_type: str
    content: Annotated[
        str | None, Field(description='The content stream for the thumbnail.')
    ] = None
    height: Annotated[
        float | None,
        Field(
            description='The height of the thumbnail, in pixels.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    source_item_id: Annotated[
        str | None,
        Field(
            description='The unique identifier of the item that provided the thumbnail. This is only available when a folder thumbnail is requested.'
        ),
    ] = None
    url: Annotated[
        str | None, Field(description='The URL used to fetch the thumbnail content.')
    ] = None
    width: Annotated[
        float | None,
        Field(
            description='The width of the thumbnail, in pixels.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class ThumbnailColumn(BaseModel):
    field_odata_type: str


class ThumbnailSet(Entity):
    field_odata_type: str
    large: Annotated[
        Thumbnail | Dict[str, Any] | None,
        Field(description='A 1920x1920 scaled thumbnail.'),
    ] = None
    medium: Annotated[
        Thumbnail | Dict[str, Any] | None,
        Field(description='A 176x176 scaled thumbnail.'),
    ] = None
    small: Annotated[
        Thumbnail | Dict[str, Any] | None,
        Field(description='A 48x48 cropped thumbnail.'),
    ] = None
    source: Annotated[
        Thumbnail | Dict[str, Any] | None,
        Field(
            description='A custom thumbnail image or the original image used to generate other thumbnails.'
        ),
    ] = None


class TimeOffReasonIconType(Enum):
    none = 'none'
    car = 'car'
    calendar = 'calendar'
    running = 'running'
    plane = 'plane'
    first_aid = 'firstAid'
    doctor = 'doctor'
    not_working = 'notWorking'
    clock = 'clock'
    jury_duty = 'juryDuty'
    globe = 'globe'
    cup = 'cup'
    phone = 'phone'
    weather = 'weather'
    umbrella = 'umbrella'
    piggy_bank = 'piggyBank'
    dog = 'dog'
    cake = 'cake'
    traffic_cone = 'trafficCone'
    pin = 'pin'
    sunny = 'sunny'
    unknown_future_value = 'unknownFutureValue'


class TimeRange(BaseModel):
    field_odata_type: str
    end_time: Annotated[
        time | None,
        Field(
            description='End time for the time range.',
            pattern='^([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?$',
        ),
    ] = None
    start_time: Annotated[
        time | None,
        Field(
            description='Start time for the time range.',
            pattern='^([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?$',
        ),
    ] = None


class TimeSlot(BaseModel):
    field_odata_type: str
    end: DateTimeTimeZone | None = None
    start: DateTimeTimeZone | None = None


class TimeZoneBase(BaseModel):
    field_odata_type: str
    name: Annotated[
        str | None,
        Field(
            description="The name of a time zone. It can be a standard time zone name such as 'Hawaii-Aleutian Standard Time', or 'Customized Time Zone' for a custom time zone."
        ),
    ] = None


class Trending(Entity):
    field_odata_type: str
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    resource: Annotated[
        Entity | Dict[str, Any] | None,
        Field(description='Used for navigating to the trending document.'),
    ] = None
    resource_reference: Annotated[
        ResourceReference | Dict[str, Any] | None,
        Field(
            description='Reference properties of the trending document, such as the url and type of the document.'
        ),
    ] = None
    resource_visualization: Annotated[
        ResourceVisualization | Dict[str, Any] | None,
        Field(
            description='Properties that you can use to visualize the document in your experience.'
        ),
    ] = None
    weight: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='Value indicating how much the document is currently trending. The larger the number, the more the document is currently trending around the user (the more relevant it is). Returned documents are sorted by this value.'
        ),
    ] = None


class UnifiedRolePermission(BaseModel):
    field_odata_type: str
    allowed_resource_actions: Annotated[
        List[str] | None,
        Field(
            description='Set of tasks that can be performed on a resource. Required.'
        ),
    ] = None
    condition: Annotated[
        str | None,
        Field(
            description='Optional constraints that must be met for the permission to be effective. Not supported for custom roles.'
        ),
    ] = None
    excluded_resource_actions: Annotated[
        List[str] | None,
        Field(
            description='Set of tasks that may not be performed on a resource. Not yet supported.'
        ),
    ] = None


class UsageDetails(BaseModel):
    field_odata_type: str
    last_accessed_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time the resource was last accessed by the user. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time the resource was last modified by the user. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class UsedInsight(Entity):
    field_odata_type: str
    last_used: Annotated[
        UsageDetails | Dict[str, Any] | None,
        Field(
            description='Information about when the item was last viewed or modified by the user. Read only.'
        ),
    ] = None
    resource: Annotated[
        Entity | Dict[str, Any] | None,
        Field(
            description='Used for navigating to the item that was used. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.'
        ),
    ] = None
    resource_reference: Annotated[
        ResourceReference | Dict[str, Any] | None,
        Field(
            description='Reference properties of the used document, such as the url and type of the document. Read-only'
        ),
    ] = None
    resource_visualization: Annotated[
        ResourceVisualization | Dict[str, Any] | None,
        Field(
            description='Properties that you can use to visualize the document in your experience. Read-only'
        ),
    ] = None


class UserIdentity(Identity):
    field_odata_type: str
    ip_address: Annotated[
        str | None,
        Field(
            description='Indicates the client IP address associated with the user performing the activity (audit log only).'
        ),
    ] = None
    user_principal_name: Annotated[
        str | None, Field(description='The userPrincipalName attribute of the user.')
    ] = None


class UserInsightsSettings(Entity):
    field_odata_type: str
    is_enabled: Annotated[
        bool | None,
        Field(
            description="True if the user's itemInsights and meeting hours insights are enabled; false if the user's itemInsights and meeting hours insights are disabled. The default value is true. Optional."
        ),
    ] = None


class UserPurpose(Enum):
    user = 'user'
    linked = 'linked'
    shared = 'shared'
    room = 'room'
    equipment = 'equipment'
    others = 'others'
    unknown_future_value = 'unknownFutureValue'


class Video(BaseModel):
    field_odata_type: str
    audio_bits_per_sample: Annotated[
        float | None,
        Field(
            description='Number of audio bits per sample.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    audio_channels: Annotated[
        float | None,
        Field(
            description='Number of audio channels.', ge=-2147483648.0, le=2147483647.0
        ),
    ] = None
    audio_format: Annotated[
        str | None, Field(description='Name of the audio format (AAC, MP3, etc.).')
    ] = None
    audio_samples_per_second: Annotated[
        float | None,
        Field(
            description='Number of audio samples per second.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    bitrate: Annotated[
        float | None,
        Field(
            description='Bit rate of the video in bits per second.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    duration: Annotated[
        float | None, Field(description='Duration of the file in milliseconds.')
    ] = None
    four_cc: Annotated[
        str | None, Field(description="'Four character code' name of the video format.")
    ] = None
    frame_rate: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='Frame rate of the video.'),
    ] = None
    height: Annotated[
        float | None,
        Field(
            description='Height of the video, in pixels.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    width: Annotated[
        float | None,
        Field(
            description='Width of the video, in pixels.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class VisualInfo(BaseModel):
    field_odata_type: str
    attribution: Annotated[
        ImageInfo | Dict[str, Any] | None,
        Field(
            description='Optional. JSON object used to represent an icon which represents the application used to generate the activity'
        ),
    ] = None
    background_color: Annotated[
        str | None,
        Field(
            description='Optional. Background color used to render the activity in the UI - brand color for the application source of the activity. Must be a valid hex color'
        ),
    ] = None
    content: Annotated[
        Any | None,
        Field(
            description='Optional. Custom piece of data - JSON object used to provide custom content to render the activity in the Windows Shell UI'
        ),
    ] = None
    description: Annotated[
        str | None,
        Field(
            description="Optional. Longer text description of the user's unique activity (example: document name, first sentence, and/or metadata)"
        ),
    ] = None
    display_text: Annotated[
        str | None,
        Field(
            description="Required. Short text description of the user's unique activity (for example, document name in cases where an activity refers to document creation)"
        ),
    ] = None


class WatermarkProtectionValues(BaseModel):
    field_odata_type: str
    is_enabled_for_content_sharing: Annotated[
        bool | None,
        Field(
            description='Indicates whether to apply a watermark to any shared content.'
        ),
    ] = None
    is_enabled_for_video: Annotated[
        bool | None,
        Field(
            description="Indicates whether to apply a watermark to everyone's video feed."
        ),
    ] = None


class WebsiteType(Enum):
    other = 'other'
    home = 'home'
    work = 'work'
    blog = 'blog'
    profile = 'profile'


class WeekIndex(Enum):
    first = 'first'
    second = 'second'
    third = 'third'
    fourth = 'fourth'
    last = 'last'


class WellknownListName(Enum):
    none = 'none'
    default_list = 'defaultList'
    flagged_emails = 'flaggedEmails'
    unknown_future_value = 'unknownFutureValue'


class WindowsDefenderProductStatus(Enum):
    no_status = 'noStatus'
    service_not_running = 'serviceNotRunning'
    service_started_without_malware_protection = (
        'serviceStartedWithoutMalwareProtection'
    )
    pending_full_scan_due_to_threat_action = 'pendingFullScanDueToThreatAction'
    pending_reboot_due_to_threat_action = 'pendingRebootDueToThreatAction'
    pending_manual_steps_due_to_threat_action = 'pendingManualStepsDueToThreatAction'
    av_signatures_out_of_date = 'avSignaturesOutOfDate'
    as_signatures_out_of_date = 'asSignaturesOutOfDate'
    no_quick_scan_happened_for_specified_period = (
        'noQuickScanHappenedForSpecifiedPeriod'
    )
    no_full_scan_happened_for_specified_period = 'noFullScanHappenedForSpecifiedPeriod'
    system_initiated_scan_in_progress = 'systemInitiatedScanInProgress'
    system_initiated_clean_in_progress = 'systemInitiatedCleanInProgress'
    samples_pending_submission = 'samplesPendingSubmission'
    product_running_in_evaluation_mode = 'productRunningInEvaluationMode'
    product_running_in_non_genuine_mode = 'productRunningInNonGenuineMode'
    product_expired = 'productExpired'
    offline_scan_required = 'offlineScanRequired'
    service_shutdown_as_part_of_system_shutdown = (
        'serviceShutdownAsPartOfSystemShutdown'
    )
    threat_remediation_failed_critically = 'threatRemediationFailedCritically'
    threat_remediation_failed_non_critically = 'threatRemediationFailedNonCritically'
    no_status_flags_set = 'noStatusFlagsSet'
    platform_out_of_date = 'platformOutOfDate'
    platform_update_in_progress = 'platformUpdateInProgress'
    platform_about_to_be_outdated = 'platformAboutToBeOutdated'
    signature_or_platform_end_of_life_is_past_or_is_impending = (
        'signatureOrPlatformEndOfLifeIsPastOrIsImpending'
    )
    windows_s_mode_signatures_in_use_on_non_win10_s_install = (
        'windowsSModeSignaturesInUseOnNonWin10SInstall'
    )


class WindowsDeviceHealthState(Enum):
    clean = 'clean'
    full_scan_pending = 'fullScanPending'
    reboot_pending = 'rebootPending'
    manual_steps_pending = 'manualStepsPending'
    offline_scan_pending = 'offlineScanPending'
    critical = 'critical'


class WindowsMalwareCategory(Enum):
    invalid = 'invalid'
    adware = 'adware'
    spyware = 'spyware'
    password_stealer = 'passwordStealer'
    trojan_downloader = 'trojanDownloader'
    worm = 'worm'
    backdoor = 'backdoor'
    remote_access_trojan = 'remoteAccessTrojan'
    trojan = 'trojan'
    email_flooder = 'emailFlooder'
    keylogger = 'keylogger'
    dialer = 'dialer'
    monitoring_software = 'monitoringSoftware'
    browser_modifier = 'browserModifier'
    cookie = 'cookie'
    browser_plugin = 'browserPlugin'
    aol_exploit = 'aolExploit'
    nuker = 'nuker'
    security_disabler = 'securityDisabler'
    joke_program = 'jokeProgram'
    hostile_active_x_control = 'hostileActiveXControl'
    software_bundler = 'softwareBundler'
    stealth_notifier = 'stealthNotifier'
    settings_modifier = 'settingsModifier'
    tool_bar = 'toolBar'
    remote_control_software = 'remoteControlSoftware'
    trojan_ftp = 'trojanFtp'
    potential_unwanted_software = 'potentialUnwantedSoftware'
    icq_exploit = 'icqExploit'
    trojan_telnet = 'trojanTelnet'
    exploit = 'exploit'
    filesharing_program = 'filesharingProgram'
    malware_creation_tool = 'malwareCreationTool'
    remote_control_software_1 = 'remote_Control_Software'
    tool = 'tool'
    trojan_denial_of_service = 'trojanDenialOfService'
    trojan_dropper = 'trojanDropper'
    trojan_mass_mailer = 'trojanMassMailer'
    trojan_monitoring_software = 'trojanMonitoringSoftware'
    trojan_proxy_server = 'trojanProxyServer'
    virus = 'virus'
    known = 'known'
    unknown = 'unknown'
    spp = 'spp'
    behavior = 'behavior'
    vulnerability = 'vulnerability'
    policy = 'policy'
    enterprise_unwanted_software = 'enterpriseUnwantedSoftware'
    ransom = 'ransom'
    hips_rule = 'hipsRule'


class WindowsMalwareExecutionState(Enum):
    unknown = 'unknown'
    blocked = 'blocked'
    allowed = 'allowed'
    running = 'running'
    not_running = 'notRunning'


class WindowsMalwareSeverity(Enum):
    unknown = 'unknown'
    low = 'low'
    moderate = 'moderate'
    high = 'high'
    severe = 'severe'


class WindowsMalwareState(Enum):
    unknown = 'unknown'
    detected = 'detected'
    cleaned = 'cleaned'
    quarantined = 'quarantined'
    removed = 'removed'
    allowed = 'allowed'
    blocked = 'blocked'
    clean_failed = 'cleanFailed'
    quarantine_failed = 'quarantineFailed'
    remove_failed = 'removeFailed'
    allow_failed = 'allowFailed'
    abandoned = 'abandoned'
    block_failed = 'blockFailed'


class WindowsMalwareThreatState(Enum):
    active = 'active'
    action_failed = 'actionFailed'
    manual_steps_required = 'manualStepsRequired'
    full_scan_required = 'fullScanRequired'
    reboot_required = 'rebootRequired'
    remediated_with_non_critical_failures = 'remediatedWithNonCriticalFailures'
    quarantined = 'quarantined'
    removed = 'removed'
    cleaned = 'cleaned'
    allowed = 'allowed'
    no_status_cleared = 'noStatusCleared'


class WindowsSettingInstance(Entity):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Set by the server. Represents the dateTime in UTC when the object was created on the server.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    expiration_date_time: Annotated[
        datetime | None,
        Field(
            description='Set by the server. The object expires at the specified dateTime in UTC, making it unavailable after that time.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description="Set by the server if not provided in the request from the Windows client device. Refers to the user's Windows device that modified the object at the specified dateTime in UTC.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    payload: Annotated[
        str | None, Field(description='Base64-encoded JSON setting value.')
    ] = None


class WindowsSettingType(Enum):
    roaming = 'roaming'
    backup = 'backup'
    unknown_future_value = 'unknownFutureValue'


class WorkbookApplication(Entity):
    field_odata_type: str
    calculation_mode: Annotated[
        str | None,
        Field(
            description='Returns the calculation mode used in the workbook. Possible values are: Automatic, AutomaticExceptTables, Manual.'
        ),
    ] = None


class WorkbookChartFill(Entity):
    field_odata_type: str


class WorkbookChartFont(Entity):
    field_odata_type: str
    bold: Annotated[
        bool | None, Field(description='Indicates whether the fond is bold.')
    ] = None
    color: Annotated[
        str | None,
        Field(
            description='The HTML color code representation of the text color. For example #FF0000 represents Red.'
        ),
    ] = None
    italic: Annotated[
        bool | None, Field(description='Indicates whether the fond is italic.')
    ] = None
    name: Annotated[
        str | None, Field(description="The font name. For example 'Calibri'.")
    ] = None
    size: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='The size of the font. For example,  11.'),
    ] = None
    underline: Annotated[
        str | None,
        Field(
            description='The type of underlining applied to the font. The possible values are: None, Single.'
        ),
    ] = None


class WorkbookChartLegendFormat(Entity):
    field_odata_type: str
    fill: Annotated[
        WorkbookChartFill | Dict[str, Any] | None,
        Field(
            description='Represents the fill format of an object, which includes background formating information. Read-only.'
        ),
    ] = None
    font: Annotated[
        WorkbookChartFont | Dict[str, Any] | None,
        Field(
            description='Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.'
        ),
    ] = None


class WorkbookChartLineFormat(Entity):
    field_odata_type: str
    color: Annotated[
        str | None,
        Field(
            description='The HTML color code that represents the color of lines in the chart.'
        ),
    ] = None


class WorkbookChartPointFormat(Entity):
    field_odata_type: str
    fill: Annotated[
        WorkbookChartFill | Dict[str, Any] | None,
        Field(
            description='Represents the fill format of a chart, which includes background formatting information. Read-only.'
        ),
    ] = None


class WorkbookChartSeriesFormat(Entity):
    field_odata_type: str
    fill: Annotated[
        WorkbookChartFill | Dict[str, Any] | None,
        Field(
            description='Represents the fill format of a chart series, which includes background formatting information. Read-only.'
        ),
    ] = None
    line: Annotated[
        WorkbookChartLineFormat | Dict[str, Any] | None,
        Field(description='Represents line formatting. Read-only.'),
    ] = None


class WorkbookChartTitleFormat(Entity):
    field_odata_type: str
    fill: Annotated[
        WorkbookChartFill | Dict[str, Any] | None,
        Field(
            description='Represents the fill format of an object, which includes background formatting information. Read-only.'
        ),
    ] = None
    font: Annotated[
        WorkbookChartFont | Dict[str, Any] | None,
        Field(
            description='Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.'
        ),
    ] = None


class WorkbookCommentReply(Entity):
    field_odata_type: str
    content: Annotated[str | None, Field(description='The content of the reply.')] = (
        None
    )
    content_type: Annotated[
        str | None, Field(description='The content type for the reply.')
    ] = None


class WorkbookFunctions(Entity):
    field_odata_type: str


class WorkbookIcon(BaseModel):
    field_odata_type: str
    index: Annotated[
        float | None,
        Field(
            description='The index of the icon in the given set.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    set: Annotated[
        str | None,
        Field(
            description='The set that the icon is part of. The possible values are: Invalid, ThreeArrows, ThreeArrowsGray, ThreeFlags, ThreeTrafficLights1, ThreeTrafficLights2, ThreeSigns, ThreeSymbols, ThreeSymbols2, FourArrows, FourArrowsGray, FourRedToBlack, FourRating, FourTrafficLights, FiveArrows, FiveArrowsGray, FiveRating, FiveQuarters, ThreeStars, ThreeTriangles, FiveBoxes.'
        ),
    ] = None


class WorkbookOperationError(BaseModel):
    field_odata_type: str
    code: Annotated[str | None, Field(description='The error code.')] = None
    inner_error: WorkbookOperationError | Dict[str, Any] | None = None
    message: Annotated[str | None, Field(description='The error message.')] = None


class WorkbookOperationStatus(Enum):
    not_started = 'notStarted'
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'


class WorkbookSortField(BaseModel):
    field_odata_type: str
    ascending: Annotated[
        bool | None,
        Field(
            description='Represents whether the sorting is done in an ascending fashion.'
        ),
    ] = None
    color: Annotated[
        str | None,
        Field(
            description='Represents the color that is the target of the condition if the sorting is on font or cell color.'
        ),
    ] = None
    data_option: Annotated[
        str | None,
        Field(
            description='Represents additional sorting options for this field. The possible values are: Normal, TextAsNumber.'
        ),
    ] = None
    icon: Annotated[
        WorkbookIcon | Dict[str, Any] | None,
        Field(
            description="Represents the icon that is the target of the condition if the sorting is on the cell's icon."
        ),
    ] = None
    key: Annotated[
        float | None,
        Field(
            description='Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row).',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    sort_on: Annotated[
        str | None,
        Field(
            description='Represents the type of sorting of this condition. The possible values are: Value, CellColor, FontColor, Icon.'
        ),
    ] = None


class WorkbookTableRow(Entity):
    field_odata_type: str
    index: Annotated[
        float | None,
        Field(
            description='The index of the row within the rows collection of the table. Zero-based. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    values: Annotated[
        Any | None,
        Field(
            description='The raw values of the specified range. The data returned could be of type string, number, or a Boolean. Any cell that contain an error will return the error string.'
        ),
    ] = None


class WorkbookTableSort(Entity):
    field_odata_type: str
    fields: Annotated[
        List[WorkbookSortField] | None,
        Field(
            description='The list of the current conditions last used to sort the table. Read-only.'
        ),
    ] = None
    match_case: Annotated[
        bool | None,
        Field(
            description='Indicates whether the casing impacted the last sort of the table. Read-only.'
        ),
    ] = None
    method: Annotated[
        str | None,
        Field(
            description='The Chinese character ordering method last used to sort the table. The possible values are: PinYin, StrokeCount. Read-only.'
        ),
    ] = None


class WorkbookWorksheetProtectionOptions(BaseModel):
    field_odata_type: str
    allow_auto_filter: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing using auto filter feature.'
        ),
    ] = None
    allow_delete_columns: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing deleting columns.'
        ),
    ] = None
    allow_delete_rows: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing deleting rows.'
        ),
    ] = None
    allow_format_cells: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing formatting cells.'
        ),
    ] = None
    allow_format_columns: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing formatting columns.'
        ),
    ] = None
    allow_format_rows: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing formatting rows.'
        ),
    ] = None
    allow_insert_columns: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing inserting columns.'
        ),
    ] = None
    allow_insert_hyperlinks: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing inserting hyperlinks.'
        ),
    ] = None
    allow_insert_rows: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing inserting rows.'
        ),
    ] = None
    allow_pivot_tables: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing using pivot table feature.'
        ),
    ] = None
    allow_sort: Annotated[
        bool | None,
        Field(
            description='Represents the worksheet protection option of allowing using sort feature.'
        ),
    ] = None


class WorkingHours(BaseModel):
    field_odata_type: str
    days_of_week: Annotated[
        List[DayOfWeek | Dict[str, Any]] | None,
        Field(description='The days of the week on which the user works.'),
    ] = None
    end_time: Annotated[
        time | None,
        Field(
            description='The time of the day that the user stops working.',
            pattern='^([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?$',
        ),
    ] = None
    start_time: Annotated[
        time | None,
        Field(
            description='The time of the day that the user starts working.',
            pattern='^([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?$',
        ),
    ] = None
    time_zone: Annotated[
        TimeZoneBase | Dict[str, Any] | None,
        Field(description='The time zone to which the working hours apply.'),
    ] = None


class WorkingTimeSchedule(Entity):
    field_odata_type: str


class AgreementAcceptance(Entity):
    field_odata_type: str
    agreement_file_id: Annotated[
        str | None,
        Field(description='The identifier of the agreement file accepted by the user.'),
    ] = None
    agreement_id: Annotated[
        str | None, Field(description='The identifier of the agreement.')
    ] = None
    device_display_name: Annotated[
        str | None,
        Field(
            description='The display name of the device used for accepting the agreement.'
        ),
    ] = None
    device_id: Annotated[
        str | None,
        Field(
            description='The unique identifier of the device used for accepting the agreement. Supports $filter (eq) and eq for null values.'
        ),
    ] = None
    device_os_type: Annotated[
        str | None,
        Field(description='The operating system used to accept the agreement.'),
    ] = None
    device_os_version: Annotated[
        str | None,
        Field(
            description='The operating system version of the device used to accept the agreement.'
        ),
    ] = None
    expiration_date_time: Annotated[
        datetime | None,
        Field(
            description='The expiration date time of the acceptance. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ge, le) and eq for null values.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    recorded_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    state: Annotated[
        AgreementAcceptanceState | Dict[str, Any] | None,
        Field(
            description='The state of the agreement acceptance. Possible values are: accepted, declined. Supports $filter (eq).'
        ),
    ] = None
    user_display_name: Annotated[
        str | None,
        Field(description='Display name of the user when the acceptance was recorded.'),
    ] = None
    user_email: Annotated[
        str | None,
        Field(description='Email of the user when the acceptance was recorded.'),
    ] = None
    user_id: Annotated[
        str | None,
        Field(
            description='The identifier of the user who accepted the agreement. Supports $filter (eq).'
        ),
    ] = None
    user_principal_name: Annotated[
        str | None,
        Field(description='UPN of the user when the acceptance was recorded.'),
    ] = None


class ApplicationEnforcedRestrictionsSessionControl(ConditionalAccessSessionControl):
    field_odata_type: str


class Attachment(Entity):
    field_odata_type: str
    content_type: Annotated[str | None, Field(description='The MIME type.')] = None
    is_inline: Annotated[
        bool | None,
        Field(
            description='true if the attachment is an inline attachment; otherwise, false.'
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    name: Annotated[str | None, Field(description="The attachment's file name.")] = None
    size: Annotated[
        float | None,
        Field(
            description='The length of the attachment in bytes.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class AttachmentBase(Entity):
    field_odata_type: str
    content_type: Annotated[str | None, Field(description='The MIME type.')] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description="The display name of the attachment. This doesn't need to be the actual file name."
        ),
    ] = None
    size: Annotated[
        float | None,
        Field(
            description='The length of the attachment in bytes.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class AttachmentSession(Entity):
    field_odata_type: str
    content: Annotated[
        str | None, Field(description='The content streams that are uploaded.')
    ] = None
    expiration_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time in UTC when the upload session will expire. The complete file must be uploaded before this expiration time is reached.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    next_expected_ranges: Annotated[
        List[str] | None,
        Field(
            description='Indicates a single value {start} that represents the location in the file where the next upload should begin.'
        ),
    ] = None


class AttendanceRecord(Entity):
    field_odata_type: str
    attendance_intervals: Annotated[
        List[AttendanceInterval] | None,
        Field(
            description='List of time periods between joining and leaving a meeting.'
        ),
    ] = None
    email_address: Annotated[
        str | None,
        Field(
            description='Email address of the user associated with this attendance record.'
        ),
    ] = None
    identity: Annotated[
        Identity | Dict[str, Any] | None,
        Field(
            description='Identity of the user associated with this attendance record.'
        ),
    ] = None
    role: Annotated[
        str | None,
        Field(
            description='Role of the attendee. Possible values are: None, Attendee, Presenter, and Organizer.'
        ),
    ] = None
    total_attendance_in_seconds: Annotated[
        float | None,
        Field(
            description='Total duration of the attendances in seconds.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class AttendeeBase(Recipient):
    field_odata_type: str
    type: Annotated[
        AttendeeType | Dict[str, Any] | None,
        Field(
            description='The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.'
        ),
    ] = None


class AuthenticationCombinationConfiguration(Entity):
    field_odata_type: str
    applies_to_combinations: Annotated[
        List[AuthenticationMethodModes] | None,
        Field(
            description="Which authentication method combinations this configuration applies to. Must be an allowedCombinations object, part of the authenticationStrengthPolicy. The only possible value for fido2combinationConfigurations is 'fido2'."
        ),
    ] = None


class AuthenticationContextClassReference(Entity):
    field_odata_type: str
    description: Annotated[
        str | None,
        Field(
            description='A short explanation of the policies that are enforced by authenticationContextClassReference. This value should be used to provide secondary text to describe the authentication context class reference when building user-facing admin experiences. For example, a selection UX.'
        ),
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description='The display name is the friendly name of the authenticationContextClassReference object. This value should be used to identify the authentication context class reference when building user-facing admin experiences. For example, a selection UX.'
        ),
    ] = None
    is_available: Annotated[
        bool | None,
        Field(
            description="Indicates whether the authenticationContextClassReference has been published by the security admin and is ready for use by apps. When it's set to false, it shouldn't be shown in authentication context selection UX, or used to protect app resources. It's shown and available for Conditional Access policy authoring. The default value is false.  Supports $filter (eq)."
        ),
    ] = None


class AuthenticationMethod(Entity):
    field_odata_type: str


class AuthenticationStrengthPolicy(Entity):
    field_odata_type: str
    allowed_combinations: Annotated[
        List[AuthenticationMethodModes] | None,
        Field(
            description='A collection of authentication method modes that are required be used to satify this authentication strength.'
        ),
    ] = None
    combination_configurations: Annotated[
        List[AuthenticationCombinationConfiguration] | None,
        Field(
            description='Settings that may be used to require specific types or instances of an authentication method to be used when authenticating with a specified combination of authentication methods.'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The datetime when this policy was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    description: Annotated[
        str | None, Field(description='The human-readable description of this policy.')
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description='The human-readable display name of this policy. Supports $filter (eq, ne, not , and in).'
        ),
    ] = None
    modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The datetime when this policy was last modified.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    policy_type: AuthenticationStrengthPolicyType | None = None
    requirements_satisfied: AuthenticationStrengthRequirements | None = None


class AutomaticRepliesSetting(BaseModel):
    field_odata_type: str
    external_audience: Annotated[
        ExternalAudienceScope | Dict[str, Any] | None,
        Field(
            description="The set of audience external to the signed-in user's organization who will receive the ExternalReplyMessage, if Status is AlwaysEnabled or Scheduled. The possible values are: none, contactsOnly, all."
        ),
    ] = None
    external_reply_message: Annotated[
        str | None,
        Field(
            description='The automatic reply to send to the specified external audience, if Status is AlwaysEnabled or Scheduled.'
        ),
    ] = None
    internal_reply_message: Annotated[
        str | None,
        Field(
            description="The automatic reply to send to the audience internal to the signed-in user's organization, if Status is AlwaysEnabled or Scheduled."
        ),
    ] = None
    scheduled_end_date_time: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(
            description='The date and time that automatic replies are set to end, if Status is set to Scheduled.'
        ),
    ] = None
    scheduled_start_date_time: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(
            description='The date and time that automatic replies are set to begin, if Status is set to Scheduled.'
        ),
    ] = None
    status: Annotated[
        AutomaticRepliesStatus | Dict[str, Any] | None,
        Field(
            description='Configurations status for automatic replies. The possible values are: disabled, alwaysEnabled, scheduled.'
        ),
    ] = None


class BaseItemVersion(Entity):
    field_odata_type: str
    last_modified_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='Identity of the user which last modified the version. Read-only.'
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time the version was last modified. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    publication: Annotated[
        PublicationFacet | Dict[str, Any] | None,
        Field(
            description='Indicates the publication status of this particular version. Read-only.'
        ),
    ] = None


class CalendarPermission(Entity):
    field_odata_type: str
    allowed_roles: Annotated[
        List[CalendarRoleType | Dict[str, Any]] | None,
        Field(
            description='List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.'
        ),
    ] = None
    email_address: Annotated[
        EmailAddress | Dict[str, Any] | None,
        Field(
            description="Represents a share recipient or delegate who has access to the calendar. For the 'My Organization' share recipient, the address property is null. Read-only."
        ),
    ] = None
    is_inside_organization: Annotated[
        bool | None,
        Field(
            description='True if the user in context (recipient or delegate) is inside the same organization as the calendar owner.'
        ),
    ] = None
    is_removable: Annotated[
        bool | None,
        Field(
            description="True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar."
        ),
    ] = None
    role: Annotated[
        CalendarRoleType | Dict[str, Any] | None,
        Field(
            description='Current permission level of the calendar share recipient or delegate.'
        ),
    ] = None


class CallRecording(Entity):
    field_odata_type: str
    call_id: Annotated[
        str | None,
        Field(
            description='The unique identifier for the call that is related to this recording. Read-only.'
        ),
    ] = None
    content: Annotated[
        str | None, Field(description='The content of the recording. Read-only.')
    ] = None
    content_correlation_id: Annotated[
        str | None,
        Field(
            description='The unique identifier that links the transcript with its corresponding recording. Read-only.'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time at which the recording was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    end_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time at which the recording ends. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    meeting_id: Annotated[
        str | None,
        Field(
            description='The unique identifier of the onlineMeeting related to this recording. Read-only.'
        ),
    ] = None
    meeting_organizer: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='The identity information of the organizer of the onlineMeeting related to this recording. Read-only.'
        ),
    ] = None
    recording_content_url: Annotated[
        str | None,
        Field(
            description='The URL that can be used to access the content of the recording. Read-only.'
        ),
    ] = None


class CallTranscript(Entity):
    field_odata_type: str
    call_id: Annotated[
        str | None,
        Field(
            description='The unique identifier for the call that is related to this transcript. Read-only.'
        ),
    ] = None
    content: Annotated[
        str | None, Field(description='The content of the transcript. Read-only.')
    ] = None
    content_correlation_id: Annotated[
        str | None,
        Field(
            description='The unique identifier that links the transcript with its corresponding recording. Read-only.'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time at which the transcript was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    end_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time at which the transcription ends. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    meeting_id: Annotated[
        str | None,
        Field(
            description='The unique identifier of the online meeting related to this transcript. Read-only.'
        ),
    ] = None
    meeting_organizer: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='The identity information of the organizer of the onlineMeeting related to this transcript. Read-only.'
        ),
    ] = None
    metadata_content: Annotated[
        str | None,
        Field(
            description='The time-aligned metadata of the utterances in the transcript. Read-only.'
        ),
    ] = None
    transcript_content_url: Annotated[
        str | None,
        Field(
            description='The URL that can be used to access the content of the transcript. Read-only.'
        ),
    ] = None


class ChangeTrackedEntity(Entity):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_modified_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='Identity of the person who last modified the entity.'),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class ChatMessageFromIdentitySet(IdentitySet):
    field_odata_type: str


class ChatMessageHostedContent(TeamworkHostedContent):
    field_odata_type: str


class ChatMessageInfo(Entity):
    field_odata_type: str
    body: Annotated[
        ItemBody | Dict[str, Any] | None,
        Field(
            description="Body of the chatMessage. This will still contain markers for @mentions and attachments even though the object doesn't return @mentions and attachments."
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Date time object representing the time at which message was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    event_detail: Annotated[
        EventMessageDetail | Dict[str, Any] | None,
        Field(
            description='Read-only.  If present, represents details of an event that happened in a chat, a channel, or a team, for example, members were added, and so on. For event messages, the messageType property is set to systemEventMessage.'
        ),
    ] = None
    from_: Annotated[
        ChatMessageFromIdentitySet | Dict[str, Any] | None,
        Field(description='Information about the sender of the message.'),
    ] = None
    is_deleted: Annotated[
        bool | None,
        Field(description='If set to true, the original message has been deleted.'),
    ] = None
    message_type: ChatMessageType | None = None


class ChatMessagePolicyViolation(BaseModel):
    field_odata_type: str
    dlp_action: Annotated[
        ChatMessagePolicyViolationDlpActionTypes | Dict[str, Any] | None,
        Field(
            description='The action taken by the DLP provider on the message with sensitive content. Supported values are: NoneNotifySender -- Inform the sender of the violation but allow readers to read the message.BlockAccess -- Block readers from reading the message.BlockAccessExternal -- Block users outside the organization from reading the message, while allowing users within the organization to read the message.'
        ),
    ] = None
    justification_text: Annotated[
        str | None,
        Field(
            description='Justification text provided by the sender of the message when overriding a policy violation.'
        ),
    ] = None
    policy_tip: Annotated[
        ChatMessagePolicyViolationPolicyTip | Dict[str, Any] | None,
        Field(
            description='Information to display to the message sender about why the message was flagged as a violation.'
        ),
    ] = None
    user_action: Annotated[
        ChatMessagePolicyViolationUserActionTypes | Dict[str, Any] | None,
        Field(
            description="Indicates the action taken by the user on a message blocked by the DLP provider. Supported values are: NoneOverrideReportFalsePositiveWhen the DLP provider is updating the message for blocking sensitive content, userAction isn't required."
        ),
    ] = None
    verdict_details: Annotated[
        ChatMessagePolicyViolationVerdictDetailsTypes | Dict[str, Any] | None,
        Field(
            description='Indicates what actions the sender may take in response to the policy violation. Supported values are: NoneAllowFalsePositiveOverride -- Allows the sender to declare the policyViolation to be an error in the DLP app and its rules, and allow readers to see the message again if the dlpAction hides it.AllowOverrideWithoutJustification -- Allows the sender to override the DLP violation and allow readers to see the message again if the dlpAction hides it, without needing to provide an explanation for doing so. AllowOverrideWithJustification -- Allows the sender to override the DLP violation and allow readers to see the message again if the dlpAction hides it, after providing an explanation for doing so.AllowOverrideWithoutJustification and AllowOverrideWithJustification are mutually exclusive.'
        ),
    ] = None


class ChatMessageReactionIdentitySet(IdentitySet):
    field_odata_type: str


class ChecklistItem(Entity):
    field_odata_type: str
    checked_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the checklistItem was finished.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the checklistItem was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    display_name: Annotated[
        str | None, Field(description='Indicates the title of the checklistItem.')
    ] = None
    is_checked: Annotated[
        bool | None,
        Field(
            description='State that indicates whether the item is checked off or not.'
        ),
    ] = None


class CloudAppSecuritySessionControl(ConditionalAccessSessionControl):
    field_odata_type: str
    cloud_app_security_type: Annotated[
        CloudAppSecuritySessionControlType | Dict[str, Any] | None,
        Field(
            description='Possible values are: mcasConfigured, monitorOnly, blockDownloads, unknownFutureValue. For more information, see Deploy Conditional Access App Control for featured apps.'
        ),
    ] = None


class CloudClipboardItem(Entity):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Set by the server. DateTime in UTC when the object was created on the server.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    expiration_date_time: Annotated[
        datetime | None,
        Field(
            description='Set by the server. DateTime in UTC when the object expires and after that the object is no longer available. The default and also maximum TTL is 12 hours after the creation, but it might change for performance optimization.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description="Set by the server if not provided in the client's request. DateTime in UTC when the object was modified by the client.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    payloads: Annotated[
        List[CloudClipboardItemPayload] | None,
        Field(
            description='A cloudClipboardItem can have multiple cloudClipboardItemPayload objects in the payloads. A window can place more than one clipboard object on the clipboard. Each one represents the same information in a different clipboard format.'
        ),
    ] = None


class CloudClipboardRoot(Entity):
    field_odata_type: str
    items: Annotated[
        List[CloudClipboardItem] | None,
        Field(description='Represents a collection of Cloud Clipboard items.'),
    ] = None


class ColumnLink(Entity):
    field_odata_type: str
    name: Annotated[
        str | None, Field(description='The name of the column  in this content type.')
    ] = None


class ColumnValidation(BaseModel):
    field_odata_type: str
    default_language: Annotated[
        str | None,
        Field(description='Default BCP 47 language tag for the description.'),
    ] = None
    descriptions: Annotated[
        List[DisplayNameLocalization] | None,
        Field(
            description="Localized messages that explain what is needed for this column's value to be considered valid. User will be prompted with this message if validation fails."
        ),
    ] = None
    formula: Annotated[
        str | None,
        Field(
            description='The formula to validate column value. For examples, see Examples of common formulas in lists.'
        ),
    ] = None


class ConditionalAccessAuthenticationFlows(BaseModel):
    field_odata_type: str
    transfer_methods: ConditionalAccessTransferMethods | None = None


class ConditionalAccessExternalTenants(BaseModel):
    field_odata_type: str
    membership_kind: Annotated[
        ConditionalAccessExternalTenantsMembershipKind | Dict[str, Any] | None,
        Field(
            description='The membership kind. Possible values are: all, enumerated, unknownFutureValue. The enumerated member references an conditionalAccessEnumeratedExternalTenants object.'
        ),
    ] = None


class ConditionalAccessFilter(BaseModel):
    field_odata_type: str
    mode: FilterMode | None = None
    rule: Annotated[
        str | None,
        Field(
            description='Rule syntax is similar to that used for membership rules for groups in Microsoft Entra ID. For details, see rules with multiple expressions'
        ),
    ] = None


class ConditionalAccessGrantControls(BaseModel):
    field_odata_type: str
    authentication_strength: AuthenticationStrengthPolicy | Dict[str, Any] | None = None
    built_in_controls: Annotated[
        List[ConditionalAccessGrantControl] | None,
        Field(
            description='List of values of built-in controls required by the policy. Possible values: block, mfa, compliantDevice, domainJoinedDevice, approvedApplication, compliantApplication, passwordChange, unknownFutureValue.'
        ),
    ] = None
    custom_authentication_factors: Annotated[
        List[str] | None,
        Field(
            description='List of custom controls IDs required by the policy. For more information, see Custom controls.'
        ),
    ] = None
    operator: Annotated[
        str | None,
        Field(
            description='Defines the relationship of the grant controls. Possible values: AND, OR.'
        ),
    ] = None
    terms_of_use: Annotated[
        List[str] | None,
        Field(description='List of terms of use IDs required by the policy.'),
    ] = None


class ConditionalAccessGuestsOrExternalUsers(BaseModel):
    field_odata_type: str
    external_tenants: Annotated[
        ConditionalAccessExternalTenants | Dict[str, Any] | None,
        Field(
            description="The tenant IDs of the selected types of external users. Either all B2B tenant or a collection of tenant IDs. External tenants can be specified only when the property guestOrExternalUserTypes isn't null or an empty String."
        ),
    ] = None
    guest_or_external_user_types: ConditionalAccessGuestOrExternalUserTypes | None = (
        None
    )


class ConditionalAccessUsers(BaseModel):
    field_odata_type: str
    exclude_groups: Annotated[
        List[str] | None, Field(description='Group IDs excluded from scope of policy.')
    ] = None
    exclude_guests_or_external_users: Annotated[
        ConditionalAccessGuestsOrExternalUsers | Dict[str, Any] | None,
        Field(
            description='Internal guests or external users excluded from the policy scope. Optionally populated.'
        ),
    ] = None
    exclude_roles: Annotated[
        List[str] | None, Field(description='Role IDs excluded from scope of policy.')
    ] = None
    exclude_users: Annotated[
        List[str] | None,
        Field(
            description='User IDs excluded from scope of policy and/or GuestsOrExternalUsers.'
        ),
    ] = None
    include_groups: Annotated[
        List[str] | None,
        Field(description='Group IDs in scope of policy unless explicitly excluded.'),
    ] = None
    include_guests_or_external_users: Annotated[
        ConditionalAccessGuestsOrExternalUsers | Dict[str, Any] | None,
        Field(
            description='Internal guests or external users included in the policy scope. Optionally populated.'
        ),
    ] = None
    include_roles: Annotated[
        List[str] | None,
        Field(description='Role IDs in scope of policy unless explicitly excluded.'),
    ] = None
    include_users: Annotated[
        List[str] | None,
        Field(
            description='User IDs in scope of policy unless explicitly excluded, None, All, or GuestsOrExternalUsers.'
        ),
    ] = None


class Contact(OutlookItem):
    field_odata_type: str
    assistant_name: Annotated[
        str | None, Field(description="The name of the contact's assistant.")
    ] = None
    birthday: Annotated[
        datetime | None,
        Field(
            description="The contact's birthday. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    business_address: Annotated[
        PhysicalAddress | Dict[str, Any] | None,
        Field(description="The contact's business address."),
    ] = None
    business_home_page: Annotated[
        str | None, Field(description='The business home page of the contact.')
    ] = None
    business_phones: Annotated[
        List[str] | None, Field(description="The contact's business phone numbers.")
    ] = None
    children: Annotated[
        List[str] | None, Field(description="The names of the contact's children.")
    ] = None
    company_name: Annotated[
        str | None, Field(description="The name of the contact's company.")
    ] = None
    department: Annotated[
        str | None, Field(description="The contact's department.")
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description="The contact's display name. You can specify the display name in a create or update operation. Note that later updates to other properties may cause an automatically generated value to overwrite the displayName value you have specified. To preserve a pre-existing value, always include it as displayName in an update operation."
        ),
    ] = None
    email_addresses: Annotated[
        List[EmailAddress] | None, Field(description="The contact's email addresses.")
    ] = None
    extensions: Annotated[
        List[Extension] | None,
        Field(
            description='The collection of open extensions defined for the contact. Read-only. Nullable.'
        ),
    ] = None
    file_as: Annotated[
        str | None, Field(description='The name the contact is filed under.')
    ] = None
    generation: Annotated[str | None, Field(description="The contact's suffix.")] = None
    given_name: Annotated[
        str | None, Field(description="The contact's given name.")
    ] = None
    home_address: Annotated[
        PhysicalAddress | Dict[str, Any] | None,
        Field(description="The contact's home address."),
    ] = None
    home_phones: Annotated[
        List[str] | None, Field(description="The contact's home phone numbers.")
    ] = None
    im_addresses: Annotated[
        List[str] | None,
        Field(description="The contact's instant messaging (IM) addresses."),
    ] = None
    initials: Annotated[str | None, Field(description="The contact's initials.")] = None
    job_title: Annotated[str | None, Field(description='The contact’s job title.')] = (
        None
    )
    manager: Annotated[
        str | None, Field(description="The name of the contact's manager.")
    ] = None
    middle_name: Annotated[
        str | None, Field(description="The contact's middle name.")
    ] = None
    mobile_phone: Annotated[
        str | None, Field(description="The contact's mobile phone number.")
    ] = None
    multi_value_extended_properties: Annotated[
        List[MultiValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of multi-value extended properties defined for the contact. Read-only. Nullable.'
        ),
    ] = None
    nick_name: Annotated[str | None, Field(description="The contact's nickname.")] = (
        None
    )
    office_location: Annotated[
        str | None, Field(description="The location of the contact's office.")
    ] = None
    other_address: Annotated[
        PhysicalAddress | Dict[str, Any] | None,
        Field(description='Other addresses for the contact.'),
    ] = None
    parent_folder_id: Annotated[
        str | None, Field(description="The ID of the contact's parent folder.")
    ] = None
    personal_notes: Annotated[
        str | None, Field(description="The user's notes about the contact.")
    ] = None
    photo: Annotated[
        ProfilePhoto | Dict[str, Any] | None,
        Field(
            description='Optional contact picture. You can get or set a photo for a contact.'
        ),
    ] = None
    profession: Annotated[
        str | None, Field(description="The contact's profession.")
    ] = None
    single_value_extended_properties: Annotated[
        List[SingleValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of single-value extended properties defined for the contact. Read-only. Nullable.'
        ),
    ] = None
    spouse_name: Annotated[
        str | None, Field(description="The name of the contact's spouse/partner.")
    ] = None
    surname: Annotated[str | None, Field(description="The contact's surname.")] = None
    title: Annotated[str | None, Field(description="The contact's title.")] = None
    yomi_company_name: Annotated[
        str | None,
        Field(description='The phonetic Japanese company name of the contact.'),
    ] = None
    yomi_given_name: Annotated[
        str | None,
        Field(
            description='The phonetic Japanese given name (first name) of the contact.'
        ),
    ] = None
    yomi_surname: Annotated[
        str | None,
        Field(description='The phonetic Japanese surname (last name)  of the contact.'),
    ] = None


class ContactFolder(Entity):
    field_odata_type: str
    child_folders: Annotated[
        List[ContactFolder] | None,
        Field(
            description='The collection of child folders in the folder. Navigation property. Read-only. Nullable.'
        ),
    ] = None
    contacts: Annotated[
        List[Contact] | None,
        Field(
            description='The contacts in the folder. Navigation property. Read-only. Nullable.'
        ),
    ] = None
    display_name: Annotated[
        str | None, Field(description="The folder's display name.")
    ] = None
    multi_value_extended_properties: Annotated[
        List[MultiValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.'
        ),
    ] = None
    parent_folder_id: Annotated[
        str | None, Field(description="The ID of the folder's parent folder.")
    ] = None
    single_value_extended_properties: Annotated[
        List[SingleValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable.'
        ),
    ] = None


class ConversationMember(Entity):
    field_odata_type: str
    display_name: Annotated[
        str | None, Field(description='The display name of the user.')
    ] = None
    roles: Annotated[
        List[str] | None,
        Field(
            description="The roles for that user. This property contains more qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member shouldn't have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role."
        ),
    ] = None
    visible_history_start_date_time: Annotated[
        datetime | None,
        Field(
            description="The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class CountryNamedLocation(NamedLocation):
    field_odata_type: str
    countries_and_regions: Annotated[
        List[str] | None,
        Field(
            description='List of countries and/or regions in two-letter format specified by ISO 3166-2. Required.'
        ),
    ] = None
    country_lookup_method: Annotated[
        CountryLookupMethodType | Dict[str, Any] | None,
        Field(
            description='Determines what method is used to decide which country the user is located in. Possible values are clientIpAddress(default) and authenticatorAppGps. Note: authenticatorAppGps is not yet supported in the Microsoft Cloud for US Government.'
        ),
    ] = None
    include_unknown_countries_and_regions: Annotated[
        bool | None,
        Field(
            description="true if IP addresses that don't map to a country or region should be included in the named location. Optional. Default value is false."
        ),
    ] = None


class DeviceCategory(Entity):
    field_odata_type: str
    description: Annotated[
        str | None, Field(description='Optional description for the device category.')
    ] = None
    display_name: Annotated[
        str | None, Field(description='Display name for the device category.')
    ] = None


class DeviceLogCollectionResponse(Entity):
    field_odata_type: str
    enrolled_by_user: Annotated[
        str | None,
        Field(
            description='The User Principal Name (UPN) of the user that enrolled the device.'
        ),
    ] = None
    expiration_date_time_utc: Annotated[
        datetime | None,
        Field(
            description='The DateTime of the expiration of the logs.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    initiated_by_user_principal_name: Annotated[
        str | None, Field(description='The UPN for who initiated the request.')
    ] = None
    managed_device_id: Annotated[
        UUID | None,
        Field(
            description='Indicates Intune device unique identifier.',
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        ),
    ] = None
    received_date_time_utc: Annotated[
        datetime | None,
        Field(
            description='The DateTime the request was received.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    requested_date_time_utc: Annotated[
        datetime | None,
        Field(
            description='The DateTime of the request.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    size_in_kb: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='The size of the logs in KB. Valid values -1.79769313486232E+308 to 1.79769313486232E+308'
        ),
    ] = None
    status: AppLogUploadState | None = None


class DeviceManagementTroubleshootingEvent(Entity):
    field_odata_type: str
    correlation_id: Annotated[
        str | None, Field(description='Id used for tracing the failure in the service.')
    ] = None
    event_date_time: Annotated[
        datetime | None,
        Field(
            description='Time when the event occurred .',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class DirectoryObject(Entity):
    field_odata_type: str
    deleted_date_time: Annotated[
        datetime | None,
        Field(
            description="Date and time when this object was deleted. Always null when the object hasn't been deleted.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class DriveItemVersion(BaseItemVersion):
    field_odata_type: str
    content: Annotated[
        str | None,
        Field(description='The content stream for this version of the item.'),
    ] = None
    size: Annotated[
        float | None,
        Field(
            description='Indicates the size of the content stream for this version of the item.'
        ),
    ] = None


class EmailAuthenticationMethod(AuthenticationMethod):
    field_odata_type: str
    email_address: Annotated[
        str | None, Field(description='The email address registered to this user.')
    ] = None


class EmployeeExperienceUser(Entity):
    field_odata_type: str
    learning_course_activities: List[LearningCourseActivity] | None = None


class Fido2AuthenticationMethod(AuthenticationMethod):
    field_odata_type: str
    aa_guid: Annotated[
        str | None,
        Field(
            description='Authenticator Attestation GUID, an identifier that indicates the type (e.g. make and model) of the authenticator.'
        ),
    ] = None
    attestation_certificates: Annotated[
        List[str] | None,
        Field(
            description='The attestation certificate(s) attached to this security key.'
        ),
    ] = None
    attestation_level: Annotated[
        AttestationLevel | Dict[str, Any] | None,
        Field(
            description='The attestation level of this FIDO2 security key. Possible values are: attested, or notAttested.'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The timestamp when this key was registered to the user.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    display_name: Annotated[
        str | None,
        Field(description='The display name of the key as given by the user.'),
    ] = None
    model: Annotated[
        str | None,
        Field(description='The manufacturer-assigned model of the FIDO2 security key.'),
    ] = None


class File(BaseModel):
    field_odata_type: str
    hashes: Annotated[
        Hashes | Dict[str, Any] | None,
        Field(
            description="Hashes of the file's binary content, if available. Read-only."
        ),
    ] = None
    mime_type: Annotated[
        str | None,
        Field(
            description='The MIME type for the file. This is determined by logic on the server and might not be the value provided when the file was uploaded. Read-only.'
        ),
    ] = None
    processing_metadata: bool | None = None


class Folder(BaseModel):
    field_odata_type: str
    child_count: Annotated[
        float | None,
        Field(
            description='Number of children contained immediately within this container.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    view: Annotated[
        FolderView | Dict[str, Any] | None,
        Field(
            description='A collection of properties defining the recommended view for the folder.'
        ),
    ] = None


class FollowupFlag(BaseModel):
    field_odata_type: str
    completed_date_time: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(description='The date and time that the follow-up was finished.'),
    ] = None
    due_date_time: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(
            description='The date and time that the follow-up is to be finished. Note: To set the due date, you must also specify the startDateTime; otherwise, you get a 400 Bad Request response.'
        ),
    ] = None
    flag_status: Annotated[
        FollowupFlagStatus | Dict[str, Any] | None,
        Field(
            description='The status for follow-up for an item. Possible values are notFlagged, complete, and flagged.'
        ),
    ] = None
    start_date_time: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(description='The date and time that the follow-up is to begin.'),
    ] = None


class GroupSetting(Entity):
    field_odata_type: str
    display_name: Annotated[
        str | None,
        Field(
            description='Display name of this group of settings, which comes from the associated template.'
        ),
    ] = None
    template_id: Annotated[
        str | None,
        Field(
            description="Unique identifier for the tenant-level groupSettingTemplates object that's been customized for this group-level settings object. Read-only."
        ),
    ] = None
    values: Annotated[
        List[SettingValue] | None,
        Field(
            description='Collection of name-value pairs corresponding to the name and defaultValue properties in the referenced groupSettingTemplates object.'
        ),
    ] = None


class InferenceClassificationOverride(Entity):
    field_odata_type: str
    classify_as: Annotated[
        InferenceClassificationType | Dict[str, Any] | None,
        Field(
            description='Specifies how incoming messages from a specific sender should always be classified as. The possible values are: focused, other.'
        ),
    ] = None
    sender_email_address: Annotated[
        EmailAddress | Dict[str, Any] | None,
        Field(
            description='The email address information of the sender for whom the override is created.'
        ),
    ] = None


class IpNamedLocation(NamedLocation):
    field_odata_type: str
    ip_ranges: Annotated[
        List[IpRange] | None,
        Field(
            description='List of IP address ranges in IPv4 CIDR format (for example, 1.2.3.4/32) or any allowable IPv6 format from IETF RFC5969. Required.'
        ),
    ] = None
    is_trusted: Annotated[
        bool | None,
        Field(
            description='true if this location is explicitly trusted. Optional. Default value is false.'
        ),
    ] = None


class ItemReference(BaseModel):
    field_odata_type: str
    drive_id: Annotated[
        str | None,
        Field(
            description='Unique identifier of the drive instance that contains the driveItem. Only returned if the item is located in a drive. Read-only.'
        ),
    ] = None
    drive_type: Annotated[
        str | None,
        Field(
            description='Identifies the type of drive. Only returned if the item is located in a drive. See drive resource for values.'
        ),
    ] = None
    id: Annotated[
        str | None,
        Field(
            description='Unique identifier of the driveItem in the drive or a listItem in a list. Read-only.'
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(description='The name of the item being referenced. Read-only.'),
    ] = None
    path: Annotated[
        str | None,
        Field(
            description='Percent-encoded path that can be used to navigate to the item. Read-only.'
        ),
    ] = None
    share_id: Annotated[
        str | None,
        Field(
            description='A unique identifier for a shared resource that can be accessed via the Shares API.'
        ),
    ] = None
    sharepoint_ids: Annotated[
        SharepointIds | Dict[str, Any] | None,
        Field(
            description='Returns identifiers useful for SharePoint REST compatibility. Read-only.'
        ),
    ] = None
    site_id: Annotated[
        str | None,
        Field(
            description='For OneDrive for Business and SharePoint, this property represents the ID of the site that contains the parent document library of the driveItem resource or the parent list of the listItem resource. The value is the same as the id property of that site resource. It is an opaque string that consists of three identifiers of the site. For OneDrive, this property is not populated.'
        ),
    ] = None


class LicenseDetails(Entity):
    field_odata_type: str
    service_plans: Annotated[
        List[ServicePlanInfo] | None,
        Field(
            description='Information about the service plans assigned with the license. Read-only. Not nullable.'
        ),
    ] = None
    sku_id: Annotated[
        UUID | None,
        Field(
            description='Unique identifier (GUID) for the service SKU. Equal to the skuId property on the related subscribedSku object. Read-only.',
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        ),
    ] = None
    sku_part_number: Annotated[
        str | None,
        Field(
            description='Unique SKU display name. Equal to the skuPartNumber on the related subscribedSku object; for example, AAD_Premium. Read-only.'
        ),
    ] = None


class ListItemVersion(BaseItemVersion):
    field_odata_type: str
    fields: Annotated[
        FieldValueSet | Dict[str, Any] | None,
        Field(
            description='A collection of the fields and values for this version of the list item.'
        ),
    ] = None


class Location(BaseModel):
    field_odata_type: str
    address: Annotated[
        PhysicalAddress | Dict[str, Any] | None,
        Field(description='The street address of the location.'),
    ] = None
    coordinates: Annotated[
        OutlookGeoCoordinates | Dict[str, Any] | None,
        Field(description='The geographic coordinates and elevation of the location.'),
    ] = None
    display_name: Annotated[
        str | None, Field(description='The name associated with the location.')
    ] = None
    location_email_address: Annotated[
        str | None, Field(description='Optional email address of the location.')
    ] = None
    location_type: Annotated[
        LocationType | Dict[str, Any] | None,
        Field(
            description='The type of location. The possible values are: default, conferenceRoom, homeAddress, businessAddress,geoCoordinates, streetAddress, hotel, restaurant, localBusiness, postalAddress. Read-only.'
        ),
    ] = None
    location_uri: Annotated[
        str | None, Field(description='Optional URI representing the location.')
    ] = None
    unique_id: Annotated[str | None, Field(description='For internal use only.')] = None
    unique_id_type: Annotated[
        LocationUniqueIdType | Dict[str, Any] | None,
        Field(description='For internal use only.'),
    ] = None


class LongRunningOperation(Entity):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_action_date_time: Annotated[
        datetime | None,
        Field(
            description='The time of the last action in the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    resource_location: Annotated[
        str | None,
        Field(description='URI of the resource that the operation is performed on.'),
    ] = None
    status: Annotated[
        LongRunningOperationStatus | Dict[str, Any] | None,
        Field(
            description='The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue.'
        ),
    ] = None
    status_detail: Annotated[
        str | None, Field(description='Details about the status of the operation.')
    ] = None


class MailboxSettings(BaseModel):
    field_odata_type: str
    archive_folder: Annotated[
        str | None, Field(description='Folder ID of an archive folder for the user.')
    ] = None
    automatic_replies_setting: Annotated[
        AutomaticRepliesSetting | Dict[str, Any] | None,
        Field(
            description='Configuration settings to automatically notify the sender of an incoming email with a message from the signed-in user.'
        ),
    ] = None
    date_format: Annotated[
        str | None, Field(description="The date format for the user's mailbox.")
    ] = None
    delegate_meeting_message_delivery_options: Annotated[
        DelegateMeetingMessageDeliveryOptions | Dict[str, Any] | None,
        Field(
            description='If the user has a calendar delegate, this specifies whether the delegate, mailbox owner, or both receive meeting messages and meeting responses. Possible values are: sendToDelegateAndInformationToPrincipal, sendToDelegateAndPrincipal, sendToDelegateOnly.'
        ),
    ] = None
    language: Annotated[
        LocaleInfo | Dict[str, Any] | None,
        Field(
            description='The locale information for the user, including the preferred language and country/region.'
        ),
    ] = None
    time_format: Annotated[
        str | None, Field(description="The time format for the user's mailbox.")
    ] = None
    time_zone: Annotated[
        str | None, Field(description="The default time zone for the user's mailbox.")
    ] = None
    user_purpose: Annotated[
        UserPurpose | Dict[str, Any] | None,
        Field(
            description='The purpose of the mailbox. Differentiates a mailbox for a single user from a shared mailbox and equipment mailbox in Exchange Online. Possible values are: user, linked, shared, room, equipment, others, unknownFutureValue. Read-only.'
        ),
    ] = None
    working_hours: Annotated[
        WorkingHours | Dict[str, Any] | None,
        Field(
            description='The days of the week and hours in a specific time zone that the user works.'
        ),
    ] = None


class ManagedAppRegistration(Entity):
    field_odata_type: str
    app_identifier: Annotated[
        MobileAppIdentifier | Dict[str, Any] | None,
        Field(description='The app package Identifier'),
    ] = None
    application_version: Annotated[str | None, Field(description='App version')] = None
    applied_policies: Annotated[
        List[ManagedAppPolicy] | None,
        Field(
            description='Zero or more policys already applied on the registered app when it last synchronized with managment service.'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time of creation',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    device_name: Annotated[str | None, Field(description='Host device name')] = None
    device_tag: Annotated[
        str | None,
        Field(
            description='App management SDK generated tag, which helps relate apps hosted on the same device. Not guaranteed to relate apps in all conditions.'
        ),
    ] = None
    device_type: Annotated[str | None, Field(description='Host device type')] = None
    flagged_reasons: Annotated[
        List[ManagedAppFlaggedReason] | None,
        Field(
            description='Zero or more reasons an app registration is flagged. E.g. app running on rooted device'
        ),
    ] = None
    intended_policies: Annotated[
        List[ManagedAppPolicy] | None,
        Field(
            description='Zero or more policies admin intended for the app as of now.'
        ),
    ] = None
    last_sync_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time of last the app synced with management service.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    management_sdk_version: Annotated[
        str | None, Field(description='App management SDK version')
    ] = None
    operations: Annotated[
        List[ManagedAppOperation] | None,
        Field(
            description='Zero or more long running operations triggered on the app registration.'
        ),
    ] = None
    platform_version: Annotated[
        str | None, Field(description='Operating System version')
    ] = None
    user_id: Annotated[
        str | None,
        Field(description='The user Id to who this app registration belongs.'),
    ] = None
    version: Annotated[str | None, Field(description='Version of the entity.')] = None


class MeetingAttendanceReport(Entity):
    field_odata_type: str
    attendance_records: Annotated[
        List[AttendanceRecord] | None,
        Field(
            description='List of attendance records of an attendance report. Read-only.'
        ),
    ] = None
    meeting_end_date_time: Annotated[
        datetime | None,
        Field(
            description='UTC time when the meeting ended. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    meeting_start_date_time: Annotated[
        datetime | None,
        Field(
            description='UTC time when the meeting started. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    total_participant_count: Annotated[
        float | None,
        Field(
            description='Total number of participants. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class MeetingParticipantInfo(BaseModel):
    field_odata_type: str
    identity: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='Identity information of the participant.'),
    ] = None
    role: Annotated[
        OnlineMeetingRole | Dict[str, Any] | None,
        Field(description="Specifies the participant's role in the meeting."),
    ] = None
    upn: Annotated[
        str | None, Field(description='User principal name of the participant.')
    ] = None


class MeetingParticipants(BaseModel):
    field_odata_type: str
    attendees: Annotated[
        List[MeetingParticipantInfo] | None,
        Field(description='Information about the meeting attendees.'),
    ] = None
    organizer: Annotated[
        MeetingParticipantInfo | Dict[str, Any] | None,
        Field(description='Information about the meeting organizer.'),
    ] = None


class Message(OutlookItem):
    field_odata_type: str
    attachments: Annotated[
        List[Attachment] | None,
        Field(
            description='The fileAttachment and itemAttachment attachments for the message.'
        ),
    ] = None
    bcc_recipients: Annotated[
        List[Recipient] | None,
        Field(description='The Bcc: recipients for the message.'),
    ] = None
    body: Annotated[
        ItemBody | Dict[str, Any] | None,
        Field(
            description='The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body.'
        ),
    ] = None
    body_preview: Annotated[
        str | None,
        Field(
            description='The first 255 characters of the message body. It is in text format.'
        ),
    ] = None
    cc_recipients: Annotated[
        List[Recipient] | None, Field(description='The Cc: recipients for the message.')
    ] = None
    conversation_id: Annotated[
        str | None,
        Field(description='The ID of the conversation the email belongs to.'),
    ] = None
    conversation_index: Annotated[
        str | None,
        Field(
            description='Indicates the position of the message within the conversation.'
        ),
    ] = None
    extensions: Annotated[
        List[Extension] | None,
        Field(
            description='The collection of open extensions defined for the message. Nullable.'
        ),
    ] = None
    flag: Annotated[
        FollowupFlag | Dict[str, Any] | None,
        Field(
            description='The flag value that indicates the status, start date, due date, or completion date for the message.'
        ),
    ] = None
    from_: Annotated[
        Recipient | Dict[str, Any] | None,
        Field(
            description='The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.'
        ),
    ] = None
    has_attachments: Annotated[
        bool | None,
        Field(
            description="Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>."
        ),
    ] = None
    importance: Annotated[
        Importance | Dict[str, Any] | None,
        Field(
            description='The importance of the message. The possible values are: low, normal, and high.'
        ),
    ] = None
    inference_classification: Annotated[
        InferenceClassificationType | Dict[str, Any] | None,
        Field(
            description='The classification of the message for the user, based on inferred relevance or importance, or on an explicit override. The possible values are: focused or other.'
        ),
    ] = None
    internet_message_headers: Annotated[
        List[InternetMessageHeader] | None,
        Field(
            description='A collection of message headers defined by RFC5322. The set includes message headers indicating the network path taken by a message from the sender to the recipient. It can also contain custom message headers that hold app data for the message.  Returned only on applying a $select query option. Read-only.'
        ),
    ] = None
    internet_message_id: Annotated[
        str | None,
        Field(description='The message ID in the format specified by RFC2822.'),
    ] = None
    is_delivery_receipt_requested: Annotated[
        bool | None,
        Field(
            description='Indicates whether a read receipt is requested for the message.'
        ),
    ] = None
    is_draft: Annotated[
        bool | None,
        Field(
            description="Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet."
        ),
    ] = None
    is_read: Annotated[
        bool | None, Field(description='Indicates whether the message has been read.')
    ] = None
    is_read_receipt_requested: Annotated[
        bool | None,
        Field(
            description='Indicates whether a read receipt is requested for the message.'
        ),
    ] = None
    multi_value_extended_properties: Annotated[
        List[MultiValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of multi-value extended properties defined for the message. Nullable.'
        ),
    ] = None
    parent_folder_id: Annotated[
        str | None,
        Field(description="The unique identifier for the message's parent mailFolder."),
    ] = None
    received_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time the message was received.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    reply_to: Annotated[
        List[Recipient] | None,
        Field(description='The email addresses to use when replying.'),
    ] = None
    sender: Annotated[
        Recipient | Dict[str, Any] | None,
        Field(
            description='The account that is actually used to generate the message. In most cases, this value is the same as the from property. You can set this property to a different value when sending a message from a shared mailbox, for a shared calendar, or as a delegate. In any case, the value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.'
        ),
    ] = None
    sent_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time the message was sent.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    single_value_extended_properties: Annotated[
        List[SingleValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of single-value extended properties defined for the message. Nullable.'
        ),
    ] = None
    subject: Annotated[str | None, Field(description='The subject of the message.')] = (
        None
    )
    to_recipients: Annotated[
        List[Recipient] | None, Field(description='The To: recipients for the message.')
    ] = None
    unique_body: Annotated[
        ItemBody | Dict[str, Any] | None,
        Field(
            description='The part of the body of the message that is unique to the current message. uniqueBody is not returned by default but can be retrieved for a given message by use of the ?$select=uniqueBody query. It can be in HTML or text format.'
        ),
    ] = None
    web_link: Annotated[
        str | None,
        Field(
            description='The URL to open the message in Outlook on the web.You can append an ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to 0, the browser shows the message in the Outlook on the web review pane.The message opens in the browser if you are signed in to your mailbox via Outlook on the web. You are prompted to sign in if you are not already signed in with the browser.This URL cannot be accessed from within an iFrame.'
        ),
    ] = None


class MessageRuleActions(BaseModel):
    field_odata_type: str
    assign_categories: Annotated[
        List[str] | None,
        Field(description='A list of categories to be assigned to a message.'),
    ] = None
    copy_to_folder: Annotated[
        str | None,
        Field(description='The ID of a folder that a message is to be copied to.'),
    ] = None
    delete: Annotated[
        bool | None,
        Field(
            description='Indicates whether a message should be moved to the Deleted Items folder.'
        ),
    ] = None
    forward_as_attachment_to: Annotated[
        List[Recipient] | None,
        Field(
            description='The email addresses of the recipients to which a message should be forwarded as an attachment.'
        ),
    ] = None
    forward_to: Annotated[
        List[Recipient] | None,
        Field(
            description='The email addresses of the recipients to which a message should be forwarded.'
        ),
    ] = None
    mark_as_read: Annotated[
        bool | None,
        Field(description='Indicates whether a message should be marked as read.'),
    ] = None
    mark_importance: Annotated[
        Importance | Dict[str, Any] | None,
        Field(
            description='Sets the importance of the message, which can be: low, normal, high.'
        ),
    ] = None
    move_to_folder: Annotated[
        str | None,
        Field(description='The ID of the folder that a message will be moved to.'),
    ] = None
    permanent_delete: Annotated[
        bool | None,
        Field(
            description='Indicates whether a message should be permanently deleted and not saved to the Deleted Items folder.'
        ),
    ] = None
    redirect_to: Annotated[
        List[Recipient] | None,
        Field(
            description='The email addresses to which a message should be redirected.'
        ),
    ] = None
    stop_processing_rules: Annotated[
        bool | None,
        Field(description='Indicates whether subsequent rules should be evaluated.'),
    ] = None


class MessageRulePredicates(BaseModel):
    field_odata_type: str
    body_contains: Annotated[
        List[str] | None,
        Field(
            description='Represents the strings that should appear in the body of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    body_or_subject_contains: Annotated[
        List[str] | None,
        Field(
            description='Represents the strings that should appear in the body or subject of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    categories: Annotated[
        List[str] | None,
        Field(
            description='Represents the categories that an incoming message should be labeled with in order for the condition or exception to apply.'
        ),
    ] = None
    from_addresses: Annotated[
        List[Recipient] | None,
        Field(
            description='Represents the specific sender email addresses of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    has_attachments: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must have attachments in order for the condition or exception to apply.'
        ),
    ] = None
    header_contains: Annotated[
        List[str] | None,
        Field(
            description='Represents the strings that appear in the headers of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    importance: Annotated[
        Importance | Dict[str, Any] | None,
        Field(
            description='The importance that is stamped on an incoming message in order for the condition or exception to apply: low, normal, high.'
        ),
    ] = None
    is_approval_request: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be an approval request in order for the condition or exception to apply.'
        ),
    ] = None
    is_automatic_forward: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be automatically forwarded in order for the condition or exception to apply.'
        ),
    ] = None
    is_automatic_reply: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be an auto reply in order for the condition or exception to apply.'
        ),
    ] = None
    is_encrypted: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be encrypted in order for the condition or exception to apply.'
        ),
    ] = None
    is_meeting_request: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be a meeting request in order for the condition or exception to apply.'
        ),
    ] = None
    is_meeting_response: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be a meeting response in order for the condition or exception to apply.'
        ),
    ] = None
    is_non_delivery_report: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be a non-delivery report in order for the condition or exception to apply.'
        ),
    ] = None
    is_permission_controlled: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be permission controlled (RMS-protected) in order for the condition or exception to apply.'
        ),
    ] = None
    is_read_receipt: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be a read receipt in order for the condition or exception to apply.'
        ),
    ] = None
    is_signed: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be S/MIME-signed in order for the condition or exception to apply.'
        ),
    ] = None
    is_voicemail: Annotated[
        bool | None,
        Field(
            description='Indicates whether an incoming message must be a voice mail in order for the condition or exception to apply.'
        ),
    ] = None
    message_action_flag: Annotated[
        MessageActionFlag | Dict[str, Any] | None,
        Field(
            description='Represents the flag-for-action value that appears on an incoming message in order for the condition or exception to apply. The possible values are: any, call, doNotForward, followUp, fyi, forward, noResponseNecessary, read, reply, replyToAll, review.'
        ),
    ] = None
    not_sent_to_me: Annotated[
        bool | None,
        Field(
            description='Indicates whether the owner of the mailbox must not be a recipient of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    recipient_contains: Annotated[
        List[str] | None,
        Field(
            description='Represents the strings that appear in either the toRecipients or ccRecipients properties of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    sender_contains: Annotated[
        List[str] | None,
        Field(
            description='Represents the strings that appear in the from property of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    sensitivity: Annotated[
        Sensitivity | Dict[str, Any] | None,
        Field(
            description='Represents the sensitivity level that must be stamped on an incoming message in order for the condition or exception to apply. The possible values are: normal, personal, private, confidential.'
        ),
    ] = None
    sent_cc_me: Annotated[
        bool | None,
        Field(
            description='Indicates whether the owner of the mailbox must be in the ccRecipients property of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    sent_only_to_me: Annotated[
        bool | None,
        Field(
            description='Indicates whether the owner of the mailbox must be the only recipient in an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    sent_to_addresses: Annotated[
        List[Recipient] | None,
        Field(
            description='Represents the email addresses that an incoming message must have been sent to in order for the condition or exception to apply.'
        ),
    ] = None
    sent_to_me: Annotated[
        bool | None,
        Field(
            description='Indicates whether the owner of the mailbox must be in the toRecipients property of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    sent_to_or_cc_me: Annotated[
        bool | None,
        Field(
            description='Indicates whether the owner of the mailbox must be in either a toRecipients or ccRecipients property of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    subject_contains: Annotated[
        List[str] | None,
        Field(
            description='Represents the strings that appear in the subject of an incoming message in order for the condition or exception to apply.'
        ),
    ] = None
    within_size_range: Annotated[
        SizeRange | Dict[str, Any] | None,
        Field(
            description='Represents the minimum and maximum sizes (in kilobytes) that an incoming message must fall in between in order for the condition or exception to apply.'
        ),
    ] = None


class OnenoteEntityHierarchyModel(OnenoteEntitySchemaObjectModel):
    field_odata_type: str
    created_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='Identity of the user, device, and application that created the item. Read-only.'
        ),
    ] = None
    display_name: Annotated[
        str | None, Field(description='The name of the notebook.')
    ] = None
    last_modified_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='Identity of the user, device, and application that created the item. Read-only.'
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class OnlineMeetingBase(Entity):
    field_odata_type: str
    allow_attendee_to_enable_camera: Annotated[
        bool | None,
        Field(description='Indicates whether attendees can turn on their camera.'),
    ] = None
    allow_attendee_to_enable_mic: Annotated[
        bool | None,
        Field(description='Indicates whether attendees can turn on their microphone.'),
    ] = None
    allow_meeting_chat: Annotated[
        MeetingChatMode | Dict[str, Any] | None,
        Field(description='Specifies the mode of the meeting chat.'),
    ] = None
    allow_participants_to_change_name: Annotated[
        bool | None,
        Field(
            description='Specifies if participants are allowed to rename themselves in an instance of the meeting.'
        ),
    ] = None
    allow_recording: Annotated[
        bool | None,
        Field(description='Indicates whether recording is enabled for the meeting.'),
    ] = None
    allow_teamwork_reactions: Annotated[
        bool | None,
        Field(description='Indicates if Teams reactions are enabled for the meeting.'),
    ] = None
    allow_transcription: Annotated[
        bool | None,
        Field(
            description='Indicates whether transcription is enabled for the meeting.'
        ),
    ] = None
    allowed_presenters: Annotated[
        OnlineMeetingPresenters | Dict[str, Any] | None,
        Field(description='Specifies who can be a presenter in a meeting.'),
    ] = None
    attendance_reports: Annotated[
        List[MeetingAttendanceReport] | None,
        Field(description='The attendance reports of an online meeting. Read-only.'),
    ] = None
    audio_conferencing: Annotated[
        AudioConferencing | Dict[str, Any] | None,
        Field(
            description='The phone access (dial-in) information for an online meeting. Read-only.'
        ),
    ] = None
    chat_info: Annotated[
        ChatInfo | Dict[str, Any] | None,
        Field(description='The chat information associated with this online meeting.'),
    ] = None
    chat_restrictions: Annotated[
        ChatRestrictions | Dict[str, Any] | None,
        Field(
            description='Specifies the configuration settings for meeting chat restrictions.'
        ),
    ] = None
    is_entry_exit_announced: Annotated[
        bool | None,
        Field(description='Indicates whether to announce when callers join or leave.'),
    ] = None
    join_information: Annotated[
        ItemBody | Dict[str, Any] | None,
        Field(
            description="The join information in the language and locale variant specified in 'Accept-Language' request HTTP header. Read-only."
        ),
    ] = None
    join_meeting_id_settings: Annotated[
        JoinMeetingIdSettings | Dict[str, Any] | None,
        Field(
            description="Specifies the joinMeetingId, the meeting passcode, and the requirement for the passcode. Once an onlineMeeting is created, the joinMeetingIdSettings can't be modified. To make any changes to this property, you must cancel this meeting and create a new one."
        ),
    ] = None
    join_web_url: Annotated[
        str | None, Field(description='The join URL of the online meeting. Read-only.')
    ] = None
    lobby_bypass_settings: Annotated[
        LobbyBypassSettings | Dict[str, Any] | None,
        Field(description='Specifies which participants can bypass the meeting lobby.'),
    ] = None
    record_automatically: Annotated[
        bool | None,
        Field(description='Indicates whether to record the meeting automatically.'),
    ] = None
    share_meeting_chat_history_default: Annotated[
        MeetingChatHistoryDefaultMode | Dict[str, Any] | None,
        Field(
            description='Specifies whether meeting chat history is shared with participants.  Possible values are: all, none, unknownFutureValue.'
        ),
    ] = None
    subject: Annotated[
        str | None, Field(description='The subject of the online meeting.')
    ] = None
    video_teleconference_id: Annotated[
        str | None, Field(description='The video teleconferencing ID. Read-only.')
    ] = None
    watermark_protection: Annotated[
        WatermarkProtectionValues | Dict[str, Any] | None,
        Field(
            description='Specifies whether the client application should apply a watermark to a content type.'
        ),
    ] = None


class Operation(Entity):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The start time of the operation.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_action_date_time: Annotated[
        datetime | None,
        Field(
            description='The time of the last action of the operation.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    status: Annotated[
        OperationStatus | Dict[str, Any] | None,
        Field(
            description='The current status of the operation: notStarted, running, completed, failed'
        ),
    ] = None


class PasswordAuthenticationMethod(AuthenticationMethod):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when this password was last updated. This property is currently not populated. Read-only. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    password: Annotated[
        str | None,
        Field(
            description='For security, the password is always returned as null from a LIST or GET operation.'
        ),
    ] = None


class Permission(Entity):
    field_odata_type: str
    expiration_date_time: Annotated[
        datetime | None,
        Field(
            description="A format of yyyy-MM-ddTHH:mm:ssZ of DateTimeOffset indicates the expiration time of the permission. DateTime.MinValue indicates there's no expiration set for this permission. Optional.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    granted_to: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='For user type permissions, the details of the users and applications for this permission. Read-only.'
        ),
    ] = None
    granted_to_identities: Annotated[
        List[IdentitySet] | None,
        Field(
            description='For type permissions, the details of the users to whom permission was granted. Read-only.'
        ),
    ] = None
    granted_to_identities_v2: Annotated[
        List[SharePointIdentitySet] | None,
        Field(
            description='For link type permissions, the details of the users to whom permission was granted. Read-only.'
        ),
    ] = None
    granted_to_v2: Annotated[
        SharePointIdentitySet | Dict[str, Any] | None,
        Field(
            description='For user type permissions, the details of the users and applications for this permission. Read-only.'
        ),
    ] = None
    has_password: Annotated[
        bool | None,
        Field(
            description='Indicates whether the password is set for this permission. This property only appears in the response. Optional. Read-only. For OneDrive Personal only..'
        ),
    ] = None
    inherited_from: Annotated[
        ItemReference | Dict[str, Any] | None,
        Field(
            description="Provides a reference to the ancestor of the current permission, if it's inherited from an ancestor. Read-only."
        ),
    ] = None
    invitation: Annotated[
        SharingInvitation | Dict[str, Any] | None,
        Field(
            description='Details of any associated sharing invitation for this permission. Read-only.'
        ),
    ] = None
    link: Annotated[
        SharingLink | Dict[str, Any] | None,
        Field(
            description="Provides the link details of the current permission, if it's a link type permission. Read-only."
        ),
    ] = None
    roles: Annotated[
        List[str] | None,
        Field(
            description='The type of permission, for example, read. See below for the full list of roles. Read-only.'
        ),
    ] = None
    share_id: Annotated[
        str | None,
        Field(
            description='A unique token that can be used to access this shared item via the shares API. Read-only.'
        ),
    ] = None


class PersistentBrowserSessionControl(ConditionalAccessSessionControl):
    field_odata_type: str
    mode: Annotated[
        PersistentBrowserSessionMode | Dict[str, Any] | None,
        Field(description='Possible values are: always, never.'),
    ] = None


class Phone(BaseModel):
    field_odata_type: str
    language: str | None = None
    number: Annotated[str | None, Field(description='The phone number.')] = None
    region: str | None = None
    type: Annotated[
        PhoneType | Dict[str, Any] | None,
        Field(
            description='The type of phone number. The possible values are: home, business, mobile, other, assistant, homeFax, businessFax, otherFax, pager, radio.'
        ),
    ] = None


class PhoneAuthenticationMethod(AuthenticationMethod):
    field_odata_type: str
    phone_number: Annotated[
        str | None,
        Field(
            description="The phone number to text or call for authentication. Phone numbers use the format +{country code} {number}x{extension}, with extension optional. For example, +1 5555551234 or +1 5555551234x123 are valid. Numbers are rejected when creating or updating if they don't match the required format."
        ),
    ] = None
    phone_type: Annotated[
        AuthenticationPhoneType | Dict[str, Any] | None,
        Field(
            description='The type of this phone. Possible values are: mobile, alternateMobile, or office.'
        ),
    ] = None
    sms_sign_in_state: Annotated[
        AuthenticationMethodSignInState | Dict[str, Any] | None,
        Field(
            description='Whether a phone is ready to be used for SMS sign-in or not. Possible values are: notSupported, notAllowedByPolicy, notEnabled, phoneNumberNotUnique, ready, or notConfigured, unknownFutureValue.'
        ),
    ] = None


class PlannerAssignedToTaskBoardTaskFormat(Entity):
    field_odata_type: str
    order_hints_by_assignee: Annotated[
        PlannerOrderHintsByAssignee | Dict[str, Any] | None,
        Field(
            description='Dictionary of hints used to order tasks on the AssignedTo view of the Task Board. The key of each entry is one of the users the task is assigned to and the value is the order hint. The format of each value is defined as outlined here.'
        ),
    ] = None
    unassigned_order_hint: Annotated[
        str | None,
        Field(
            description="Hint value used to order the task on the AssignedTo view of the Task Board when the task isn't assigned to anyone, or if the orderHintsByAssignee dictionary doesn't provide an order hint for the user the task is assigned to. The format is defined as outlined here."
        ),
    ] = None


class PlannerPlanDetails(Entity):
    field_odata_type: str
    category_descriptions: Annotated[
        PlannerCategoryDescriptions | Dict[str, Any] | None,
        Field(
            description='An object that specifies the descriptions of the 25 categories that can be associated with tasks in the plan.'
        ),
    ] = None
    shared_with: Annotated[
        PlannerUserIds | Dict[str, Any] | None,
        Field(
            description="Set of user IDs that this plan is shared with. If you're using Microsoft 365 groups, use the Groups API to manage group membership to share the group's plan. You can also add existing members of the group to this collection, although it isn't required for them to access the plan owned by the group."
        ),
    ] = None


class PlannerTask(Entity):
    field_odata_type: str
    active_checklist_item_count: Annotated[
        float | None,
        Field(
            description='Number of checklist items with value set to false, representing incomplete items.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    applied_categories: Annotated[
        PlannerAppliedCategories | Dict[str, Any] | None,
        Field(
            description='The categories to which the task has been applied. See applied Categories for possible values.'
        ),
    ] = None
    assigned_to_task_board_format: Annotated[
        PlannerAssignedToTaskBoardTaskFormat | Dict[str, Any] | None,
        Field(
            description='Read-only. Nullable. Used to render the task correctly in the task board view when grouped by assignedTo.'
        ),
    ] = None
    assignee_priority: Annotated[
        str | None,
        Field(
            description='Hint used to order items of this type in a list view. The format is defined as outlined here.'
        ),
    ] = None
    assignments: Annotated[
        PlannerAssignments | Dict[str, Any] | None,
        Field(description='The set of assignees the task is assigned to.'),
    ] = None
    bucket_id: Annotated[
        str | None,
        Field(
            description="Bucket ID to which the task belongs. The bucket needs to be in the plan that the task is in. It's 28 characters long and case-sensitive. Format validation is done on the service."
        ),
    ] = None
    bucket_task_board_format: Annotated[
        PlannerBucketTaskBoardTaskFormat | Dict[str, Any] | None,
        Field(
            description='Read-only. Nullable. Used to render the task correctly in the task board view when grouped by bucket.'
        ),
    ] = None
    checklist_item_count: Annotated[
        float | None,
        Field(
            description='Number of checklist items that are present on the task.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    completed_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='Identity of the user that completed the task.'),
    ] = None
    completed_date_time: Annotated[
        datetime | None,
        Field(
            description="Read-only. Date and time at which the 'percentComplete' of the task is set to '100'. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    conversation_thread_id: Annotated[
        str | None,
        Field(
            description='Thread ID of the conversation on the task. This is the ID of the conversation thread object created in the group.'
        ),
    ] = None
    created_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='Identity of the user that created the task.'),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Read-only. Date and time at which the task is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    details: Annotated[
        PlannerTaskDetails | Dict[str, Any] | None,
        Field(description='Read-only. Nullable. More details about the task.'),
    ] = None
    due_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time at which the task is due. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    has_description: Annotated[
        bool | None,
        Field(
            description='Read-only. Value is true if the details object of the task has a nonempty description and false otherwise.'
        ),
    ] = None
    order_hint: Annotated[
        str | None,
        Field(
            description='Hint used to order items of this type in a list view. The format is defined as outlined here.'
        ),
    ] = None
    percent_complete: Annotated[
        float | None,
        Field(
            description='Percentage of task completion. When set to 100, the task is considered completed.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    plan_id: Annotated[
        str | None, Field(description='Plan ID to which the task belongs.')
    ] = None
    preview_type: Annotated[
        PlannerPreviewType | Dict[str, Any] | None,
        Field(
            description='This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference.'
        ),
    ] = None
    priority: Annotated[
        float | None,
        Field(
            description="Priority of the task. The valid range of values is between 0 and 10, with the increasing value being lower priority (0 has the highest priority and 10 has the lowest priority).  Currently, Planner interprets values 0 and 1 as 'urgent', 2, 3 and 4 as 'important', 5, 6, and 7 as 'medium', and 8, 9, and 10 as 'low'.  Additionally, Planner sets the value 1 for 'urgent', 3 for 'important', 5 for 'medium', and 9 for 'low'.",
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    progress_task_board_format: Annotated[
        PlannerProgressTaskBoardTaskFormat | Dict[str, Any] | None,
        Field(
            description='Read-only. Nullable. Used to render the task correctly in the task board view when grouped by progress.'
        ),
    ] = None
    reference_count: Annotated[
        float | None,
        Field(
            description='Number of external references that exist on the task.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    start_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time at which the task starts. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    title: Annotated[str | None, Field(description='Title of the task.')] = None


class Post(OutlookItem):
    field_odata_type: str
    attachments: Annotated[
        List[Attachment] | None,
        Field(description='Read-only. Nullable. Supports $expand.'),
    ] = None
    body: Annotated[
        ItemBody | Dict[str, Any] | None,
        Field(
            description='The contents of the post. This is a default property. This property can be null.'
        ),
    ] = None
    conversation_id: Annotated[
        str | None, Field(description='Unique ID of the conversation. Read-only.')
    ] = None
    conversation_thread_id: Annotated[
        str | None,
        Field(description='Unique ID of the conversation thread. Read-only.'),
    ] = None
    extensions: Annotated[
        List[Extension] | None,
        Field(
            description='The collection of open extensions defined for the post. Read-only. Nullable. Supports $expand.'
        ),
    ] = None
    from_: Recipient | None = None
    has_attachments: Annotated[
        bool | None,
        Field(
            description='Indicates whether the post has at least one attachment. This is a default property.'
        ),
    ] = None
    in_reply_to: Annotated[
        Post | Dict[str, Any] | None, Field(description='Read-only. Supports $expand.')
    ] = None
    multi_value_extended_properties: Annotated[
        List[MultiValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of multi-value extended properties defined for the post. Read-only. Nullable.'
        ),
    ] = None
    new_participants: Annotated[
        List[Recipient] | None,
        Field(
            description='Conversation participants that were added to the thread as part of this post.'
        ),
    ] = None
    received_date_time: Annotated[
        datetime | None,
        Field(
            description='Specifies when the post was received. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    sender: Annotated[
        Recipient | Dict[str, Any] | None,
        Field(
            description='Contains the address of the sender. The value of Sender is assumed to be the address of the authenticated user in the case when Sender is not specified. This is a default property.'
        ),
    ] = None
    single_value_extended_properties: Annotated[
        List[SingleValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of single-value extended properties defined for the post. Read-only. Nullable.'
        ),
    ] = None


class Presence(Entity):
    field_odata_type: str
    activity: Annotated[
        str | None,
        Field(
            description="The supplemental information to a user's availability. Possible values are Available, Away, BeRightBack, Busy, DoNotDisturb, InACall, InAConferenceCall, Inactive, InAMeeting, Offline, OffWork, OutOfOffice, PresenceUnknown, Presenting, UrgentInterruptionsOnly."
        ),
    ] = None
    availability: Annotated[
        str | None,
        Field(
            description='The base presence information for a user. Possible values are Available, AvailableIdle,  Away, BeRightBack, Busy, BusyIdle, DoNotDisturb, Offline, PresenceUnknown'
        ),
    ] = None
    status_message: Annotated[
        PresenceStatusMessage | Dict[str, Any] | None,
        Field(description='The presence status message of a user.'),
    ] = None


class PrintConnector(Entity):
    field_odata_type: str
    app_version: Annotated[
        str | None, Field(description="The connector's version.")
    ] = None
    display_name: Annotated[
        str | None, Field(description='The name of the connector.')
    ] = None
    fully_qualified_domain_name: Annotated[
        str | None, Field(description="The connector machine's hostname.")
    ] = None
    location: Annotated[
        PrinterLocation | Dict[str, Any] | None,
        Field(
            description='The physical and/or organizational location of the connector.'
        ),
    ] = None
    operating_system: Annotated[
        str | None,
        Field(description="The connector machine's operating system version."),
    ] = None
    registered_date_time: Annotated[
        datetime | None,
        Field(
            description='The DateTimeOffset when the connector was registered.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class PrintJobConfiguration(BaseModel):
    field_odata_type: str
    collate: Annotated[
        bool | None,
        Field(
            description='Whether the printer should collate pages wehen printing multiple copies of a multi-page document.'
        ),
    ] = None
    color_mode: Annotated[
        PrintColorMode | Dict[str, Any] | None,
        Field(
            description='The color mode the printer should use to print the job. Valid values are described in the table below. Read-only.'
        ),
    ] = None
    copies: Annotated[
        float | None,
        Field(
            description='The number of copies that should be printed. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    dpi: Annotated[
        float | None,
        Field(
            description='The resolution to use when printing the job, expressed in dots per inch (DPI). Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    duplex_mode: Annotated[
        PrintDuplexMode | Dict[str, Any] | None,
        Field(
            description='The duplex mode the printer should use when printing the job. Valid values are described in the table below. Read-only.'
        ),
    ] = None
    feed_orientation: Annotated[
        PrinterFeedOrientation | Dict[str, Any] | None,
        Field(
            description='The orientation to use when feeding media into the printer. Valid values are described in the following table. Read-only.'
        ),
    ] = None
    finishings: Annotated[
        List[PrintFinishing | Dict[str, Any]] | None,
        Field(description='Finishing processes to use when printing.'),
    ] = None
    fit_pdf_to_page: Annotated[
        bool | None,
        Field(
            description='True to fit each page of a PDF document to a physical sheet of media; false to let the printer decide how to lay out impressions.'
        ),
    ] = None
    input_bin: Annotated[
        str | None,
        Field(
            description="The input bin (tray) to use when printing. See the printer's capabilities for a list of supported input bins."
        ),
    ] = None
    margin: Annotated[
        PrintMargin | Dict[str, Any] | None,
        Field(description='The margin settings to use when printing.'),
    ] = None
    media_size: Annotated[
        str | None,
        Field(
            description='The media size to use when printing. Supports standard size names for ISO and ANSI media sizes. Valid values listed in the printerCapabilities topic.'
        ),
    ] = None
    media_type: Annotated[
        str | None,
        Field(
            description='The default media (such as paper) type to print the document on.'
        ),
    ] = None
    multipage_layout: Annotated[
        PrintMultipageLayout | Dict[str, Any] | None,
        Field(
            description='The direction to lay out pages when multiple pages are being printed per sheet. Valid values are described in the following table.'
        ),
    ] = None
    orientation: Annotated[
        PrintOrientation | Dict[str, Any] | None,
        Field(
            description='The orientation setting the printer should use when printing the job. Valid values are described in the following table.'
        ),
    ] = None
    output_bin: Annotated[
        str | None,
        Field(
            description="The output bin to place completed prints into. See the printer's capabilities for a list of supported output bins."
        ),
    ] = None
    page_ranges: Annotated[
        List[IntegerRange] | None,
        Field(description='The page ranges to print. Read-only.'),
    ] = None
    pages_per_sheet: Annotated[
        float | None,
        Field(
            description='The number of document pages to print on each sheet.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    quality: Annotated[
        PrintQuality | Dict[str, Any] | None,
        Field(
            description='The print quality to use when printing the job. Valid values are described in the table below. Read-only.'
        ),
    ] = None
    scaling: Annotated[
        PrintScaling | Dict[str, Any] | None,
        Field(
            description='Specifies how the printer should scale the document data to fit the requested media. Valid values are described in the following table.'
        ),
    ] = None


class PrinterCapabilities(BaseModel):
    field_odata_type: str
    bottom_margins: Annotated[
        List[BottomMargin] | None,
        Field(
            description='A list of supported bottom margins(in microns) for the printer.'
        ),
    ] = None
    collation: Annotated[
        bool | None,
        Field(
            description='True if the printer supports collating when printing muliple copies of a multi-page document; false otherwise.'
        ),
    ] = None
    color_modes: Annotated[
        List[PrintColorMode | Dict[str, Any]] | None,
        Field(
            description='The color modes supported by the printer. Valid values are described in the following table.'
        ),
    ] = None
    content_types: Annotated[
        List[str] | None,
        Field(
            description='A list of supported content (MIME) types that the printer supports. It is not guaranteed that the Universal Print service supports printing all of these MIME types.'
        ),
    ] = None
    copies_per_job: Annotated[
        IntegerRange | Dict[str, Any] | None,
        Field(description='The range of copies per job supported by the printer.'),
    ] = None
    dpis: Annotated[
        List[Dpi] | None,
        Field(
            description='The list of print resolutions in DPI that are supported by the printer.'
        ),
    ] = None
    duplex_modes: Annotated[
        List[PrintDuplexMode | Dict[str, Any]] | None,
        Field(
            description='The list of duplex modes that are supported by the printer. Valid values are described in the following table.'
        ),
    ] = None
    feed_orientations: Annotated[
        List[PrinterFeedOrientation | Dict[str, Any]] | None,
        Field(
            description='The list of feed orientations that are supported by the printer.'
        ),
    ] = None
    finishings: Annotated[
        List[PrintFinishing | Dict[str, Any]] | None,
        Field(
            description='Finishing processes the printer supports for a printed document.'
        ),
    ] = None
    input_bins: Annotated[
        List[str] | None, Field(description='Supported input bins for the printer.')
    ] = None
    is_color_printing_supported: Annotated[
        bool | None,
        Field(
            description='True if color printing is supported by the printer; false otherwise. Read-only.'
        ),
    ] = None
    is_page_range_supported: Annotated[
        bool | None,
        Field(
            description='True if the printer supports printing by page ranges; false otherwise.'
        ),
    ] = None
    left_margins: Annotated[
        List[LeftMargin] | None,
        Field(
            description='A list of supported left margins(in microns) for the printer.'
        ),
    ] = None
    media_colors: Annotated[
        List[str] | None,
        Field(description='The media (i.e., paper) colors supported by the printer.'),
    ] = None
    media_sizes: Annotated[
        List[str] | None,
        Field(
            description='The media sizes supported by the printer. Supports standard size names for ISO and ANSI media sizes. Valid values are in the following table.'
        ),
    ] = None
    media_types: Annotated[
        List[str] | None, Field(description='The media types supported by the printer.')
    ] = None
    multipage_layouts: Annotated[
        List[PrintMultipageLayout | Dict[str, Any]] | None,
        Field(
            description='The presentation directions supported by the printer. Supported values are described in the following table.'
        ),
    ] = None
    orientations: Annotated[
        List[PrintOrientation | Dict[str, Any]] | None,
        Field(
            description='The print orientations supported by the printer. Valid values are described in the following table.'
        ),
    ] = None
    output_bins: Annotated[
        List[str] | None,
        Field(description="The printer's supported output bins (trays)."),
    ] = None
    pages_per_sheet: Annotated[
        List[PagesPerSheetItem] | None,
        Field(
            description='Supported number of Input Pages to impose upon a single Impression.'
        ),
    ] = None
    qualities: Annotated[
        List[PrintQuality | Dict[str, Any]] | None,
        Field(description='The print qualities supported by the printer.'),
    ] = None
    right_margins: Annotated[
        List[RightMargin] | None,
        Field(
            description='A list of supported right margins(in microns) for the printer.'
        ),
    ] = None
    scalings: Annotated[
        List[PrintScaling | Dict[str, Any]] | None,
        Field(description='Supported print scalings.'),
    ] = None
    supports_fit_pdf_to_page: Annotated[
        bool | None,
        Field(
            description='True if the printer supports scaling PDF pages to match the print media size; false otherwise.'
        ),
    ] = None
    top_margins: Annotated[
        List[TopMargin] | None,
        Field(
            description='A list of supported top margins(in microns) for the printer.'
        ),
    ] = None


class PublicError(BaseModel):
    field_odata_type: str
    code: Annotated[str | None, Field(description='Represents the error code.')] = None
    details: Annotated[
        List[PublicErrorDetail] | None, Field(description='Details of the error.')
    ] = None
    inner_error: Annotated[
        PublicInnerError | Dict[str, Any] | None,
        Field(description='Details of the inner error.'),
    ] = None
    message: Annotated[
        str | None, Field(description='A non-localized message for the developer.')
    ] = None
    target: Annotated[str | None, Field(description='The target of the error.')] = None


class Quota(BaseModel):
    field_odata_type: str
    deleted: Annotated[
        float | None,
        Field(
            description='Total space consumed by files in the recycle bin, in bytes. Read-only.'
        ),
    ] = None
    remaining: Annotated[
        float | None,
        Field(
            description='Total space remaining before reaching the capacity limit, in bytes. Read-only.'
        ),
    ] = None
    state: Annotated[
        str | None,
        Field(
            description='Enumeration value that indicates the state of the storage space. Read-only.'
        ),
    ] = None
    storage_plan_information: Annotated[
        StoragePlanInformation | Dict[str, Any] | None,
        Field(
            description="Information about the drive's storage quota plans. Only in Personal OneDrive."
        ),
    ] = None
    total: Annotated[
        float | None,
        Field(description='Total allowed storage space, in bytes. Read-only.'),
    ] = None
    used: Annotated[
        float | None, Field(description='Total space used, in bytes. Read-only.')
    ] = None


class RecurrencePattern(BaseModel):
    field_odata_type: str
    day_of_month: Annotated[
        float | None,
        Field(
            description='The day of the month on which the event occurs. Required if type is absoluteMonthly or absoluteYearly.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    days_of_week: Annotated[
        List[DayOfWeek | Dict[str, Any]] | None,
        Field(
            description='A collection of the days of the week on which the event occurs. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or relativeYearly.'
        ),
    ] = None
    first_day_of_week: Annotated[
        DayOfWeek | Dict[str, Any] | None,
        Field(
            description='The first day of the week. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. Default is sunday. Required if type is weekly.'
        ),
    ] = None
    index: Annotated[
        WeekIndex | Dict[str, Any] | None,
        Field(
            description='Specifies on which instance of the allowed days specified in daysOfWeek the event occurs, counted from the first instance in the month. The possible values are: first, second, third, fourth, last. Default is first. Optional and used if type is relativeMonthly or relativeYearly.'
        ),
    ] = None
    interval: Annotated[
        float | None,
        Field(
            description='The number of units between occurrences, where units can be in days, weeks, months, or years, depending on the type. Required.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    month: Annotated[
        float | None,
        Field(
            description='The month in which the event occurs.  This is a number from 1 to 12.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    type: Annotated[
        RecurrencePatternType | Dict[str, Any] | None,
        Field(
            description='The recurrence pattern type: daily, weekly, absoluteMonthly, relativeMonthly, absoluteYearly, relativeYearly. Required. For more information, see values of type property.'
        ),
    ] = None


class RecurrenceRange(BaseModel):
    field_odata_type: str
    end_date: Annotated[
        date | None,
        Field(
            description='The date to stop applying the recurrence pattern. Depending on the recurrence pattern of the event, the last occurrence of the meeting may not be this date. Required if type is endDate.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$',
        ),
    ] = None
    number_of_occurrences: Annotated[
        float | None,
        Field(
            description='The number of times to repeat the event. Required and must be positive if type is numbered.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    recurrence_time_zone: Annotated[
        str | None,
        Field(
            description='Time zone for the startDate and endDate properties. Optional. If not specified, the time zone of the event is used.'
        ),
    ] = None
    start_date: Annotated[
        date | None,
        Field(
            description='The date to start applying the recurrence pattern. The first occurrence of the meeting may be this date or later, depending on the recurrence pattern of the event. Must be the same value as the start property of the recurring event. Required.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$',
        ),
    ] = None
    type: Annotated[
        RecurrenceRangeType | Dict[str, Any] | None,
        Field(
            description='The recurrence range. The possible values are: endDate, noEnd, numbered. Required.'
        ),
    ] = None


class RemoteItem(BaseModel):
    field_odata_type: str
    created_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='Identity of the user, device, and application which created the item. Read-only.'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time of item creation. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    file: Annotated[
        File | Dict[str, Any] | None,
        Field(description='Indicates that the remote item is a file. Read-only.'),
    ] = None
    file_system_info: Annotated[
        FileSystemInfo | Dict[str, Any] | None,
        Field(
            description='Information about the remote item from the local file system. Read-only.'
        ),
    ] = None
    folder: Annotated[
        Folder | Dict[str, Any] | None,
        Field(description='Indicates that the remote item is a folder. Read-only.'),
    ] = None
    id: Annotated[
        str | None,
        Field(
            description='Unique identifier for the remote item in its drive. Read-only.'
        ),
    ] = None
    image: Annotated[
        Image | Dict[str, Any] | None,
        Field(description='Image metadata, if the item is an image. Read-only.'),
    ] = None
    last_modified_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='Identity of the user, device, and application which last modified the item. Read-only.'
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time the item was last modified. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(description='Optional. Filename of the remote item. Read-only.'),
    ] = None
    package: Annotated[
        Package | Dict[str, Any] | None,
        Field(
            description='If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.'
        ),
    ] = None
    parent_reference: Annotated[
        ItemReference | Dict[str, Any] | None,
        Field(description='Properties of the parent of the remote item. Read-only.'),
    ] = None
    shared: Annotated[
        Shared | Dict[str, Any] | None,
        Field(
            description='Indicates that the item has been shared with others and provides information about the shared state of the item. Read-only.'
        ),
    ] = None
    sharepoint_ids: Annotated[
        SharepointIds | Dict[str, Any] | None,
        Field(
            description='Provides interop between items in OneDrive for Business and SharePoint with the full set of item identifiers. Read-only.'
        ),
    ] = None
    size: Annotated[
        float | None, Field(description='Size of the remote item. Read-only.')
    ] = None
    special_folder: Annotated[
        SpecialFolder | Dict[str, Any] | None,
        Field(
            description='If the current item is also available as a special folder, this facet is returned. Read-only.'
        ),
    ] = None
    video: Annotated[
        Video | Dict[str, Any] | None,
        Field(description='Video metadata, if the item is a video. Read-only.'),
    ] = None
    web_dav_url: Annotated[
        str | None, Field(description='DAV compatible URL for the item.')
    ] = None
    web_url: Annotated[
        str | None,
        Field(description='URL that displays the resource in the browser. Read-only.'),
    ] = None


class ResourceSpecificPermissionGrant(DirectoryObject):
    field_odata_type: str
    client_app_id: Annotated[
        str | None,
        Field(
            description='ID of the service principal of the Microsoft Entra app that has been granted access. Read-only.'
        ),
    ] = None
    client_id: Annotated[
        str | None,
        Field(
            description='ID of the Microsoft Entra app that has been granted access. Read-only.'
        ),
    ] = None
    permission: Annotated[
        str | None,
        Field(description='The name of the resource-specific permission. Read-only.'),
    ] = None
    permission_type: Annotated[
        str | None,
        Field(
            description='The type of permission. Possible values are: Application, Delegated. Read-only.'
        ),
    ] = None
    resource_app_id: Annotated[
        str | None,
        Field(
            description='ID of the Microsoft Entra app that is hosting the resource. Read-only.'
        ),
    ] = None


class ResponseStatus(BaseModel):
    field_odata_type: str
    response: Annotated[
        ResponseType | Dict[str, Any] | None,
        Field(
            description="The response type. Possible values are: none, organizer, tentativelyAccepted, accepted, declined, notResponded.To differentiate between none and notResponded:  none – from organizer's perspective. This value is used when the status of an attendee/participant is reported to the organizer of a meeting.  notResponded – from attendee's perspective. Indicates the attendee has not responded to the meeting request.  Clients can treat notResponded == none.  As an example, if attendee Alex hasn't responded to a meeting request, getting Alex' response status for that event in Alex' calendar returns notResponded. Getting Alex' response from the calendar of any other attendee or the organizer's returns none. Getting the organizer's response for the event in anybody's calendar also returns none."
        ),
    ] = None
    time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the response was returned. It uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class RetentionLabelSettings(BaseModel):
    field_odata_type: str
    behavior_during_retention_period: Annotated[
        security.BehaviorDuringRetentionPeriod | Dict[str, Any] | None,
        Field(
            description='Describes the item behavior during retention period. Possible values are: doNotRetain, retain, retainAsRecord, retainAsRegulatoryRecord, unknownFutureValue. Read-only.'
        ),
    ] = None
    is_content_update_allowed: Annotated[
        bool | None,
        Field(
            description='Specifies whether updates to document content are allowed. Read-only.'
        ),
    ] = None
    is_delete_allowed: Annotated[
        bool | None,
        Field(
            description='Specifies whether the document deletion is allowed. Read-only.'
        ),
    ] = None
    is_label_update_allowed: Annotated[
        bool | None,
        Field(
            description="Specifies whether you're allowed to change the retention label on the document. Read-only."
        ),
    ] = None
    is_metadata_update_allowed: Annotated[
        bool | None,
        Field(
            description='Specifies whether updates to the item metadata (for example, the Title field) are blocked. Read-only.'
        ),
    ] = None
    is_record_locked: Annotated[
        bool | None,
        Field(description='Specifies whether the item is locked. Read-write.'),
    ] = None


class RichLongRunningOperation(LongRunningOperation):
    field_odata_type: str
    error: Annotated[
        PublicError | Dict[str, Any] | None,
        Field(description='Error that caused the operation to fail.'),
    ] = None
    percentage_complete: Annotated[
        float | None,
        Field(
            description='A value between 0 and 100 that indicates the progress of the operation.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    resource_id: Annotated[
        str | None, Field(description='The unique identifier for the result.')
    ] = None
    type: Annotated[str | None, Field(description='The type of the operation.')] = None


class ScheduleChangeRequest(ChangeTrackedEntity):
    field_odata_type: str
    assigned_to: ScheduleChangeRequestActor | Dict[str, Any] | None = None
    manager_action_date_time: Annotated[
        datetime | None,
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    manager_action_message: str | None = None
    manager_user_id: str | None = None
    sender_date_time: Annotated[
        datetime | None,
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    sender_message: str | None = None
    sender_user_id: str | None = None
    state: ScheduleChangeState | Dict[str, Any] | None = None


class ScheduleEntity(BaseModel):
    field_odata_type: str
    end_date_time: Annotated[
        datetime | None,
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    start_date_time: Annotated[
        datetime | None,
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    theme: ScheduleEntityTheme | None = None


class SchedulingGroup(ChangeTrackedEntity):
    field_odata_type: str
    display_name: Annotated[
        str | None,
        Field(description='The display name for the schedulingGroup. Required.'),
    ] = None
    is_active: Annotated[
        bool | None,
        Field(
            description='Indicates whether the schedulingGroup can be used when creating new entities or updating existing ones. Required.'
        ),
    ] = None
    user_ids: Annotated[
        List[str] | None,
        Field(
            description='The list of user IDs that are a member of the schedulingGroup. Required.'
        ),
    ] = None


class ScoredEmailAddress(BaseModel):
    field_odata_type: str
    address: Annotated[str | None, Field(description='The email address.')] = None
    item_id: str | None = None
    relevance_score: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='The relevance score of the email address. A relevance score is used as a sort key, in relation to the other returned results. A higher relevance score value corresponds to a more relevant result. Relevance is determined by the user’s communication and collaboration patterns and business relationships.'
        ),
    ] = None
    selection_likelihood: SelectionLikelihoodInfo | Dict[str, Any] | None = None


class ServiceStorageQuotaBreakdown(StorageQuotaBreakdown):
    field_odata_type: str


class SettingSource(BaseModel):
    field_odata_type: str
    display_name: Annotated[str | None, Field(description='Not yet documented')] = None
    id: Annotated[str | None, Field(description='Not yet documented')] = None
    source_type: SettingSourceType | None = None


class SharedInsight(Entity):
    field_odata_type: str
    last_shared: Annotated[
        SharingDetail | Dict[str, Any] | None,
        Field(description='Details about the shared item. Read only.'),
    ] = None
    last_shared_method: Entity | Dict[str, Any] | None = None
    resource: Annotated[
        Entity | Dict[str, Any] | None,
        Field(
            description='Used for navigating to the item that was shared. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.'
        ),
    ] = None
    resource_reference: Annotated[
        ResourceReference | Dict[str, Any] | None,
        Field(
            description='Reference properties of the shared document, such as the url and type of the document. Read-only'
        ),
    ] = None
    resource_visualization: Annotated[
        ResourceVisualization | Dict[str, Any] | None,
        Field(
            description='Properties that you can use to visualize the document in your experience. Read-only'
        ),
    ] = None
    sharing_history: List[SharingDetail] | None = None


class ShiftItem(ScheduleEntity):
    field_odata_type: str
    activities: Annotated[
        List[ShiftActivity] | None,
        Field(
            description='An incremental part of a shift which can cover details of when and where an employee is during their shift. For example, an assignment or a scheduled break or lunch. Required.'
        ),
    ] = None
    display_name: Annotated[
        str | None, Field(description='The shift label of the shiftItem.')
    ] = None
    notes: Annotated[
        str | None, Field(description='The shift notes for the shiftItem.')
    ] = None


class SignInFrequencySessionControl(ConditionalAccessSessionControl):
    field_odata_type: str
    authentication_type: Annotated[
        SignInFrequencyAuthenticationType | Dict[str, Any] | None,
        Field(
            description="The possible values are primaryAndSecondaryAuthentication, secondaryAuthentication, unknownFutureValue. This property isn't required when using frequencyInterval with the value of timeBased."
        ),
    ] = None
    frequency_interval: Annotated[
        SignInFrequencyInterval | Dict[str, Any] | None,
        Field(
            description='The possible values are timeBased, everyTime, unknownFutureValue. Sign-in frequency of everyTime is available for risky users, risky sign-ins, and Intune device enrollment. For more information, see Require reauthentication every time.'
        ),
    ] = None
    type: Annotated[
        SigninFrequencyType | Dict[str, Any] | None,
        Field(description='Possible values are: days, hours.'),
    ] = None
    value: Annotated[
        float | None,
        Field(
            description='The number of days or hours.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class SiteArchivalDetails(BaseModel):
    field_odata_type: str
    archive_status: Annotated[
        SiteArchiveStatus | Dict[str, Any] | None,
        Field(
            description='Represents the current archive status of the site collection. Returned only on $select. The possible values are: recentlyArchived, fullyArchived, reactivating, unknownFutureValue.'
        ),
    ] = None


class SiteCollection(BaseModel):
    field_odata_type: str
    archival_details: Annotated[
        SiteArchivalDetails | Dict[str, Any] | None,
        Field(
            description='Represents whether the site collection is recently archived, fully archived, or reactivating. Possible values are: recentlyArchived, fullyArchived, reactivating, unknownFutureValue.'
        ),
    ] = None
    data_location_code: Annotated[
        str | None,
        Field(
            description='The geographic region code for where this site collection resides. Only present for multi-geo tenants. Read-only.'
        ),
    ] = None
    hostname: Annotated[
        str | None,
        Field(description='The hostname for the site collection. Read-only.'),
    ] = None
    root: Annotated[
        Root | Dict[str, Any] | None,
        Field(
            description='If present, indicates that this is a root site collection in SharePoint. Read-only.'
        ),
    ] = None


class SoftwareOathAuthenticationMethod(AuthenticationMethod):
    field_odata_type: str
    secret_key: Annotated[
        str | None,
        Field(description='The secret key of the method. Always returns null.'),
    ] = None


class TeamsAppResourceSpecificPermission(BaseModel):
    field_odata_type: str
    permission_type: Annotated[
        TeamsAppResourceSpecificPermissionType | Dict[str, Any] | None,
        Field(description='The type of resource-specific permission.'),
    ] = None
    permission_value: Annotated[
        str | None, Field(description='The name of the resource-specific permission.')
    ] = None


class TeamsAsyncOperation(Entity):
    field_odata_type: str
    attempts_count: Annotated[
        float | None,
        Field(
            description='Number of times the operation was attempted before being marked successful or failed.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Time when the operation was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    error: Annotated[
        OperationError | Dict[str, Any] | None,
        Field(description='Any error that causes the async operation to fail.'),
    ] = None
    last_action_date_time: Annotated[
        datetime | None,
        Field(
            description='Time when the async operation was last updated.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    operation_type: TeamsAsyncOperationType | None = None
    status: TeamsAsyncOperationStatus | None = None
    target_resource_id: Annotated[
        str | None,
        Field(
            description="The ID of the object that's created or modified as result of this async operation, typically a team."
        ),
    ] = None
    target_resource_location: Annotated[
        str | None,
        Field(
            description="The location of the object that's created or modified as result of this async operation. This URL should be treated as an opaque value and not parsed into its component paths."
        ),
    ] = None


class TeamworkConversationIdentity(Identity):
    field_odata_type: str
    conversation_identity_type: Annotated[
        TeamworkConversationIdentityType | Dict[str, Any] | None,
        Field(
            description='Type of conversation. Possible values are: team, channel, chat, and unknownFutureValue.'
        ),
    ] = None


class TeamworkTag(Entity):
    field_odata_type: str
    description: Annotated[
        str | None,
        Field(
            description="The description of the tag as it appears to the user in Microsoft Teams. A teamworkTag can't have more than 200 teamworkTagMembers."
        ),
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description='The name of the tag as it appears to the user in Microsoft Teams.'
        ),
    ] = None
    member_count: Annotated[
        float | None,
        Field(
            description='The number of users assigned to the tag.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    members: Annotated[
        List[TeamworkTagMember] | None, Field(description='Users assigned to the tag.')
    ] = None
    tag_type: Annotated[
        TeamworkTagType | Dict[str, Any] | None,
        Field(description='The type of the tag. Default is standard.'),
    ] = None
    team_id: Annotated[
        str | None, Field(description='ID of the team in which the tag is defined.')
    ] = None


class TeamworkUserIdentity(Identity):
    field_odata_type: str
    user_identity_type: Annotated[
        TeamworkUserIdentityType | Dict[str, Any] | None,
        Field(
            description='Type of user. Possible values are: aadUser, onPremiseAadUser, anonymousGuest, federatedUser, personalMicrosoftAccountUser, skypeUser, phoneUser, unknownFutureValue and emailUser.'
        ),
    ] = None


class TemporaryAccessPassAuthenticationMethod(AuthenticationMethod):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the Temporary Access Pass was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    is_usable: Annotated[
        bool | None,
        Field(
            description="The state of the authentication method that indicates whether it's currently usable by the user."
        ),
    ] = None
    is_usable_once: Annotated[
        bool | None,
        Field(
            description='Determines whether the pass is limited to a one-time use. If true, the pass can be used once; if false, the pass can be used multiple times within the Temporary Access Pass lifetime.'
        ),
    ] = None
    lifetime_in_minutes: Annotated[
        float | None,
        Field(
            description='The lifetime of the Temporary Access Pass in minutes starting at startDateTime. Must be between 10 and 43200 inclusive (equivalent to 30 days).',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    method_usability_reason: Annotated[
        str | None,
        Field(
            description='Details about the usability state (isUsable). Reasons can include: EnabledByPolicy, DisabledByPolicy, Expired, NotYetValid, OneTimeUsed.'
        ),
    ] = None
    start_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the Temporary Access Pass becomes available to use and when isUsable is true is enforced.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    temporary_access_pass: Annotated[
        str | None,
        Field(
            description='The Temporary Access Pass used to authenticate. Returned only on creation of a new temporaryAccessPassAuthenticationMethod object; Hidden in subsequent read operations and returned as null with GET.'
        ),
    ] = None


class TimeOffItem(ScheduleEntity):
    field_odata_type: str
    time_off_reason_id: Annotated[
        str | None,
        Field(description='ID of the timeOffReason for this timeOffItem. Required.'),
    ] = None


class TimeOffReason(ChangeTrackedEntity):
    field_odata_type: str
    display_name: Annotated[
        str | None, Field(description='The name of the timeOffReason. Required.')
    ] = None
    icon_type: Annotated[
        TimeOffReasonIconType | Dict[str, Any] | None,
        Field(
            description='Supported icon types are: none, car, calendar, running, plane, firstAid, doctor, notWorking, clock, juryDuty, globe, cup, phone, weather, umbrella, piggyBank, dog, cake, trafficCone, pin, sunny. Required.'
        ),
    ] = None
    is_active: Annotated[
        bool | None,
        Field(
            description='Indicates whether the timeOffReason can be used when creating new entities or updating existing ones. Required.'
        ),
    ] = None


class TimeOffRequest(ScheduleChangeRequest):
    field_odata_type: str
    end_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    start_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    time_off_reason_id: Annotated[
        str | None, Field(description='The reason for the time off.')
    ] = None


class UnifiedRoleDefinition(Entity):
    field_odata_type: str
    description: Annotated[
        str | None,
        Field(
            description='The description for the unifiedRoleDefinition. Read-only when isBuiltIn is true.'
        ),
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description='The display name for the unifiedRoleDefinition. Read-only when isBuiltIn is true. Required.  Supports $filter (eq, in).'
        ),
    ] = None
    inherits_permissions_from: Annotated[
        List[UnifiedRoleDefinition] | None,
        Field(
            description='Read-only collection of role definitions that the given role definition inherits from. Only Microsoft Entra built-in roles (isBuiltIn is true) support this attribute. Supports $expand.'
        ),
    ] = None
    is_built_in: Annotated[
        bool | None,
        Field(
            description='Flag indicating whether the role definition is part of the default set included in Microsoft Entra or a custom definition. Read-only. Supports $filter (eq, in).'
        ),
    ] = None
    is_enabled: Annotated[
        bool | None,
        Field(
            description='Flag indicating whether the role is enabled for assignment. If false the role is not available for assignment. Read-only when isBuiltIn is true.'
        ),
    ] = None
    resource_scopes: Annotated[
        List[str] | None,
        Field(
            description='List of the scopes or permissions the role definition applies to. Currently only / is supported. Read-only when isBuiltIn is true. DO NOT USE. This will be deprecated soon. Attach scope to role assignment.'
        ),
    ] = None
    role_permissions: Annotated[
        List[UnifiedRolePermission] | None,
        Field(
            description='List of permissions included in the role. Read-only when isBuiltIn is true. Required.'
        ),
    ] = None
    template_id: Annotated[
        str | None,
        Field(
            description='Custom template identifier that can be set when isBuiltIn is false but is read-only when isBuiltIn is true. This identifier is typically used if one needs an identifier to be the same across different directories.'
        ),
    ] = None
    version: Annotated[
        str | None,
        Field(
            description='Indicates version of the role definition. Read-only when isBuiltIn is true.'
        ),
    ] = None


class UnifiedStorageQuota(Entity):
    field_odata_type: str
    deleted: float | None = None
    manage_web_url: str | None = None
    remaining: float | None = None
    services: List[ServiceStorageQuotaBreakdown] | None = None
    state: str | None = None
    total: float | None = None
    used: float | None = None


class UserSolutionRoot(Entity):
    field_odata_type: str
    working_time_schedule: Annotated[
        WorkingTimeSchedule | Dict[str, Any] | None,
        Field(
            description='The working time schedule entity associated with the solution.'
        ),
    ] = None


class UserStorage(Entity):
    field_odata_type: str
    quota: UnifiedStorageQuota | Dict[str, Any] | None = None


class Website(BaseModel):
    field_odata_type: str
    address: Annotated[str | None, Field(description='The URL of the website.')] = None
    display_name: Annotated[
        str | None, Field(description='The display name of the web site.')
    ] = None
    type: Annotated[
        WebsiteType | Dict[str, Any] | None,
        Field(description='The possible values are: other, home, work, blog, profile.'),
    ] = None


class WindowsDeviceMalwareState(Entity):
    field_odata_type: str
    additional_information_url: Annotated[
        str | None, Field(description='Information URL to learn more about the malware')
    ] = None
    category: Annotated[
        WindowsMalwareCategory | Dict[str, Any] | None,
        Field(
            description='Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.'
        ),
    ] = None
    detection_count: Annotated[
        float | None,
        Field(
            description='Number of times the malware is detected',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    display_name: Annotated[str | None, Field(description='Malware name')] = None
    execution_state: Annotated[
        WindowsMalwareExecutionState | Dict[str, Any] | None,
        Field(
            description='Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.'
        ),
    ] = None
    initial_detection_date_time: Annotated[
        datetime | None,
        Field(
            description='Initial detection datetime of the malware',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_state_change_date_time: Annotated[
        datetime | None,
        Field(
            description='The last time this particular threat was changed',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    severity: Annotated[
        WindowsMalwareSeverity | Dict[str, Any] | None,
        Field(
            description='Severity of the malware. Possible values are: unknown, low, moderate, high, severe.'
        ),
    ] = None
    state: Annotated[
        WindowsMalwareState | Dict[str, Any] | None,
        Field(
            description='Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.'
        ),
    ] = None
    threat_state: Annotated[
        WindowsMalwareThreatState | Dict[str, Any] | None,
        Field(
            description='Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.'
        ),
    ] = None


class WindowsProtectionState(Entity):
    field_odata_type: str
    anti_malware_version: Annotated[
        str | None, Field(description='Current anti malware version')
    ] = None
    detected_malware_state: Annotated[
        List[WindowsDeviceMalwareState] | None, Field(description='Device malware list')
    ] = None
    device_state: Annotated[
        WindowsDeviceHealthState | Dict[str, Any] | None,
        Field(
            description="Indicates device's health state. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical."
        ),
    ] = None
    engine_version: Annotated[
        str | None, Field(description="Current endpoint protection engine's version")
    ] = None
    full_scan_overdue: Annotated[
        bool | None,
        Field(
            description='When TRUE indicates full scan is overdue, when FALSE indicates full scan is not overdue. Defaults to setting on client device.'
        ),
    ] = None
    full_scan_required: Annotated[
        bool | None,
        Field(
            description='When TRUE indicates full scan is required, when FALSE indicates full scan is not required. Defaults to setting on client device.'
        ),
    ] = None
    is_virtual_machine: Annotated[
        bool | None,
        Field(
            description='When TRUE indicates the device is a virtual machine, when FALSE indicates the device is not a virtual machine. Defaults to setting on client device.'
        ),
    ] = None
    last_full_scan_date_time: Annotated[
        datetime | None,
        Field(
            description='Last quick scan datetime',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_full_scan_signature_version: Annotated[
        str | None, Field(description='Last full scan signature version')
    ] = None
    last_quick_scan_date_time: Annotated[
        datetime | None,
        Field(
            description='Last quick scan datetime',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_quick_scan_signature_version: Annotated[
        str | None, Field(description='Last quick scan signature version')
    ] = None
    last_reported_date_time: Annotated[
        datetime | None,
        Field(
            description='Last device health status reported time',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    malware_protection_enabled: Annotated[
        bool | None,
        Field(
            description='When TRUE indicates anti malware is enabled when FALSE indicates anti malware is not enabled.'
        ),
    ] = None
    network_inspection_system_enabled: Annotated[
        bool | None,
        Field(
            description='When TRUE indicates network inspection system enabled, when FALSE indicates network inspection system is not enabled. Defaults to setting on client device.'
        ),
    ] = None
    product_status: Annotated[
        WindowsDefenderProductStatus | Dict[str, Any] | None,
        Field(
            description='Product Status of Windows Defender Antivirus. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall.'
        ),
    ] = None
    quick_scan_overdue: Annotated[
        bool | None,
        Field(
            description='When TRUE indicates quick scan is overdue, when FALSE indicates quick scan is not overdue. Defaults to setting on client device.'
        ),
    ] = None
    real_time_protection_enabled: Annotated[
        bool | None,
        Field(
            description='When TRUE indicates real time protection is enabled, when FALSE indicates real time protection is not enabled. Defaults to setting on client device.'
        ),
    ] = None
    reboot_required: Annotated[
        bool | None,
        Field(
            description='When TRUE indicates reboot is required, when FALSE indicates when TRUE indicates reboot is not required. Defaults to setting on client device.'
        ),
    ] = None
    signature_update_overdue: Annotated[
        bool | None,
        Field(
            description='When TRUE indicates signature is out of date, when FALSE indicates signature is not out of date. Defaults to setting on client device.'
        ),
    ] = None
    signature_version: Annotated[
        str | None, Field(description='Current malware definitions version')
    ] = None
    tamper_protection_enabled: Annotated[
        bool | None,
        Field(
            description='When TRUE indicates the Windows Defender tamper protection feature is enabled, when FALSE indicates the Windows Defender tamper protection feature is not enabled. Defaults to setting on client device.'
        ),
    ] = None


class WindowsSetting(Entity):
    field_odata_type: str
    instances: Annotated[
        List[WindowsSettingInstance] | None,
        Field(description='A collection of setting values for a given windowsSetting.'),
    ] = None
    payload_type: Annotated[
        str | None,
        Field(
            description='The type of setting payloads contained in the instances navigation property.'
        ),
    ] = None
    setting_type: WindowsSettingType | None = None
    windows_device_id: Annotated[
        str | None,
        Field(
            description='A unique identifier for the device the setting might belong to if it is of the settingType backup.'
        ),
    ] = None


class WorkbookChartAreaFormat(Entity):
    field_odata_type: str
    fill: Annotated[
        WorkbookChartFill | Dict[str, Any] | None,
        Field(
            description='Represents the fill format of an object, which includes background formatting information. Read-only.'
        ),
    ] = None
    font: Annotated[
        WorkbookChartFont | Dict[str, Any] | None,
        Field(
            description='Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.'
        ),
    ] = None


class WorkbookChartAxisFormat(Entity):
    field_odata_type: str
    font: Annotated[
        WorkbookChartFont | Dict[str, Any] | None,
        Field(
            description='Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.'
        ),
    ] = None
    line: Annotated[
        WorkbookChartLineFormat | Dict[str, Any] | None,
        Field(description='Represents chart line formatting. Read-only.'),
    ] = None


class WorkbookChartAxisTitleFormat(Entity):
    field_odata_type: str
    font: Annotated[
        WorkbookChartFont | Dict[str, Any] | None,
        Field(
            description='Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.'
        ),
    ] = None


class WorkbookChartDataLabelFormat(Entity):
    field_odata_type: str
    fill: Annotated[
        WorkbookChartFill | Dict[str, Any] | None,
        Field(
            description='Represents the fill format of the current chart data label. Read-only.'
        ),
    ] = None
    font: Annotated[
        WorkbookChartFont | Dict[str, Any] | None,
        Field(
            description='Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.'
        ),
    ] = None


class WorkbookChartDataLabels(Entity):
    field_odata_type: str
    format: Annotated[
        WorkbookChartDataLabelFormat | Dict[str, Any] | None,
        Field(
            description='Represents the format of chart data labels, which includes fill and font formatting. Read-only.'
        ),
    ] = None
    position: Annotated[
        str | None,
        Field(
            description='DataLabelPosition value that represents the position of the data label. The possible values are: None, Center, InsideEnd, InsideBase, OutsideEnd, Left, Right, Top, Bottom, BestFit, Callout.'
        ),
    ] = None
    separator: Annotated[
        str | None,
        Field(
            description='String that represents the separator used for the data labels on a chart.'
        ),
    ] = None
    show_bubble_size: Annotated[
        bool | None,
        Field(
            description='Boolean value that represents whether the data label bubble size is visible.'
        ),
    ] = None
    show_category_name: Annotated[
        bool | None,
        Field(
            description='Boolean value that represents whether the data label category name is visible.'
        ),
    ] = None
    show_legend_key: Annotated[
        bool | None,
        Field(
            description='Boolean value that represents whether the data label legend key is visible.'
        ),
    ] = None
    show_percentage: Annotated[
        bool | None,
        Field(
            description='Boolean value that represents whether the data label percentage is visible.'
        ),
    ] = None
    show_series_name: Annotated[
        bool | None,
        Field(
            description='Boolean value that represents whether the data label series name is visible.'
        ),
    ] = None
    show_value: Annotated[
        bool | None,
        Field(
            description='Boolean value that represents whether the data label value is visible.'
        ),
    ] = None


class WorkbookChartGridlinesFormat(Entity):
    field_odata_type: str
    line: Annotated[
        WorkbookChartLineFormat | Dict[str, Any] | None,
        Field(description='Represents chart line formatting. Read-only.'),
    ] = None


class WorkbookChartLegend(Entity):
    field_odata_type: str
    format: Annotated[
        WorkbookChartLegendFormat | Dict[str, Any] | None,
        Field(
            description='Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.'
        ),
    ] = None
    overlay: Annotated[
        bool | None,
        Field(
            description='Indicates whether the chart legend should overlap with the main body of the chart.'
        ),
    ] = None
    position: Annotated[
        str | None,
        Field(
            description='Represents the position of the legend on the chart. The possible values are: Top, Bottom, Left, Right, Corner, Custom.'
        ),
    ] = None
    visible: Annotated[
        bool | None, Field(description='Indicates whether the chart legend is visible.')
    ] = None


class WorkbookChartPoint(Entity):
    field_odata_type: str
    format: Annotated[
        WorkbookChartPointFormat | Dict[str, Any] | None,
        Field(description='The format properties of the chart point. Read-only.'),
    ] = None
    value: Annotated[
        Any | None, Field(description='The value of a chart point. Read-only.')
    ] = None


class WorkbookChartSeries(Entity):
    field_odata_type: str
    format: Annotated[
        WorkbookChartSeriesFormat | Dict[str, Any] | None,
        Field(
            description='The formatting of a chart series, which includes fill and line formatting. Read-only.'
        ),
    ] = None
    name: Annotated[
        str | None, Field(description='The name of a series in a chart.')
    ] = None
    points: Annotated[
        List[WorkbookChartPoint] | None,
        Field(description='A collection of all points in the series. Read-only.'),
    ] = None


class WorkbookChartTitle(Entity):
    field_odata_type: str
    format: Annotated[
        WorkbookChartTitleFormat | Dict[str, Any] | None,
        Field(
            description='The formatting of a chart title, which includes fill and font formatting. Read-only.'
        ),
    ] = None
    overlay: Annotated[
        bool | None,
        Field(
            description='Indicates whether the chart title will overlay the chart or not.'
        ),
    ] = None
    text: Annotated[str | None, Field(description='The title text of the chart.')] = (
        None
    )
    visible: Annotated[
        bool | None, Field(description='Indicates whether the chart title is visible.')
    ] = None


class WorkbookComment(Entity):
    field_odata_type: str
    content: Annotated[str | None, Field(description='The content of the comment.')] = (
        None
    )
    content_type: Annotated[
        str | None, Field(description='The content type of the comment.')
    ] = None
    replies: Annotated[
        List[WorkbookCommentReply] | None,
        Field(description='The list of replies to the comment. Read-only. Nullable.'),
    ] = None


class WorkbookFilterCriteria(BaseModel):
    field_odata_type: str
    color: Annotated[
        str | None, Field(description='The color applied to the cell.')
    ] = None
    criterion1: Annotated[str | None, Field(description='A custom criterion.')] = None
    criterion2: Annotated[str | None, Field(description='A custom criterion.')] = None
    dynamic_criteria: Annotated[
        str | None, Field(description='A dynamic formula specified in a custom filter.')
    ] = None
    filter_on: Annotated[
        str | None,
        Field(description='Indicates whether a filter is applied to a column.'),
    ] = None
    icon: Annotated[
        WorkbookIcon | Dict[str, Any] | None,
        Field(description='An icon applied to a cell via conditional formatting.'),
    ] = None
    operator: Annotated[
        str | None,
        Field(description='An operator in a cell; for example, =, >, <, <=, or <>.'),
    ] = None
    values: Annotated[
        Any | None, Field(description='The values that appear in the cell.')
    ] = None


class WorkbookOperation(Entity):
    field_odata_type: str
    error: Annotated[
        WorkbookOperationError | Dict[str, Any] | None,
        Field(description='The error returned by the operation.'),
    ] = None
    resource_location: Annotated[
        str | None, Field(description='The resource URI for the result.')
    ] = None
    status: WorkbookOperationStatus | None = None


class WorkbookWorksheetProtection(Entity):
    field_odata_type: str
    options: Annotated[
        WorkbookWorksheetProtectionOptions | Dict[str, Any] | None,
        Field(description='Worksheet protection options. Read-only.'),
    ] = None
    protected: Annotated[
        bool | None,
        Field(description='Indicates whether the worksheet is protected.  Read-only.'),
    ] = None


class AppRoleAssignment(DirectoryObject):
    field_odata_type: str
    app_role_id: Annotated[
        UUID | None,
        Field(
            description="The identifier (id) for the app role that's assigned to the principal. This app role must be exposed in the appRoles property on the resource application's service principal (resourceId). If the resource application hasn't declared any app roles, a default app role ID of 00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to the resource app without any specific app roles. Required on create.",
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The time when the app role assignment was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    principal_display_name: Annotated[
        str | None,
        Field(
            description='The display name of the user, group, or service principal that was granted the app role assignment. Maximum length is 256 characters. Read-only. Supports $filter (eq and startswith).'
        ),
    ] = None
    principal_id: Annotated[
        UUID | None,
        Field(
            description='The unique identifier (id) for the user, security group, or service principal being granted the app role. Security groups with dynamic memberships are supported. Required on create.',
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        ),
    ] = None
    principal_type: Annotated[
        str | None,
        Field(
            description='The type of the assigned principal. This can either be User, Group, or ServicePrincipal. Read-only.'
        ),
    ] = None
    resource_display_name: Annotated[
        str | None,
        Field(
            description="The display name of the resource app's service principal to which the assignment is made. Maximum length is 256 characters."
        ),
    ] = None
    resource_id: Annotated[
        UUID | None,
        Field(
            description='The unique identifier (id) for the resource service principal for which the assignment is made. Required on create. Supports $filter (eq only).',
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        ),
    ] = None


class Attendee(AttendeeBase):
    field_odata_type: str
    proposed_new_time: Annotated[
        TimeSlot | Dict[str, Any] | None,
        Field(
            description="An alternate date/time proposed by the attendee for a meeting request to start and end. If the attendee hasn't proposed another time, then this property isn't included in a response of a GET event."
        ),
    ] = None
    status: Annotated[
        ResponseStatus | Dict[str, Any] | None,
        Field(
            description="The attendee's response (none, accepted, declined, etc.) for the event and date-time that the response was sent."
        ),
    ] = None


class ChatMessageMentionedIdentitySet(IdentitySet):
    field_odata_type: str
    conversation: Annotated[
        TeamworkConversationIdentity | Dict[str, Any] | None,
        Field(
            description='If present, represents a conversation (for example, team, channel, or chat) @mentioned in a message.'
        ),
    ] = None


class ChatMessageReaction(BaseModel):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    display_name: Annotated[
        str | None, Field(description='The name of the reaction.')
    ] = None
    reaction_content_url: Annotated[
        str | None,
        Field(description='The hosted content URL for the custom reaction type.'),
    ] = None
    reaction_type: Annotated[
        str | None,
        Field(
            description='The reaction type. Supported values include Unicode characters, custom, and some backward-compatible reaction types, such as like, angry, sad, laugh, heart, and surprised.'
        ),
    ] = None
    user: ChatMessageReactionIdentitySet | None = None


class ConditionalAccessApplications(BaseModel):
    field_odata_type: str
    application_filter: ConditionalAccessFilter | Dict[str, Any] | None = None
    exclude_applications: Annotated[
        List[str] | None,
        Field(
            description='Can be one of the following:  The list of client IDs (appId) explicitly excluded from the policy. Office365 - For the list of apps included in Office365, see Apps included in Conditional Access Office 365 app suite  MicrosoftAdminPortals - For more information, see Conditional Access Target resources: Microsoft Admin Portals'
        ),
    ] = None
    include_applications: Annotated[
        List[str] | None,
        Field(
            description='Can be one of the following:  The list of client IDs (appId) the policy applies to, unless explicitly excluded (in excludeApplications)  All  Office365 - For the list of apps included in Office365, see Apps included in Conditional Access Office 365 app suite  MicrosoftAdminPortals - For more information, see Conditional Access Target resources: Microsoft Admin Portals'
        ),
    ] = None
    include_authentication_context_class_references: List[str] | None = None
    include_user_actions: Annotated[
        List[str] | None,
        Field(
            description='User actions to include. Supported values are urn:user:registersecurityinfo and urn:user:registerdevice'
        ),
    ] = None


class ConditionalAccessClientApplications(BaseModel):
    field_odata_type: str
    exclude_service_principals: Annotated[
        List[str] | None,
        Field(description='Service principal IDs excluded from the policy scope.'),
    ] = None
    include_service_principals: Annotated[
        List[str] | None,
        Field(
            description='Service principal IDs included in the policy scope, or ServicePrincipalsInMyTenant.'
        ),
    ] = None
    service_principal_filter: Annotated[
        ConditionalAccessFilter | Dict[str, Any] | None,
        Field(
            description='Filter that defines the dynamic-servicePrincipal-syntax rule to include/exclude service principals. A filter can use custom security attributes to include/exclude service principals.'
        ),
    ] = None


class ConditionalAccessDevices(BaseModel):
    field_odata_type: str
    device_filter: Annotated[
        ConditionalAccessFilter | Dict[str, Any] | None,
        Field(
            description='Filter that defines the dynamic-device-syntax rule to include/exclude devices. A filter can use device properties (such as extension attributes) to include/exclude them.'
        ),
    ] = None


class ConditionalAccessSessionControls(BaseModel):
    field_odata_type: str
    application_enforced_restrictions: Annotated[
        ApplicationEnforcedRestrictionsSessionControl | Dict[str, Any] | None,
        Field(
            description='Session control to enforce application restrictions. Only Exchange Online and Sharepoint Online support this session control.'
        ),
    ] = None
    cloud_app_security: Annotated[
        CloudAppSecuritySessionControl | Dict[str, Any] | None,
        Field(description='Session control to apply cloud app security.'),
    ] = None
    disable_resilience_defaults: Annotated[
        bool | None,
        Field(
            description='Session control that determines whether it is acceptable for Microsoft Entra ID to extend existing sessions based on information collected prior to an outage or not.'
        ),
    ] = None
    persistent_browser: Annotated[
        PersistentBrowserSessionControl | Dict[str, Any] | None,
        Field(
            description='Session control to define whether to persist cookies or not. All apps should be selected for this session control to work correctly.'
        ),
    ] = None
    sign_in_frequency: Annotated[
        SignInFrequencySessionControl | Dict[str, Any] | None,
        Field(description='Session control to enforce signin frequency.'),
    ] = None


class ConversationThread(Entity):
    field_odata_type: str
    cc_recipients: Annotated[
        List[Recipient] | None,
        Field(
            description='The Cc: recipients for the thread. Returned only on $select.'
        ),
    ] = None
    has_attachments: Annotated[
        bool | None,
        Field(
            description='Indicates whether any of the posts within this thread has at least one attachment. Returned by default.'
        ),
    ] = None
    is_locked: Annotated[
        bool | None,
        Field(description='Indicates if the thread is locked. Returned by default.'),
    ] = None
    last_delivered_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.Returned by default.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    posts: List[Post] | None = None
    preview: Annotated[
        str | None,
        Field(
            description='A short summary from the body of the latest post in this conversation. Returned by default.'
        ),
    ] = None
    to_recipients: Annotated[
        List[Recipient] | None,
        Field(
            description='The To: recipients for the thread. Returned only on $select.'
        ),
    ] = None
    topic: Annotated[
        str | None,
        Field(
            description='The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated. Returned by default.'
        ),
    ] = None
    unique_senders: Annotated[
        List[str] | None,
        Field(
            description='All the users that sent a message to this thread. Returned by default.'
        ),
    ] = None


class Device(DirectoryObject):
    field_odata_type: str
    account_enabled: Annotated[
        bool | None,
        Field(
            description='true if the account is enabled; otherwise, false. Required. Default is true.  Supports $filter (eq, ne, not, in). Only callers with at least the Cloud Device Administrator role can set this property.'
        ),
    ] = None
    alternative_security_ids: Annotated[
        List[AlternativeSecurityId] | None,
        Field(
            description='For internal use only. Not nullable. Supports $filter (eq, not, ge, le).'
        ),
    ] = None
    approximate_last_sign_in_date_time: Annotated[
        datetime | None,
        Field(
            description='The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Supports $filter (eq, ne, not, ge, le, and eq on null values) and $orderby.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    compliance_expiration_date_time: Annotated[
        datetime | None,
        Field(
            description='The timestamp when the device is no longer deemed compliant. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    device_category: Annotated[
        str | None,
        Field(
            description='User-defined property set by Intune to automatically add devices to groups and simplify managing devices.'
        ),
    ] = None
    device_id: Annotated[
        str | None,
        Field(
            description='Unique identifier set by Azure Device Registration Service at the time of registration. This alternate key can be used to reference the device object. Supports $filter (eq, ne, not, startsWith).'
        ),
    ] = None
    device_metadata: Annotated[
        str | None, Field(description='For internal use only. Set to null.')
    ] = None
    device_ownership: Annotated[
        str | None,
        Field(
            description='Ownership of the device. Intune sets this property. Possible values are: unknown, company, personal.'
        ),
    ] = None
    device_version: Annotated[
        float | None,
        Field(description='For internal use only.', ge=-2147483648.0, le=2147483647.0),
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description='The display name for the device. Maximum length is 256 characters. Required. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby.'
        ),
    ] = None
    enrollment_profile_name: Annotated[
        str | None,
        Field(
            description='Enrollment profile applied to the device. For example, Apple Device Enrollment Profile, Device enrollment - Corporate device identifiers, or Windows Autopilot profile name. This property is set by Intune.'
        ),
    ] = None
    enrollment_type: Annotated[
        str | None,
        Field(
            description='Enrollment type of the device. Intune sets this property. Possible values are: unknown, userEnrollment, deviceEnrollmentManager, appleBulkWithUser, appleBulkWithoutUser, windowsAzureADJoin, windowsBulkUserless, windowsAutoEnrollment, windowsBulkAzureDomainJoin, windowsCoManagement, windowsAzureADJoinUsingDeviceAuth,appleUserEnrollment, appleUserEnrollmentWithServiceAccount. NOTE: This property might return other values apart from those listed.'
        ),
    ] = None
    extensions: Annotated[
        List[Extension] | None,
        Field(
            description='The collection of open extensions defined for the device. Read-only. Nullable.'
        ),
    ] = None
    is_compliant: Annotated[
        bool | None,
        Field(
            description='true if the device complies with Mobile Device Management (MDM) policies; otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not).'
        ),
    ] = None
    is_managed: Annotated[
        bool | None,
        Field(
            description='true if the device is managed by a Mobile Device Management (MDM) app; otherwise, false. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not).'
        ),
    ] = None
    is_management_restricted: bool | None = None
    is_rooted: Annotated[
        bool | None,
        Field(
            description='true if the device is rooted or jail-broken. This property can only be updated by Intune.'
        ),
    ] = None
    management_type: Annotated[
        str | None,
        Field(
            description='The management channel of the device. This property is set by Intune. Possible values are: eas, mdm, easMdm, intuneClient, easIntuneClient, configurationManagerClient, configurationManagerClientMdm, configurationManagerClientMdmEas, unknown, jamf, googleCloudDevicePolicyController.'
        ),
    ] = None
    manufacturer: Annotated[
        str | None, Field(description='Manufacturer of the device. Read-only.')
    ] = None
    mdm_app_id: Annotated[
        str | None,
        Field(
            description='Application identifier used to register device into MDM. Read-only. Supports $filter (eq, ne, not, startsWith).'
        ),
    ] = None
    member_of: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='Groups and administrative units that this device is a member of. Read-only. Nullable. Supports $expand.'
        ),
    ] = None
    model: Annotated[
        str | None, Field(description='Model of the device. Read-only.')
    ] = None
    on_premises_last_sync_date_time: Annotated[
        datetime | None,
        Field(
            description='The last time at which the object was synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Read-only. Supports $filter (eq, ne, not, ge, le, in).',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    on_premises_security_identifier: Annotated[
        str | None,
        Field(
            description='The on-premises security identifier (SID) for the user who was synchronized from on-premises to the cloud. Read-only. Returned only on $select. Supports $filter (eq).'
        ),
    ] = None
    on_premises_sync_enabled: Annotated[
        bool | None,
        Field(
            description='true if this object is synced from an on-premises directory; false if this object was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only. Supports $filter (eq, ne, not, in, and eq on null values).'
        ),
    ] = None
    operating_system: Annotated[
        str | None,
        Field(
            description='The type of operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values).'
        ),
    ] = None
    operating_system_version: Annotated[
        str | None,
        Field(
            description='The version of the operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values).'
        ),
    ] = None
    physical_ids: Annotated[
        List[str] | None,
        Field(
            description='For internal use only. Not nullable. Supports $filter (eq, not, ge, le, startsWith,/$count eq 0, /$count ne 0).'
        ),
    ] = None
    profile_type: Annotated[
        str | None,
        Field(
            description='The profile type of the device. Possible values: RegisteredDevice (default), SecureVM, Printer, Shared, IoT.'
        ),
    ] = None
    registered_owners: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='The user that cloud joined the device or registered their personal device. The registered owner is set at the time of registration. Read-only. Nullable. Supports $expand.'
        ),
    ] = None
    registered_users: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='Collection of registered users of the device. For cloud joined devices and registered personal devices, registered users are set to the same value as registered owners at the time of registration. Read-only. Nullable. Supports $expand.'
        ),
    ] = None
    registration_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time of when the device was registered. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    system_labels: Annotated[
        List[str] | None,
        Field(
            description='List of labels applied to the device by the system. Supports $filter (/$count eq 0, /$count ne 0).'
        ),
    ] = None
    transitive_member_of: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='Groups and administrative units that the device is a member of. This operation is transitive. Supports $expand.'
        ),
    ] = None
    trust_type: Annotated[
        str | None,
        Field(
            description='Type of trust for the joined device. Read-only. Possible values:  Workplace (indicates bring your own personal devices), AzureAd (Cloud-only joined devices), ServerAd (on-premises domain joined devices joined to Microsoft Entra ID). For more information, see Introduction to device management in Microsoft Entra ID.'
        ),
    ] = None


class DeviceCompliancePolicySettingState(BaseModel):
    field_odata_type: str
    current_value: Annotated[
        str | None, Field(description='Current value of setting on device')
    ] = None
    error_code: Annotated[
        float | None, Field(description='Error code for the setting')
    ] = None
    error_description: Annotated[str | None, Field(description='Error description')] = (
        None
    )
    instance_display_name: Annotated[
        str | None,
        Field(description='Name of setting instance that is being reported.'),
    ] = None
    setting: Annotated[
        str | None, Field(description='The setting that is being reported')
    ] = None
    setting_name: Annotated[
        str | None,
        Field(
            description='Localized/user friendly setting name that is being reported'
        ),
    ] = None
    sources: Annotated[
        List[SettingSource] | None, Field(description='Contributing policies')
    ] = None
    state: ComplianceStatus | None = None
    user_email: Annotated[str | None, Field(description='UserEmail')] = None
    user_id: Annotated[str | None, Field(description='UserId')] = None
    user_name: Annotated[str | None, Field(description='UserName')] = None
    user_principal_name: Annotated[
        str | None, Field(description='UserPrincipalName.')
    ] = None


class DeviceCompliancePolicyState(Entity):
    field_odata_type: str
    display_name: Annotated[
        str | None, Field(description='The name of the policy for this policyBase')
    ] = None
    platform_type: PolicyPlatformType | None = None
    setting_count: Annotated[
        float | None,
        Field(
            description='Count of how many setting a policy holds',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    setting_states: List[DeviceCompliancePolicySettingState] | None = None
    state: ComplianceStatus | None = None
    version: Annotated[
        float | None,
        Field(
            description='The version of the policy', ge=-2147483648.0, le=2147483647.0
        ),
    ] = None


class DeviceConfigurationSettingState(BaseModel):
    field_odata_type: str
    current_value: Annotated[
        str | None, Field(description='Current value of setting on device')
    ] = None
    error_code: Annotated[
        float | None, Field(description='Error code for the setting')
    ] = None
    error_description: Annotated[str | None, Field(description='Error description')] = (
        None
    )
    instance_display_name: Annotated[
        str | None,
        Field(description='Name of setting instance that is being reported.'),
    ] = None
    setting: Annotated[
        str | None, Field(description='The setting that is being reported')
    ] = None
    setting_name: Annotated[
        str | None,
        Field(
            description='Localized/user friendly setting name that is being reported'
        ),
    ] = None
    sources: Annotated[
        List[SettingSource] | None, Field(description='Contributing policies')
    ] = None
    state: ComplianceStatus | None = None
    user_email: Annotated[str | None, Field(description='UserEmail')] = None
    user_id: Annotated[str | None, Field(description='UserId')] = None
    user_name: Annotated[str | None, Field(description='UserName')] = None
    user_principal_name: Annotated[
        str | None, Field(description='UserPrincipalName.')
    ] = None


class DeviceConfigurationState(Entity):
    field_odata_type: str
    display_name: Annotated[
        str | None, Field(description='The name of the policy for this policyBase')
    ] = None
    platform_type: PolicyPlatformType | None = None
    setting_count: Annotated[
        float | None,
        Field(
            description='Count of how many setting a policy holds',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    setting_states: List[DeviceConfigurationSettingState] | None = None
    state: ComplianceStatus | None = None
    version: Annotated[
        float | None,
        Field(
            description='The version of the policy', ge=-2147483648.0, le=2147483647.0
        ),
    ] = None


class DocumentSetVersion(ListItemVersion):
    field_odata_type: str
    comment: Annotated[
        str | None, Field(description='Comment about the captured version.')
    ] = None
    created_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='User who captured the version.'),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time when this version was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    items: Annotated[
        List[DocumentSetVersionItem] | None,
        Field(
            description='Items within the document set that are captured as part of this version.'
        ),
    ] = None
    should_capture_minor_version: Annotated[
        bool | None,
        Field(
            description='If true, minor versions of items are also captured; otherwise, only major versions are captured. The default value is false.'
        ),
    ] = None


class InferenceClassification(Entity):
    field_odata_type: str
    overrides: Annotated[
        List[InferenceClassificationOverride] | None,
        Field(
            description='A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.'
        ),
    ] = None


class ItemRetentionLabel(Entity):
    field_odata_type: str
    is_label_applied_explicitly: Annotated[
        bool | None,
        Field(
            description='Specifies whether the label is applied explicitly on the item. True indicates that the label is applied explicitly; otherwise, the label is inherited from its parent. Read-only.'
        ),
    ] = None
    label_applied_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='Identity of the user who applied the label. Read-only.'),
    ] = None
    label_applied_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the label was applied on the item. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(description='The retention label on the document. Read-write.'),
    ] = None
    retention_settings: Annotated[
        RetentionLabelSettings | Dict[str, Any] | None,
        Field(description='The retention settings enforced on the item. Read-write.'),
    ] = None


class MessageRule(Entity):
    field_odata_type: str
    actions: Annotated[
        MessageRuleActions | Dict[str, Any] | None,
        Field(
            description='Actions to be taken on a message when the corresponding conditions are fulfilled.'
        ),
    ] = None
    conditions: Annotated[
        MessageRulePredicates | Dict[str, Any] | None,
        Field(
            description='Conditions that when fulfilled trigger the corresponding actions for that rule.'
        ),
    ] = None
    display_name: Annotated[
        str | None, Field(description='The display name of the rule.')
    ] = None
    exceptions: Annotated[
        MessageRulePredicates | Dict[str, Any] | None,
        Field(description='Exception conditions for the rule.'),
    ] = None
    has_error: Annotated[
        bool | None,
        Field(
            description='Indicates whether the rule is in an error condition. Read-only.'
        ),
    ] = None
    is_enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether the rule is enabled to be applied to messages.'
        ),
    ] = None
    is_read_only: Annotated[
        bool | None,
        Field(
            description='Indicates if the rule is read-only and cannot be modified or deleted by the rules REST API.'
        ),
    ] = None
    sequence: Annotated[
        float | None,
        Field(
            description='Indicates the order in which the rule is executed, among other rules.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class MicrosoftAuthenticatorAuthenticationMethod(AuthenticationMethod):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description="The date and time that this app was registered. This property is null if the device isn't registered for passwordless Phone Sign-In.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    device: Annotated[
        Device | Dict[str, Any] | None,
        Field(
            description="The registered device on which Microsoft Authenticator resides. This property is null if the device isn't registered for passwordless Phone Sign-In."
        ),
    ] = None
    device_tag: Annotated[
        str | None, Field(description='Tags containing app metadata.')
    ] = None
    display_name: Annotated[
        str | None,
        Field(description='The name of the device on which this app is registered.'),
    ] = None
    phone_app_version: Annotated[
        str | None,
        Field(
            description='Numerical version of this instance of the Authenticator app.'
        ),
    ] = None


class OfferShiftRequest(ScheduleChangeRequest):
    field_odata_type: str
    recipient_action_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    recipient_action_message: Annotated[
        str | None,
        Field(
            description='Custom message sent by recipient of the offer shift request.'
        ),
    ] = None
    recipient_user_id: Annotated[
        str | None,
        Field(description='User ID of the recipient of the offer shift request.'),
    ] = None
    sender_shift_id: Annotated[
        str | None,
        Field(description='User ID of the sender of the offer shift request.'),
    ] = None


class OfficeGraphInsights(Entity):
    field_odata_type: str
    shared: Annotated[
        List[SharedInsight] | None,
        Field(
            description='Calculated relationship that identifies documents shared with or by the user. This includes URLs, file attachments, and reference attachments to OneDrive for work or school and SharePoint files found in Outlook messages and meetings. This also includes URLs and reference attachments to Teams conversations. Ordered by recency of share.'
        ),
    ] = None
    trending: Annotated[
        List[Trending] | None,
        Field(
            description="Calculated relationship that identifies documents trending around a user. Trending documents are calculated based on activity of the user's closest network of people and include files stored in OneDrive for work or school and SharePoint. Trending insights help the user to discover potentially useful content that the user has access to, but has never viewed before."
        ),
    ] = None
    used: Annotated[
        List[UsedInsight] | None,
        Field(
            description='Calculated relationship that identifies the latest documents viewed or modified by a user, including OneDrive for work or school and SharePoint documents, ranked by recency of use.'
        ),
    ] = None


class OnenoteOperation(Operation):
    field_odata_type: str
    error: Annotated[
        OnenoteOperationError | Dict[str, Any] | None,
        Field(description='The error returned by the operation.'),
    ] = None
    percent_complete: Annotated[
        str | None,
        Field(
            description='The operation percent complete if the operation is still in running status.'
        ),
    ] = None
    resource_id: Annotated[str | None, Field(description='The resource id.')] = None
    resource_location: Annotated[
        str | None,
        Field(
            description='The resource URI for the object. For example, the resource URI for a copied page or section.'
        ),
    ] = None


class OnlineMeeting(OnlineMeetingBase):
    field_odata_type: str
    attendee_report: Annotated[
        str | None,
        Field(
            description='The content stream of the attendee report of a Microsoft Teams live event. Read-only.'
        ),
    ] = None
    broadcast_settings: Annotated[
        BroadcastMeetingSettings | Dict[str, Any] | None,
        Field(description='Settings related to a live event.'),
    ] = None
    creation_date_time: Annotated[
        datetime | None,
        Field(
            description='The meeting creation time in UTC. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    end_date_time: Annotated[
        datetime | None,
        Field(
            description='The meeting end time in UTC. Required when you create an online meeting.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    external_id: str | None = None
    is_broadcast: Annotated[
        bool | None,
        Field(description='Indicates whether this meeting is a Teams live event.'),
    ] = None
    meeting_template_id: Annotated[
        str | None, Field(description='The ID of the meeting template.')
    ] = None
    participants: Annotated[
        MeetingParticipants | Dict[str, Any] | None,
        Field(
            description='The participants associated with the online meeting, including the organizer and the attendees.'
        ),
    ] = None
    recordings: Annotated[
        List[CallRecording] | None,
        Field(description='The recordings of an online meeting. Read-only.'),
    ] = None
    start_date_time: Annotated[
        datetime | None,
        Field(
            description='The meeting start time in UTC.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    transcripts: Annotated[
        List[CallTranscript] | None,
        Field(description='The transcripts of an online meeting. Read-only.'),
    ] = None


class OnlineMeetingInfo(BaseModel):
    field_odata_type: str
    conference_id: Annotated[
        str | None, Field(description='The ID of the conference.')
    ] = None
    join_url: Annotated[
        str | None,
        Field(
            description='The external link that launches the online meeting. This is a URL that clients launch into a browser and will redirect the user to join the meeting.'
        ),
    ] = None
    phones: Annotated[
        List[Phone] | None,
        Field(description='All of the phone numbers associated with this conference.'),
    ] = None
    quick_dial: Annotated[
        str | None, Field(description='The preformatted quick dial for this call.')
    ] = None
    toll_free_numbers: Annotated[
        List[str] | None,
        Field(
            description='The toll free numbers that can be used to join the conference.'
        ),
    ] = None
    toll_number: Annotated[
        str | None,
        Field(description='The toll number that can be used to join the conference.'),
    ] = None


class OpenShiftChangeRequest(ScheduleChangeRequest):
    field_odata_type: str
    open_shift_id: Annotated[
        str | None, Field(description='ID for the open shift.')
    ] = None


class OpenShiftItem(ShiftItem):
    field_odata_type: str
    open_slot_count: Annotated[
        float | None,
        Field(
            description='Count of the number of slots for the given open shift.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class PatternedRecurrence(BaseModel):
    field_odata_type: str
    pattern: Annotated[
        RecurrencePattern | Dict[str, Any] | None,
        Field(
            description='The frequency of an event.  For access reviews: Do not specify this property for a one-time access review.  Only interval, dayOfMonth, and type (weekly, absoluteMonthly) properties of recurrencePattern are supported.'
        ),
    ] = None
    range: Annotated[
        RecurrenceRange | Dict[str, Any] | None,
        Field(description='The duration of an event.'),
    ] = None


class Person(Entity):
    field_odata_type: str
    birthday: Annotated[str | None, Field(description="The person's birthday.")] = None
    company_name: Annotated[
        str | None, Field(description="The name of the person's company.")
    ] = None
    department: Annotated[str | None, Field(description="The person's department.")] = (
        None
    )
    display_name: Annotated[
        str | None, Field(description="The person's display name.")
    ] = None
    given_name: Annotated[str | None, Field(description="The person's given name.")] = (
        None
    )
    im_address: Annotated[
        str | None,
        Field(
            description='The instant message voice over IP (VOIP) session initiation protocol (SIP) address for the user. Read-only.'
        ),
    ] = None
    is_favorite: Annotated[
        bool | None,
        Field(description='True if the user has flagged this person as a favorite.'),
    ] = None
    job_title: Annotated[str | None, Field(description="The person's job title.")] = (
        None
    )
    office_location: Annotated[
        str | None, Field(description="The location of the person's office.")
    ] = None
    person_notes: Annotated[
        str | None,
        Field(description='Free-form notes that the user has taken about this person.'),
    ] = None
    person_type: Annotated[
        PersonType | Dict[str, Any] | None, Field(description='The type of person.')
    ] = None
    phones: Annotated[
        List[Phone] | None, Field(description="The person's phone numbers.")
    ] = None
    postal_addresses: Annotated[
        List[Location] | None, Field(description="The person's addresses.")
    ] = None
    profession: Annotated[str | None, Field(description="The person's profession.")] = (
        None
    )
    scored_email_addresses: Annotated[
        List[ScoredEmailAddress] | None,
        Field(description="The person's email addresses."),
    ] = None
    surname: Annotated[str | None, Field(description="The person's surname.")] = None
    user_principal_name: Annotated[
        str | None,
        Field(
            description="The user principal name (UPN) of the person. The UPN is an Internet-style login name for the person based on the Internet standard RFC 822. By convention, this should map to the person's email name. The general format is alias@domain."
        ),
    ] = None
    websites: Annotated[
        List[Website] | None, Field(description="The person's websites.")
    ] = None
    yomi_company: Annotated[
        str | None,
        Field(description="The phonetic Japanese name of the person's company."),
    ] = None


class PlannerBucket(Entity):
    field_odata_type: str
    name: Annotated[str | None, Field(description='Name of the bucket.')] = None
    order_hint: Annotated[
        str | None,
        Field(
            description='Hint used to order items of this type in a list view. For details about the supported format, see Using order hints in Planner.'
        ),
    ] = None
    plan_id: Annotated[
        str | None, Field(description='Plan ID to which the bucket belongs.')
    ] = None
    tasks: Annotated[
        List[PlannerTask] | None,
        Field(
            description='Read-only. Nullable. The collection of tasks in the bucket.'
        ),
    ] = None


class PlannerPlan(Entity):
    field_odata_type: str
    buckets: Annotated[
        List[PlannerBucket] | None,
        Field(description='Read-only. Nullable. Collection of buckets in the plan.'),
    ] = None
    container: Annotated[
        PlannerPlanContainer | Dict[str, Any] | None,
        Field(
            description="Identifies the container of the plan. Specify only the url, the containerId and type, or all properties. After it's set, this property can’t be updated. Required."
        ),
    ] = None
    created_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='Read-only. The user who created the plan.'),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Read-only. Date and time at which the plan is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    details: Annotated[
        PlannerPlanDetails | Dict[str, Any] | None,
        Field(description='Read-only. Nullable. Extra details about the plan.'),
    ] = None
    owner: Annotated[
        str | None,
        Field(
            description="Use the container property instead. ID of the group that owns the plan. After it's set, this property can’t be updated. This property won't return a valid group ID if the container of the plan isn't a group."
        ),
    ] = None
    tasks: Annotated[
        List[PlannerTask] | None,
        Field(description='Read-only. Nullable. Collection of tasks in the plan.'),
    ] = None
    title: Annotated[str | None, Field(description='Required. Title of the plan.')] = (
        None
    )


class PlannerUser(Entity):
    field_odata_type: str
    plans: Annotated[
        List[PlannerPlan] | None,
        Field(
            description='Read-only. Nullable. Returns the plannerTasks assigned to the user.'
        ),
    ] = None
    tasks: Annotated[
        List[PlannerTask] | None,
        Field(
            description='Read-only. Nullable. Returns the plannerPlans shared with the user.'
        ),
    ] = None


class Shift(ChangeTrackedEntity):
    field_odata_type: str
    draft_shift: Annotated[
        ShiftItem | Dict[str, Any] | None,
        Field(
            description='Draft changes in the shift. Draft changes are only visible to managers. The changes are visible to employees when they are shared, which copies the changes from the draftShift to the sharedShift property.'
        ),
    ] = None
    is_staged_for_deletion: Annotated[
        bool | None,
        Field(
            description='The shift is marked for deletion, a process that is finalized when the schedule is shared.'
        ),
    ] = None
    scheduling_group_id: Annotated[
        str | None,
        Field(description='ID of the scheduling group the shift is part of. Required.'),
    ] = None
    shared_shift: Annotated[
        ShiftItem | Dict[str, Any] | None,
        Field(
            description='The shared version of this shift that is viewable by both employees and managers. Updates to the sharedShift property send notifications to users in the Teams client.'
        ),
    ] = None
    user_id: Annotated[
        str | None, Field(description='ID of the user assigned to the shift. Required.')
    ] = None


class ShiftAvailability(BaseModel):
    field_odata_type: str
    recurrence: Annotated[
        PatternedRecurrence | Dict[str, Any] | None,
        Field(description='Specifies the pattern for recurrence'),
    ] = None
    time_slots: Annotated[
        List[TimeRange] | None,
        Field(description='The time slot(s) preferred by the user.'),
    ] = None
    time_zone: Annotated[
        str | None, Field(description='Specifies the time zone for the indicated time.')
    ] = None


class ShiftPreferences(ChangeTrackedEntity):
    field_odata_type: str
    availability: Annotated[
        List[ShiftAvailability] | None,
        Field(
            description='Availability of the user to be scheduled for work and its recurrence pattern.'
        ),
    ] = None


class SwapShiftsChangeRequest(OfferShiftRequest):
    field_odata_type: str
    recipient_shift_id: Annotated[
        str | None,
        Field(
            description='ShiftId for the recipient user with whom the request is to swap.'
        ),
    ] = None


class TeamsAppPermissionSet(BaseModel):
    field_odata_type: str
    resource_specific_permissions: Annotated[
        List[TeamsAppResourceSpecificPermission] | None,
        Field(description='A collection of resource-specific permissions.'),
    ] = None


class TeamworkOnlineMeetingInfo(BaseModel):
    field_odata_type: str
    calendar_event_id: Annotated[
        str | None,
        Field(
            description='The identifier of the calendar event associated with the meeting.'
        ),
    ] = None
    join_web_url: Annotated[
        str | None,
        Field(
            description='The URL that users click to join or uniquely identify the meeting.'
        ),
    ] = None
    organizer: Annotated[
        TeamworkUserIdentity | Dict[str, Any] | None,
        Field(description='The organizer of the meeting.'),
    ] = None


class TimeOff(ChangeTrackedEntity):
    field_odata_type: str
    draft_time_off: Annotated[
        TimeOffItem | Dict[str, Any] | None,
        Field(
            description="The draft version of this timeOff item that is viewable by managers. It must be shared before it's visible to team members. Required."
        ),
    ] = None
    is_staged_for_deletion: Annotated[
        bool | None,
        Field(
            description='The timeOff is marked for deletion, a process that is finalized when the schedule is shared.'
        ),
    ] = None
    shared_time_off: Annotated[
        TimeOffItem | Dict[str, Any] | None,
        Field(
            description='The shared version of this timeOff that is viewable by both employees and managers. Updates to the sharedTimeOff property send notifications to users in the Teams client. Required.'
        ),
    ] = None
    user_id: Annotated[
        str | None,
        Field(description='ID of the user assigned to the timeOff. Required.'),
    ] = None


class TodoTask(Entity):
    field_odata_type: str
    attachment_sessions: List[AttachmentSession] | None = None
    attachments: Annotated[
        List[AttachmentBase] | None,
        Field(description='A collection of file attachments for the task.'),
    ] = None
    body: Annotated[
        ItemBody | Dict[str, Any] | None,
        Field(
            description='The task body that typically contains information about the task.'
        ),
    ] = None
    body_last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description="The date and time when the task body was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    categories: Annotated[
        List[str] | None,
        Field(
            description='The categories associated with the task. Each category corresponds to the displayName property of an outlookCategory that the user has defined.'
        ),
    ] = None
    checklist_items: Annotated[
        List[ChecklistItem] | None,
        Field(description='A collection of checklistItems linked to a task.'),
    ] = None
    completed_date_time: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(
            description='The date and time in the specified time zone that the task was finished.'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description="The date and time when the task was created. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    due_date_time: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(
            description='The date and time in the specified time zone that the task is to be finished.'
        ),
    ] = None
    extensions: Annotated[
        List[Extension] | None,
        Field(
            description='The collection of open extensions defined for the task. Nullable.'
        ),
    ] = None
    has_attachments: Annotated[
        bool | None, Field(description='Indicates whether the task has attachments.')
    ] = None
    importance: Importance | None = None
    is_reminder_on: Annotated[
        bool | None,
        Field(
            description='Set to true if an alert is set to remind the user of the task.'
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description="The date and time when the task was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    linked_resources: Annotated[
        List[LinkedResource] | None,
        Field(description='A collection of resources linked to the task.'),
    ] = None
    recurrence: Annotated[
        PatternedRecurrence | Dict[str, Any] | None,
        Field(description='The recurrence pattern for the task.'),
    ] = None
    reminder_date_time: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(
            description='The date and time in the specified time zone for a reminder alert of the task to occur.'
        ),
    ] = None
    start_date_time: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(
            description='The date and time in the specified time zone at which the task is scheduled to start.'
        ),
    ] = None
    status: TaskStatus | None = None
    title: Annotated[
        str | None, Field(description='A brief description of the task.')
    ] = None


class TodoTaskList(Entity):
    field_odata_type: str
    display_name: Annotated[
        str | None, Field(description='The name of the task list.')
    ] = None
    extensions: Annotated[
        List[Extension] | None,
        Field(
            description='The collection of open extensions defined for the task list. Nullable.'
        ),
    ] = None
    is_owner: Annotated[
        bool | None,
        Field(description='True if the user is owner of the given task list.'),
    ] = None
    is_shared: Annotated[
        bool | None,
        Field(description='True if the task list is shared with other users'),
    ] = None
    tasks: Annotated[
        List[TodoTask] | None,
        Field(description='The tasks in this task list. Read-only. Nullable.'),
    ] = None
    wellknown_list_name: WellknownListName | None = None


class UserSettings(Entity):
    field_odata_type: str
    contribution_to_content_discovery_as_organization_disabled: Annotated[
        bool | None,
        Field(
            description="Reflects the organization level setting controlling delegate access to the trending API. When set to true, the organization doesn't have access to Office Delve. The relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for work or school is affected for the whole organization. This setting is read-only and can only be changed by administrators in the SharePoint admin center."
        ),
    ] = None
    contribution_to_content_discovery_disabled: Annotated[
        bool | None,
        Field(
            description="When set to true, the delegate access to the user's trending API is disabled. When set to true, documents in the user's Office Delve are disabled. When set to true, the relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for work or school is affected. Users can control this setting in Office Delve."
        ),
    ] = None
    item_insights: Annotated[
        UserInsightsSettings | Dict[str, Any] | None,
        Field(
            description="The user's settings for the visibility of meeting hour insights, and insights derived between a user and other items in Microsoft 365, such as documents or sites. Get userInsightsSettings through this navigation property."
        ),
    ] = None
    shift_preferences: ShiftPreferences | Dict[str, Any] | None = None
    storage: UserStorage | Dict[str, Any] | None = None
    windows: List[WindowsSetting] | None = None


class WindowsHelloForBusinessAuthenticationMethod(AuthenticationMethod):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time that this Windows Hello for Business key was registered.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    device: Annotated[
        Device | Dict[str, Any] | None,
        Field(
            description="The registered device on which this Windows Hello for Business key resides. Supports $expand. When you get a user's Windows Hello for Business registration information, this property is returned only on a single GET and when you specify ?$expand. For example, GET /users/admin@contoso.com/authentication/windowsHelloForBusinessMethods/_jpuR-TGZtk6aQCLF3BQjA2?$expand=device."
        ),
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description='The name of the device on which Windows Hello for Business is registered'
        ),
    ] = None
    key_strength: Annotated[
        AuthenticationMethodKeyStrength | Dict[str, Any] | None,
        Field(
            description='Key strength of this Windows Hello for Business key. Possible values are: normal, weak, unknown.'
        ),
    ] = None


class WorkbookChartAxisTitle(Entity):
    field_odata_type: str
    format: Annotated[
        WorkbookChartAxisTitleFormat | Dict[str, Any] | None,
        Field(description='Represents the formatting of chart axis title. Read-only.'),
    ] = None
    text: Annotated[str | None, Field(description='Represents the axis title.')] = None
    visible: Annotated[
        bool | None,
        Field(description='A Boolean that specifies the visibility of an axis title.'),
    ] = None


class WorkbookChartGridlines(Entity):
    field_odata_type: str
    format: Annotated[
        WorkbookChartGridlinesFormat | Dict[str, Any] | None,
        Field(description='Represents the formatting of chart gridlines. Read-only.'),
    ] = None
    visible: Annotated[
        bool | None,
        Field(description='Indicates whether the axis gridlines are visible.'),
    ] = None


class WorkbookFilter(Entity):
    field_odata_type: str
    criteria: Annotated[
        WorkbookFilterCriteria | Dict[str, Any] | None,
        Field(
            description='The currently applied filter on the given column. Read-only.'
        ),
    ] = None


class WorkbookTableColumn(Entity):
    field_odata_type: str
    filter: Annotated[
        WorkbookFilter | Dict[str, Any] | None,
        Field(description='The filter applied to the column. Read-only.'),
    ] = None
    index: Annotated[
        float | None,
        Field(
            description='The index of the column within the columns collection of the table. Zero-indexed. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    name: Annotated[str | None, Field(description='The name of the table column.')] = (
        None
    )
    values: Annotated[
        Any | None,
        Field(
            description='TRepresents the raw values of the specified range. The data returned could be of type string, number, or a Boolean. Cell that contain an error will return the error string.'
        ),
    ] = None


class Authentication(Entity):
    field_odata_type: str
    email_methods: Annotated[
        List[EmailAuthenticationMethod] | None,
        Field(description='The email address registered to a user for authentication.'),
    ] = None
    fido2_methods: Annotated[
        List[Fido2AuthenticationMethod] | None,
        Field(
            description='Represents the FIDO2 security keys registered to a user for authentication.'
        ),
    ] = None
    methods: Annotated[
        List[AuthenticationMethod] | None,
        Field(
            description='Represents all authentication methods registered to a user.'
        ),
    ] = None
    microsoft_authenticator_methods: Annotated[
        List[MicrosoftAuthenticatorAuthenticationMethod] | None,
        Field(
            description='The details of the Microsoft Authenticator app registered to a user for authentication.'
        ),
    ] = None
    operations: Annotated[
        List[LongRunningOperation] | None,
        Field(
            description='Represents the status of a long-running operation, such as a password reset operation.'
        ),
    ] = None
    password_methods: Annotated[
        List[PasswordAuthenticationMethod] | None,
        Field(
            description='Represents the password registered to a user for authentication. For security, the password itself is never returned in the object, but action can be taken to reset a password.'
        ),
    ] = None
    phone_methods: Annotated[
        List[PhoneAuthenticationMethod] | None,
        Field(description='The phone numbers registered to a user for authentication.'),
    ] = None
    software_oath_methods: Annotated[
        List[SoftwareOathAuthenticationMethod] | None,
        Field(
            description='The software OATH time-based one-time password (TOTP) applications registered to a user for authentication.'
        ),
    ] = None
    temporary_access_pass_methods: Annotated[
        List[TemporaryAccessPassAuthenticationMethod] | None,
        Field(
            description='Represents a Temporary Access Pass registered to a user for authentication through time-limited passcodes.'
        ),
    ] = None
    windows_hello_for_business_methods: Annotated[
        List[WindowsHelloForBusinessAuthenticationMethod] | None,
        Field(
            description='Represents the Windows Hello for Business authentication method registered to a user for authentication.'
        ),
    ] = None


class ChatMessageHistoryItem(BaseModel):
    field_odata_type: str
    actions: ChatMessageActions | None = None
    modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the message was modified.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    reaction: Annotated[
        ChatMessageReaction | Dict[str, Any] | None,
        Field(description='The reaction in the modified message.'),
    ] = None


class ChatMessageMention(BaseModel):
    field_odata_type: str
    id: Annotated[
        float | None,
        Field(
            description="Index of an entity being mentioned in the specified chatMessage. Matches the {index} value in the corresponding <at id='{index}'> tag in the message body.",
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    mention_text: Annotated[
        str | None,
        Field(
            description="String used to represent the mention. For example, a user's display name, a team name."
        ),
    ] = None
    mentioned: Annotated[
        ChatMessageMentionedIdentitySet | Dict[str, Any] | None,
        Field(
            description='The entity (user, application, team, channel, or chat) that was @mentioned.'
        ),
    ] = None


class ConditionalAccessConditionSet(BaseModel):
    field_odata_type: str
    applications: Annotated[
        ConditionalAccessApplications | Dict[str, Any] | None,
        Field(
            description='Applications and user actions included in and excluded from the policy. Required.'
        ),
    ] = None
    authentication_flows: Annotated[
        ConditionalAccessAuthenticationFlows | Dict[str, Any] | None,
        Field(description='Authentication flows included in the policy scope.'),
    ] = None
    client_app_types: Annotated[
        List[ConditionalAccessClientApp] | None,
        Field(
            description='Client application types included in the policy. Possible values are: all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported, other. Required.  The easUnsupported enumeration member will be deprecated in favor of exchangeActiveSync, which includes EAS supported and unsupported platforms.'
        ),
    ] = None
    client_applications: Annotated[
        ConditionalAccessClientApplications | Dict[str, Any] | None,
        Field(
            description='Client applications (service principals and workload identities) included in and excluded from the policy. Either users or clientApplications is required.'
        ),
    ] = None
    devices: Annotated[
        ConditionalAccessDevices | Dict[str, Any] | None,
        Field(description='Devices in the policy.'),
    ] = None
    insider_risk_levels: Annotated[
        ConditionalAccessInsiderRiskLevels | Dict[str, Any] | None,
        Field(
            description='Insider risk levels included in the policy. The possible values are: minor, moderate, elevated, unknownFutureValue.'
        ),
    ] = None
    locations: Annotated[
        ConditionalAccessLocations | Dict[str, Any] | None,
        Field(description='Locations included in and excluded from the policy.'),
    ] = None
    platforms: Annotated[
        ConditionalAccessPlatforms | Dict[str, Any] | None,
        Field(description='Platforms included in and excluded from the policy.'),
    ] = None
    service_principal_risk_levels: Annotated[
        List[RiskLevel] | None,
        Field(
            description='Service principal risk levels included in the policy. Possible values are: low, medium, high, none, unknownFutureValue.'
        ),
    ] = None
    sign_in_risk_levels: Annotated[
        List[RiskLevel] | None,
        Field(
            description='Sign-in risk levels included in the policy. Possible values are: low, medium, high, hidden, none, unknownFutureValue. Required.'
        ),
    ] = None
    user_risk_levels: Annotated[
        List[RiskLevel] | None,
        Field(
            description='User risk levels included in the policy. Possible values are: low, medium, high, hidden, none, unknownFutureValue. Required.'
        ),
    ] = None
    users: Annotated[
        ConditionalAccessUsers | Dict[str, Any] | None,
        Field(
            description='Users, groups, and roles included in and excluded from the policy. Either users or clientApplications is required.'
        ),
    ] = None


class ConditionalAccessPolicy(Entity):
    field_odata_type: str
    conditions: ConditionalAccessConditionSet | None = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Readonly.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    description: str | None = None
    display_name: Annotated[
        str | None,
        Field(
            description='Specifies a display name for the conditionalAccessPolicy object.'
        ),
    ] = None
    grant_controls: Annotated[
        ConditionalAccessGrantControls | Dict[str, Any] | None,
        Field(
            description='Specifies the grant controls that must be fulfilled to pass the policy.'
        ),
    ] = None
    modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Readonly.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    session_controls: Annotated[
        ConditionalAccessSessionControls | Dict[str, Any] | None,
        Field(
            description='Specifies the session controls that are enforced after sign-in.'
        ),
    ] = None
    state: ConditionalAccessPolicyState | None = None
    template_id: str | None = None


class Conversation(Entity):
    field_odata_type: str
    has_attachments: Annotated[
        bool | None,
        Field(
            description='Indicates whether any of the posts within this Conversation has at least one attachment. Supports $filter (eq, ne) and $search.'
        ),
    ] = None
    last_delivered_date_time: Annotated[
        datetime | None,
        Field(
            description='The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    preview: Annotated[
        str | None,
        Field(
            description='A short summary from the body of the latest post in this conversation. Supports $filter (eq, ne, le, ge).'
        ),
    ] = None
    threads: Annotated[
        List[ConversationThread] | None,
        Field(
            description='A collection of all the conversation threads in the conversation. A navigation property. Read-only. Nullable.'
        ),
    ] = None
    topic: Annotated[
        str | None,
        Field(
            description='The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated.'
        ),
    ] = None
    unique_senders: Annotated[
        List[str] | None,
        Field(description='All the users that sent a message to this Conversation.'),
    ] = None


class ItemInsights(OfficeGraphInsights):
    field_odata_type: str


class MailFolder(Entity):
    field_odata_type: str
    child_folder_count: Annotated[
        float | None,
        Field(
            description='The number of immediate child mailFolders in the current mailFolder.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    child_folders: Annotated[
        List[MailFolder] | None,
        Field(description='The collection of child folders in the mailFolder.'),
    ] = None
    display_name: Annotated[
        str | None, Field(description="The mailFolder's display name.")
    ] = None
    is_hidden: Annotated[
        bool | None,
        Field(
            description='Indicates whether the mailFolder is hidden. This property can be set only when creating the folder. Find more information in Hidden mail folders.'
        ),
    ] = None
    message_rules: Annotated[
        List[MessageRule] | None,
        Field(
            description="The collection of rules that apply to the user's Inbox folder."
        ),
    ] = None
    messages: Annotated[
        List[Message] | None,
        Field(description='The collection of messages in the mailFolder.'),
    ] = None
    multi_value_extended_properties: Annotated[
        List[MultiValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable.'
        ),
    ] = None
    parent_folder_id: Annotated[
        str | None,
        Field(
            description="The unique identifier for the mailFolder's parent mailFolder."
        ),
    ] = None
    single_value_extended_properties: Annotated[
        List[SingleValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable.'
        ),
    ] = None
    total_item_count: Annotated[
        float | None,
        Field(
            description='The number of items in the mailFolder.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    unread_item_count: Annotated[
        float | None,
        Field(
            description='The number of items in the mailFolder marked as unread.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None


class OpenShift(ChangeTrackedEntity):
    field_odata_type: str
    draft_open_shift: Annotated[
        OpenShiftItem | Dict[str, Any] | None,
        Field(
            description="Draft changes in the openShift are only visible to managers until they're shared."
        ),
    ] = None
    is_staged_for_deletion: Annotated[
        bool | None,
        Field(
            description='The openShift is marked for deletion, a process that is finalized when the schedule is shared.'
        ),
    ] = None
    scheduling_group_id: Annotated[
        str | None,
        Field(description='The ID of the schedulingGroup that contains the openShift.'),
    ] = None
    shared_open_shift: Annotated[
        OpenShiftItem | Dict[str, Any] | None,
        Field(
            description='The shared version of this openShift that is viewable by both employees and managers.'
        ),
    ] = None


class PlannerGroup(Entity):
    field_odata_type: str
    plans: Annotated[
        List[PlannerPlan] | None,
        Field(
            description='Read-only. Nullable. Returns the plannerPlans owned by the group.'
        ),
    ] = None


class Schedule(Entity):
    field_odata_type: str
    enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether the schedule is enabled for the team. Required.'
        ),
    ] = None
    offer_shift_requests: Annotated[
        List[OfferShiftRequest] | None,
        Field(description='The offer requests for shifts in the schedule.'),
    ] = None
    offer_shift_requests_enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether offer shift requests are enabled for the schedule.'
        ),
    ] = None
    open_shift_change_requests: Annotated[
        List[OpenShiftChangeRequest] | None,
        Field(description='The open shift requests in the schedule.'),
    ] = None
    open_shifts: Annotated[
        List[OpenShift] | None,
        Field(
            description='The set of open shifts in a scheduling group in the schedule.'
        ),
    ] = None
    open_shifts_enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether open shifts are enabled for the schedule.'
        ),
    ] = None
    provision_status: Annotated[
        OperationStatus | Dict[str, Any] | None,
        Field(
            description='The status of the schedule provisioning. The possible values are notStarted, running, completed, failed.'
        ),
    ] = None
    provision_status_code: Annotated[
        str | None,
        Field(
            description='Additional information about why schedule provisioning failed.'
        ),
    ] = None
    scheduling_groups: Annotated[
        List[SchedulingGroup] | None,
        Field(
            description='The logical grouping of users in the schedule (usually by role).'
        ),
    ] = None
    shifts: Annotated[
        List[Shift] | None, Field(description='The shifts in the schedule.')
    ] = None
    swap_shifts_change_requests: Annotated[
        List[SwapShiftsChangeRequest] | None,
        Field(description='The swap requests for shifts in the schedule.'),
    ] = None
    swap_shifts_requests_enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether swap shifts requests are enabled for the schedule.'
        ),
    ] = None
    time_clock_enabled: Annotated[
        bool | None,
        Field(description='Indicates whether time clock is enabled for the schedule.'),
    ] = None
    time_off_reasons: Annotated[
        List[TimeOffReason] | None,
        Field(description='The set of reasons for a time off in the schedule.'),
    ] = None
    time_off_requests: Annotated[
        List[TimeOffRequest] | None,
        Field(description='The time off requests in the schedule.'),
    ] = None
    time_off_requests_enabled: Annotated[
        bool | None,
        Field(
            description='Indicates whether time off requests are enabled for the schedule.'
        ),
    ] = None
    time_zone: Annotated[
        str | None,
        Field(
            description='Indicates the time zone of the schedule team using tz database format. Required.'
        ),
    ] = None
    times_off: Annotated[
        List[TimeOff] | None,
        Field(description='The instances of times off in the schedule.'),
    ] = None
    workforce_integration_ids: List[str] | None = None


class TeamsAppAuthorization(BaseModel):
    field_odata_type: str
    client_app_id: Annotated[
        str | None,
        Field(
            description='The registration ID of the Microsoft Entra app ID associated with the teamsApp.'
        ),
    ] = None
    required_permission_set: Annotated[
        TeamsAppPermissionSet | Dict[str, Any] | None,
        Field(description='Set of permissions required by the teamsApp.'),
    ] = None


class TeamsAppDefinition(Entity):
    field_odata_type: str
    authorization: Annotated[
        TeamsAppAuthorization | Dict[str, Any] | None,
        Field(
            description='Authorization requirements specified in the Teams app manifest.'
        ),
    ] = None
    bot: Annotated[
        TeamworkBot | Dict[str, Any] | None,
        Field(
            description='The details of the bot specified in the Teams app manifest.'
        ),
    ] = None
    created_by: IdentitySet | Dict[str, Any] | None = None
    description: Annotated[
        str | None, Field(description='Verbose description of the application.')
    ] = None
    display_name: Annotated[
        str | None,
        Field(description='The name of the app provided by the app developer.'),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$'
        ),
    ] = None
    publishing_state: Annotated[
        TeamsAppPublishingState | Dict[str, Any] | None,
        Field(
            description='The published status of a specific version of a Teams app. Possible values are:submitted—The specific version of the Teams app was submitted and is under review.published—The request to publish the specific version of the Teams app was approved by the admin and the app is published.rejected—The admin rejected the request to publish the specific version of the Teams app.'
        ),
    ] = None
    short_description: Annotated[
        str | None, Field(description='Short description of the application.')
    ] = None
    teams_app_id: Annotated[
        str | None, Field(description='The ID from the Teams app manifest.')
    ] = None
    version: Annotated[
        str | None, Field(description='The version number of the application.')
    ] = None


class Todo(Entity):
    field_odata_type: str
    lists: Annotated[
        List[TodoTaskList] | None,
        Field(description='The task lists in the users mailbox.'),
    ] = None


class WorkbookChartAxis(Entity):
    field_odata_type: str
    format: Annotated[
        WorkbookChartAxisFormat | Dict[str, Any] | None,
        Field(
            description='Represents the formatting of a chart object, which includes line and font formatting. Read-only.'
        ),
    ] = None
    major_gridlines: Annotated[
        WorkbookChartGridlines | Dict[str, Any] | None,
        Field(
            description='Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.'
        ),
    ] = None
    major_unit: Annotated[
        Any | None,
        Field(
            description='Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.'
        ),
    ] = None
    maximum: Annotated[
        Any | None,
        Field(
            description='Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.'
        ),
    ] = None
    minimum: Annotated[
        Any | None,
        Field(
            description='Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.'
        ),
    ] = None
    minor_gridlines: Annotated[
        WorkbookChartGridlines | Dict[str, Any] | None,
        Field(
            description='Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.'
        ),
    ] = None
    minor_unit: Annotated[
        Any | None,
        Field(
            description="Represents the interval between two minor tick marks. 'Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number."
        ),
    ] = None
    title: Annotated[
        WorkbookChartAxisTitle | Dict[str, Any] | None,
        Field(description='Represents the axis title. Read-only.'),
    ] = None


class ChatMessage(Entity):
    field_odata_type: str
    attachments: Annotated[
        List[ChatMessageAttachment] | None,
        Field(
            description='References to attached objects like files, tabs, meetings etc.'
        ),
    ] = None
    body: ItemBody | None = None
    channel_identity: Annotated[
        ChannelIdentity | Dict[str, Any] | None,
        Field(
            description='If the message was sent in a channel, represents identity of the channel.'
        ),
    ] = None
    chat_id: Annotated[
        str | None,
        Field(
            description='If the message was sent in a chat, represents the identity of the chat.'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Timestamp of when the chat message was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    deleted_date_time: Annotated[
        datetime | None,
        Field(
            description='Read only. Timestamp at which the chat message was deleted, or null if not deleted.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    etag: Annotated[
        str | None, Field(description='Read-only. Version number of the chat message.')
    ] = None
    event_detail: Annotated[
        EventMessageDetail | Dict[str, Any] | None,
        Field(
            description='Read-only. If present, represents details of an event that happened in a chat, a channel, or a team, for example, adding new members. For event messages, the messageType property will be set to systemEventMessage.'
        ),
    ] = None
    from_: Annotated[
        ChatMessageFromIdentitySet | Dict[str, Any] | None,
        Field(
            description='Details of the sender of the chat message. Can only be set during migration.'
        ),
    ] = None
    hosted_contents: Annotated[
        List[ChatMessageHostedContent] | None,
        Field(
            description='Content in a message hosted by Microsoft Teams - for example, images or code snippets.'
        ),
    ] = None
    importance: ChatMessageImportance | None = None
    last_edited_date_time: Annotated[
        datetime | None,
        Field(
            description="Read only. Timestamp when edits to the chat message were made. Triggers an 'Edited' flag in the Teams UI. If no edits are made the value is null.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='Read only. Timestamp when the chat message is created (initial setting) or modified, including when a reaction is added or removed.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    locale: Annotated[
        str | None,
        Field(
            description='Locale of the chat message set by the client. Always set to en-us.'
        ),
    ] = None
    mentions: Annotated[
        List[ChatMessageMention] | None,
        Field(
            description='List of entities mentioned in the chat message. Supported entities are: user, bot, team, channel, chat, and tag.'
        ),
    ] = None
    message_history: Annotated[
        List[ChatMessageHistoryItem] | None,
        Field(
            description='List of activity history of a message item, including modification time and actions, such as reactionAdded, reactionRemoved, or reaction changes, on the message.'
        ),
    ] = None
    message_type: ChatMessageType | None = None
    policy_violation: Annotated[
        ChatMessagePolicyViolation | Dict[str, Any] | None,
        Field(
            description='Defines the properties of a policy violation set by a data loss prevention (DLP) application.'
        ),
    ] = None
    reactions: Annotated[
        List[ChatMessageReaction] | None,
        Field(description='Reactions for this chat message (for example, Like).'),
    ] = None
    replies: Annotated[
        List[ChatMessage] | None,
        Field(
            description='Replies for a specified message. Supports $expand for channel messages.'
        ),
    ] = None
    reply_to_id: Annotated[
        str | None,
        Field(
            description='Read-only. ID of the parent chat message or root chat message of the thread. (Only applies to chat messages in channels, not chats.)'
        ),
    ] = None
    subject: Annotated[
        str | None, Field(description='The subject of the chat message, in plaintext.')
    ] = None
    summary: Annotated[
        str | None,
        Field(
            description='Summary text of the chat message that could be used for push notifications and summary views or fall back views. Only applies to channel chat messages, not chat messages in a chat.'
        ),
    ] = None
    web_url: Annotated[
        str | None,
        Field(description='Read-only. Link to the message in Microsoft Teams.'),
    ] = None


class PinnedChatMessageInfo(Entity):
    field_odata_type: str
    message: Annotated[
        ChatMessage | Dict[str, Any] | None,
        Field(description='Represents details about the chat message that is pinned.'),
    ] = None


class TeamsApp(Entity):
    field_odata_type: str
    app_definitions: Annotated[
        List[TeamsAppDefinition] | None,
        Field(description='The details for each version of the app.'),
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description='The name of the catalog app provided by the app developer in the Microsoft Teams zip app package.'
        ),
    ] = None
    distribution_method: Annotated[
        TeamsAppDistributionMethod | Dict[str, Any] | None,
        Field(description='The method of distribution for the app. Read-only.'),
    ] = None
    external_id: Annotated[
        str | None,
        Field(
            description='The ID of the catalog provided by the app developer in the Microsoft Teams zip app package.'
        ),
    ] = None


class TeamsAppInstallation(Entity):
    field_odata_type: str
    consented_permission_set: Annotated[
        TeamsAppPermissionSet | Dict[str, Any] | None,
        Field(
            description='The set of resource-specific permissions consented to while installing or upgrading the teamsApp.'
        ),
    ] = None
    teams_app: Annotated[
        TeamsApp | Dict[str, Any] | None,
        Field(description='The app that is installed.'),
    ] = None
    teams_app_definition: Annotated[
        TeamsAppDefinition | Dict[str, Any] | None,
        Field(description='The details of this version of the app.'),
    ] = None


class TeamsTab(Entity):
    field_odata_type: str
    configuration: Annotated[
        TeamsTabConfiguration | Dict[str, Any] | None,
        Field(
            description='Container for custom settings applied to a tab. The tab is considered configured only once this property is set.'
        ),
    ] = None
    display_name: Annotated[str | None, Field(description='Name of the tab.')] = None
    teams_app: Annotated[
        TeamsApp | Dict[str, Any] | None,
        Field(
            description="The application that is linked to the tab. This can't be changed after tab creation."
        ),
    ] = None
    web_url: Annotated[
        str | None, Field(description='Deep link URL of the tab instance. Read only.')
    ] = None


class WorkbookChartAxes(Entity):
    field_odata_type: str
    category_axis: Annotated[
        WorkbookChartAxis | Dict[str, Any] | None,
        Field(description='Represents the category axis in a chart. Read-only.'),
    ] = None
    series_axis: Annotated[
        WorkbookChartAxis | Dict[str, Any] | None,
        Field(
            description='Represents the series axis of a 3-dimensional chart. Read-only.'
        ),
    ] = None
    value_axis: Annotated[
        WorkbookChartAxis | Dict[str, Any] | None,
        Field(description='Represents the value axis in an axis. Read-only.'),
    ] = None


class Chat(Entity):
    field_odata_type: str
    chat_type: ChatType | None = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time at which the chat was created. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    installed_apps: Annotated[
        List[TeamsAppInstallation] | None,
        Field(description='A collection of all the apps in the chat. Nullable.'),
    ] = None
    is_hidden_for_all_members: Annotated[
        bool | None,
        Field(
            description='Indicates whether the chat is hidden for all its members. Read-only.'
        ),
    ] = None
    last_message_preview: Annotated[
        ChatMessageInfo | Dict[str, Any] | None,
        Field(
            description='Preview of the last message sent in the chat. Null if no messages were sent in the chat. Currently, only the list chats operation supports this property.'
        ),
    ] = None
    last_updated_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time at which the chat was renamed or the list of members was last changed. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    members: Annotated[
        List[ConversationMember] | None,
        Field(description='A collection of all the members in the chat. Nullable.'),
    ] = None
    messages: Annotated[
        List[ChatMessage] | None,
        Field(description='A collection of all the messages in the chat. Nullable.'),
    ] = None
    online_meeting_info: Annotated[
        TeamworkOnlineMeetingInfo | Dict[str, Any] | None,
        Field(
            description="Represents details about an online meeting. If the chat isn't associated with an online meeting, the property is empty. Read-only."
        ),
    ] = None
    permission_grants: Annotated[
        List[ResourceSpecificPermissionGrant] | None,
        Field(description='A collection of permissions granted to apps for the chat.'),
    ] = None
    pinned_messages: Annotated[
        List[PinnedChatMessageInfo] | None,
        Field(
            description='A collection of all the pinned messages in the chat. Nullable.'
        ),
    ] = None
    tabs: Annotated[
        List[TeamsTab] | None,
        Field(description='A collection of all the tabs in the chat. Nullable.'),
    ] = None
    tenant_id: Annotated[
        str | None,
        Field(
            description='The identifier of the tenant in which the chat was created. Read-only.'
        ),
    ] = None
    topic: Annotated[
        str | None,
        Field(
            description='(Optional) Subject or topic for the chat. Only available for group chats.'
        ),
    ] = None
    viewpoint: Annotated[
        ChatViewpoint | Dict[str, Any] | None,
        Field(
            description='Represents caller-specific information about the chat, such as the last message read date and time. This property is populated only when the request is made in a delegated context.'
        ),
    ] = None
    web_url: Annotated[
        str | None,
        Field(
            description='The URL for the chat in Microsoft Teams. The URL should be treated as an opaque blob, and not parsed. Read-only.'
        ),
    ] = None


class UserScopeTeamsAppInstallation(TeamsAppInstallation):
    field_odata_type: str
    chat: Annotated[
        Chat | Dict[str, Any] | None,
        Field(description='The chat between the user and Teams app.'),
    ] = None


class ActivityHistoryItem(Entity):
    field_odata_type: str
    active_duration_seconds: Annotated[
        float | None,
        Field(
            description='Optional. The duration of active user engagement. if not supplied, this is calculated from the startedDateTime and lastActiveDateTime.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    activity: UserActivity | None = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Set by the server. DateTime in UTC when the object was created on the server.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    expiration_date_time: Annotated[
        datetime | None,
        Field(
            description='Optional. UTC DateTime when the activityHistoryItem will undergo hard-delete. Can be set by the client.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_active_date_time: Annotated[
        datetime | None,
        Field(
            description='Optional. UTC DateTime when the activityHistoryItem (activity session) was last understood as active or finished - if null, activityHistoryItem status should be Ongoing.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='Set by the server. DateTime in UTC when the object was modified on the server.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    started_date_time: Annotated[
        datetime | None,
        Field(
            description='Required. UTC DateTime when the activityHistoryItem (activity session) was started. Required for timeline history.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    status: Annotated[
        Status | Dict[str, Any] | None,
        Field(
            description='Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored.'
        ),
    ] = None
    user_timezone: Annotated[
        str | None,
        Field(
            description="Optional. The timezone in which the user's device used to generate the activity was located at activity creation time. Values supplied as Olson IDs in order to support cross-platform representation."
        ),
    ] = None


class BaseItem(Entity):
    field_odata_type: str
    created_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='Identity of the user, device, or application that created the item. Read-only.'
        ),
    ] = None
    created_by_user: Annotated[
        User | Dict[str, Any] | None,
        Field(description='Identity of the user who created the item. Read-only.'),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time of item creation. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    description: Annotated[
        str | None,
        Field(description='Provides a user-visible description of the item. Optional.'),
    ] = None
    e_tag: Annotated[str | None, Field(description='ETag for the item. Read-only.')] = (
        None
    )
    last_modified_by: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(
            description='Identity of the user, device, and application that last modified the item. Read-only.'
        ),
    ] = None
    last_modified_by_user: Annotated[
        User | Dict[str, Any] | None,
        Field(
            description='Identity of the user who last modified the item. Read-only.'
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='Date and time the item was last modified. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    name: Annotated[
        str | None, Field(description='The name of the item. Read-write.')
    ] = None
    parent_reference: Annotated[
        ItemReference | Dict[str, Any] | None,
        Field(description='Parent information, if the item has a parent. Read-write.'),
    ] = None
    web_url: Annotated[
        str | None,
        Field(
            description='URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.'
        ),
    ] = None


class Calendar(Entity):
    field_odata_type: str
    allowed_online_meeting_providers: Annotated[
        List[OnlineMeetingProviderType | Dict[str, Any]] | None,
        Field(
            description='Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.'
        ),
    ] = None
    calendar_permissions: Annotated[
        List[CalendarPermission] | None,
        Field(
            description='The permissions of the users with whom the calendar is shared.'
        ),
    ] = None
    calendar_view: Annotated[
        List[Event] | None,
        Field(
            description='The calendar view for the calendar. Navigation property. Read-only.'
        ),
    ] = None
    can_edit: Annotated[
        bool | None,
        Field(
            description='true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who has been shared a calendar and granted write access.'
        ),
    ] = None
    can_share: Annotated[
        bool | None,
        Field(
            description='true if the user has the permission to share the calendar, false otherwise. Only the user who created the calendar can share it.'
        ),
    ] = None
    can_view_private_items: Annotated[
        bool | None,
        Field(
            description='true if the user can read calendar items that have been marked private, false otherwise.'
        ),
    ] = None
    change_key: Annotated[
        str | None,
        Field(
            description='Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.'
        ),
    ] = None
    color: Annotated[
        CalendarColor | Dict[str, Any] | None,
        Field(
            description='Specifies the color theme to distinguish the calendar from other calendars in a UI. The property values are: auto, lightBlue, lightGreen, lightOrange, lightGray, lightYellow, lightTeal, lightPink, lightBrown, lightRed, maxColor.'
        ),
    ] = None
    default_online_meeting_provider: Annotated[
        OnlineMeetingProviderType | Dict[str, Any] | None,
        Field(
            description='The default online meeting provider for meetings sent from this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.'
        ),
    ] = None
    events: Annotated[
        List[Event] | None,
        Field(
            description='The events in the calendar. Navigation property. Read-only.'
        ),
    ] = None
    hex_color: Annotated[
        str | None,
        Field(
            description='The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only.'
        ),
    ] = None
    is_default_calendar: Annotated[
        bool | None,
        Field(
            description='true if this is the default calendar where new events are created by default, false otherwise.'
        ),
    ] = None
    is_removable: Annotated[
        bool | None,
        Field(
            description='Indicates whether this user calendar can be deleted from the user mailbox.'
        ),
    ] = None
    is_tallying_responses: Annotated[
        bool | None,
        Field(
            description="Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses."
        ),
    ] = None
    multi_value_extended_properties: Annotated[
        List[MultiValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of multi-value extended properties defined for the calendar. Read-only. Nullable.'
        ),
    ] = None
    name: Annotated[str | None, Field(description='The calendar name.')] = None
    owner: Annotated[
        EmailAddress | Dict[str, Any] | None,
        Field(
            description='If set, this represents the user who created or added the calendar. For a calendar that the user created or added, the owner property is set to the user. For a calendar shared with the user, the owner property is set to the person who shared that calendar with the user.'
        ),
    ] = None
    single_value_extended_properties: Annotated[
        List[SingleValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of single-value extended properties defined for the calendar. Read-only. Nullable.'
        ),
    ] = None


class CalendarGroup(Entity):
    field_odata_type: str
    calendars: Annotated[
        List[Calendar] | None,
        Field(
            description='The calendars in the calendar group. Navigation property. Read-only. Nullable.'
        ),
    ] = None
    change_key: Annotated[
        str | None,
        Field(
            description='Identifies the version of the calendar group. Every time the calendar group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.'
        ),
    ] = None
    class_id: Annotated[
        UUID | None,
        Field(
            description='The class identifier. Read-only.',
            pattern='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        ),
    ] = None
    name: Annotated[str | None, Field(description='The group name.')] = None


class Channel(Entity):
    field_odata_type: str
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Read only. Timestamp at which the channel was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    description: Annotated[
        str | None, Field(description='Optional textual description for the channel.')
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description='Channel name as it will appear to the user in Microsoft Teams. The maximum length is 50 characters.'
        ),
    ] = None
    email: Annotated[
        str | None,
        Field(
            description='The email address for sending messages to the channel. Read-only.'
        ),
    ] = None
    files_folder: Annotated[
        DriveItem | Dict[str, Any] | None,
        Field(
            description="Metadata for the location where the channel's files are stored."
        ),
    ] = None
    is_archived: Annotated[
        bool | None,
        Field(description='Indicates whether the channel is archived. Read-only.'),
    ] = None
    is_favorite_by_default: Annotated[
        bool | None,
        Field(
            description='Indicates whether the channel should be marked as recommended for all members of the team to show in their channel list. Note: All recommended channels automatically show in the channels list for education and frontline worker users. The property can only be set programmatically via the Create team method. The default value is false.'
        ),
    ] = None
    members: Annotated[
        List[ConversationMember] | None,
        Field(
            description='A collection of membership records associated with the channel.'
        ),
    ] = None
    membership_type: Annotated[
        ChannelMembershipType | Dict[str, Any] | None,
        Field(
            description="The type of the channel. Can be set during creation and can't be changed. The possible values are: standard, private, unknownFutureValue, shared. The default value is standard. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: shared."
        ),
    ] = None
    messages: Annotated[
        List[ChatMessage] | None,
        Field(
            description='A collection of all the messages in the channel. A navigation property. Nullable.'
        ),
    ] = None
    shared_with_teams: Annotated[
        List[SharedWithChannelTeamInfo] | None,
        Field(description='A collection of teams with which a channel is shared.'),
    ] = None
    summary: Annotated[
        ChannelSummary | Dict[str, Any] | None,
        Field(
            description='Contains summary information about the channel, including number of owners, members, guests, and an indicator for members from other tenants. The summary property will only be returned if it is specified in the $select clause of the Get channel method.'
        ),
    ] = None
    tabs: Annotated[
        List[TeamsTab] | None,
        Field(
            description='A collection of all the tabs in the channel. A navigation property.'
        ),
    ] = None
    tenant_id: Annotated[
        str | None, Field(description='The ID of the Microsoft Entra tenant.')
    ] = None
    web_url: Annotated[
        str | None,
        Field(
            description='A hyperlink that will go to the channel in Microsoft Teams. This is the URL that you get when you right-click a channel in Microsoft Teams and select Get link to channel. This URL should be treated as an opaque blob, and not parsed. Read-only.'
        ),
    ] = None


class ColumnDefinition(Entity):
    field_odata_type: str
    boolean: Annotated[
        BooleanColumn | Dict[str, Any] | None,
        Field(description='This column stores Boolean values.'),
    ] = None
    calculated: Annotated[
        CalculatedColumn | Dict[str, Any] | None,
        Field(description="This column's data is calculated based on other columns."),
    ] = None
    choice: Annotated[
        ChoiceColumn | Dict[str, Any] | None,
        Field(description='This column stores data from a list of choices.'),
    ] = None
    column_group: Annotated[
        str | None,
        Field(
            description='For site columns, the name of the group this column belongs to. Helps organize related columns.'
        ),
    ] = None
    content_approval_status: Annotated[
        ContentApprovalStatusColumn | Dict[str, Any] | None,
        Field(description='This column stores content approval status.'),
    ] = None
    currency: Annotated[
        CurrencyColumn | Dict[str, Any] | None,
        Field(description='This column stores currency values.'),
    ] = None
    date_time: Annotated[
        DateTimeColumn | Dict[str, Any] | None,
        Field(description='This column stores DateTime values.'),
    ] = None
    default_value: Annotated[
        DefaultColumnValue | Dict[str, Any] | None,
        Field(description='The default value for this column.'),
    ] = None
    description: Annotated[
        str | None, Field(description='The user-facing description of the column.')
    ] = None
    display_name: Annotated[
        str | None, Field(description='The user-facing name of the column.')
    ] = None
    enforce_unique_values: Annotated[
        bool | None,
        Field(
            description='If true, no two list items may have the same value for this column.'
        ),
    ] = None
    geolocation: Annotated[
        GeolocationColumn | Dict[str, Any] | None,
        Field(description='This column stores a geolocation.'),
    ] = None
    hidden: Annotated[
        bool | None,
        Field(
            description='Specifies whether the column is displayed in the user interface.'
        ),
    ] = None
    hyperlink_or_picture: Annotated[
        HyperlinkOrPictureColumn | Dict[str, Any] | None,
        Field(description='This column stores hyperlink or picture values.'),
    ] = None
    indexed: Annotated[
        bool | None,
        Field(
            description='Specifies whether the column values can be used for sorting and searching.'
        ),
    ] = None
    is_deletable: Annotated[
        bool | None, Field(description='Indicates whether this column can be deleted.')
    ] = None
    is_reorderable: Annotated[
        bool | None,
        Field(
            description='Indicates whether values in the column can be reordered. Read-only.'
        ),
    ] = None
    is_sealed: Annotated[
        bool | None, Field(description='Specifies whether the column can be changed.')
    ] = None
    lookup: Annotated[
        LookupColumn | Dict[str, Any] | None,
        Field(
            description="This column's data is looked up from another source in the site."
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description='The API-facing name of the column as it appears in the fields on a listItem. For the user-facing name, see displayName.'
        ),
    ] = None
    number: Annotated[
        NumberColumn | Dict[str, Any] | None,
        Field(description='This column stores number values.'),
    ] = None
    person_or_group: Annotated[
        PersonOrGroupColumn | Dict[str, Any] | None,
        Field(description='This column stores Person or Group values.'),
    ] = None
    propagate_changes: Annotated[
        bool | None,
        Field(
            description="If 'true', changes to this column will be propagated to lists that implement the column."
        ),
    ] = None
    read_only: Annotated[
        bool | None,
        Field(description='Specifies whether the column values can be modified.'),
    ] = None
    required: Annotated[
        bool | None,
        Field(description="Specifies whether the column value isn't optional."),
    ] = None
    source_column: Annotated[
        ColumnDefinition | Dict[str, Any] | None,
        Field(description='The source column for the content type column.'),
    ] = None
    source_content_type: Annotated[
        ContentTypeInfo | Dict[str, Any] | None,
        Field(
            description='ContentType from which this column is inherited from. Present only in contentTypes columns response. Read-only.'
        ),
    ] = None
    term: Annotated[
        TermColumn | Dict[str, Any] | None,
        Field(description='This column stores taxonomy terms.'),
    ] = None
    text: Annotated[
        TextColumn | Dict[str, Any] | None,
        Field(description='This column stores text values.'),
    ] = None
    thumbnail: Annotated[
        ThumbnailColumn | Dict[str, Any] | None,
        Field(description='This column stores thumbnail values.'),
    ] = None
    type: Annotated[
        ColumnTypes | Dict[str, Any] | None,
        Field(description='For site columns, the type of column. Read-only.'),
    ] = None
    validation: Annotated[
        ColumnValidation | Dict[str, Any] | None,
        Field(
            description='This column stores validation formula and message for the column.'
        ),
    ] = None


class ContentType(Entity):
    field_odata_type: str
    associated_hubs_urls: Annotated[
        List[str] | None,
        Field(
            description='List of canonical URLs for hub sites with which this content type is associated to. This will contain all hub sites where this content type is queued to be enforced or is already enforced. Enforcing a content type means that the content type is applied to the lists in the enforced sites.'
        ),
    ] = None
    base: Annotated[
        ContentType | Dict[str, Any] | None,
        Field(
            description='Parent contentType from which this content type is derived.'
        ),
    ] = None
    base_types: Annotated[
        List[ContentType] | None,
        Field(
            description='The collection of content types that are ancestors of this content type.'
        ),
    ] = None
    column_links: Annotated[
        List[ColumnLink] | None,
        Field(
            description='The collection of columns that are required by this content type.'
        ),
    ] = None
    column_positions: Annotated[
        List[ColumnDefinition] | None,
        Field(description='Column order information in a content type.'),
    ] = None
    columns: Annotated[
        List[ColumnDefinition] | None,
        Field(
            description='The collection of column definitions for this content type.'
        ),
    ] = None
    description: Annotated[
        str | None, Field(description='The descriptive text for the item.')
    ] = None
    document_set: Annotated[
        DocumentSet | Dict[str, Any] | None, Field(description='Document Set metadata.')
    ] = None
    document_template: Annotated[
        DocumentSetContent | Dict[str, Any] | None,
        Field(
            description='Document template metadata. To make sure that documents have consistent content across a site and its subsites, you can associate a Word, Excel, or PowerPoint template with a site content type.'
        ),
    ] = None
    group: Annotated[
        str | None,
        Field(
            description='The name of the group this content type belongs to. Helps organize related content types.'
        ),
    ] = None
    hidden: Annotated[
        bool | None,
        Field(
            description="Indicates whether the content type is hidden in the list's 'New' menu."
        ),
    ] = None
    inherited_from: Annotated[
        ItemReference | Dict[str, Any] | None,
        Field(
            description='If this content type is inherited from another scope (like a site), provides a reference to the item where the content type is defined.'
        ),
    ] = None
    is_built_in: Annotated[
        bool | None,
        Field(description='Specifies if a content type is a built-in content type.'),
    ] = None
    name: Annotated[str | None, Field(description='The name of the content type.')] = (
        None
    )
    order: Annotated[
        ContentTypeOrder | Dict[str, Any] | None,
        Field(
            description='Specifies the order in which the content type appears in the selection UI.'
        ),
    ] = None
    parent_id: Annotated[
        str | None, Field(description='The unique identifier of the content type.')
    ] = None
    propagate_changes: Annotated[
        bool | None,
        Field(
            description='If true, any changes made to the content type are pushed to inherited content types and lists that implement the content type.'
        ),
    ] = None
    read_only: Annotated[
        bool | None,
        Field(
            description="If true, the content type can't be modified unless this value is first set to false."
        ),
    ] = None
    sealed: Annotated[
        bool | None,
        Field(
            description="If true, the content type can't be modified by users or through push-down operations. Only site collection administrators can seal or unseal content types."
        ),
    ] = None


class DocumentSet(BaseModel):
    field_odata_type: str
    allowed_content_types: Annotated[
        List[ContentTypeInfo] | None,
        Field(description='Content types allowed in document set.'),
    ] = None
    default_contents: Annotated[
        List[DocumentSetContent] | None,
        Field(description='Default contents of document set.'),
    ] = None
    propagate_welcome_page_changes: Annotated[
        bool | None,
        Field(
            description='Specifies whether to push welcome page changes to inherited content types.'
        ),
    ] = None
    shared_columns: List[ColumnDefinition] | None = None
    should_prefix_name_to_file: Annotated[
        bool | None,
        Field(
            description='Indicates whether to add the name of the document set to each file name.'
        ),
    ] = None
    welcome_page_columns: List[ColumnDefinition] | None = None
    welcome_page_url: Annotated[
        str | None, Field(description='Welcome page absolute URL.')
    ] = None


class Event(OutlookItem):
    field_odata_type: str
    allow_new_time_proposals: Annotated[
        bool | None,
        Field(
            description='true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. Default is true.'
        ),
    ] = None
    attachments: Annotated[
        List[Attachment] | None,
        Field(
            description='The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.'
        ),
    ] = None
    attendees: Annotated[
        List[Attendee] | None,
        Field(description='The collection of attendees for the event.'),
    ] = None
    body: Annotated[
        ItemBody | Dict[str, Any] | None,
        Field(
            description='The body of the message associated with the event. It can be in HTML or text format.'
        ),
    ] = None
    body_preview: Annotated[
        str | None,
        Field(
            description='The preview of the message associated with the event. It is in text format.'
        ),
    ] = None
    calendar: Annotated[
        Calendar | Dict[str, Any] | None,
        Field(
            description='The calendar that contains the event. Navigation property. Read-only.'
        ),
    ] = None
    end: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(
            description='The date, time, and time zone that the event ends. By default, the end time is in UTC.'
        ),
    ] = None
    extensions: Annotated[
        List[Extension] | None,
        Field(
            description='The collection of open extensions defined for the event. Nullable.'
        ),
    ] = None
    has_attachments: Annotated[
        bool | None, Field(description='Set to true if the event has attachments.')
    ] = None
    hide_attendees: Annotated[
        bool | None,
        Field(
            description='When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. Default is false.'
        ),
    ] = None
    i_cal_u_id: Annotated[
        str | None,
        Field(
            description='A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.'
        ),
    ] = None
    importance: Annotated[
        Importance | Dict[str, Any] | None,
        Field(
            description='The importance of the event. The possible values are: low, normal, high.'
        ),
    ] = None
    instances: Annotated[
        List[Event] | None,
        Field(
            description='The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable.'
        ),
    ] = None
    is_all_day: Annotated[
        bool | None,
        Field(
            description="Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start and end time must be set to midnight and be in the same time zone."
        ),
    ] = None
    is_cancelled: Annotated[
        bool | None, Field(description='Set to true if the event has been canceled.')
    ] = None
    is_draft: Annotated[
        bool | None,
        Field(
            description='Set to true if the user has updated the meeting in Outlook but has not sent the updates to attendees. Set to false if all changes have been sent, or if the event is an appointment without any attendees.'
        ),
    ] = None
    is_online_meeting: Annotated[
        bool | None,
        Field(
            description='True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.'
        ),
    ] = None
    is_organizer: Annotated[
        bool | None,
        Field(
            description='Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). This also applies if a delegate organized the event on behalf of the owner.'
        ),
    ] = None
    is_reminder_on: Annotated[
        bool | None,
        Field(
            description='Set to true if an alert is set to remind the user of the event.'
        ),
    ] = None
    location: Annotated[
        Location | Dict[str, Any] | None,
        Field(description='The location of the event.'),
    ] = None
    locations: Annotated[
        List[Location] | None,
        Field(
            description='The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection would be removed and replaced by the new location value.'
        ),
    ] = None
    multi_value_extended_properties: Annotated[
        List[MultiValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of multi-value extended properties defined for the event. Read-only. Nullable.'
        ),
    ] = None
    online_meeting: Annotated[
        OnlineMeetingInfo | Dict[str, Any] | None,
        Field(
            description='Details for an attendee to join the meeting online. Default is null. Read-only. After you set the isOnlineMeeting and onlineMeetingProvider properties to enable a meeting online, Microsoft Graph initializes onlineMeeting. When set, the meeting remains available online, and you cannot change the isOnlineMeeting, onlineMeetingProvider, and onlneMeeting properties again.'
        ),
    ] = None
    online_meeting_provider: Annotated[
        OnlineMeetingProviderType | Dict[str, Any] | None,
        Field(
            description='Represents the online meeting service provider. By default, onlineMeetingProvider is unknown. The possible values are unknown, teamsForBusiness, skypeForBusiness, and skypeForConsumer. Optional.  After you set onlineMeetingProvider, Microsoft Graph initializes onlineMeeting. Subsequently you cannot change onlineMeetingProvider again, and the meeting remains available online.'
        ),
    ] = None
    online_meeting_url: Annotated[
        str | None,
        Field(
            description='A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.'
        ),
    ] = None
    organizer: Annotated[
        Recipient | Dict[str, Any] | None,
        Field(description='The organizer of the event.'),
    ] = None
    original_end_time_zone: Annotated[
        str | None,
        Field(
            description='The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.'
        ),
    ] = None
    original_start: Annotated[
        datetime | None,
        Field(
            description='Represents the start time of an event when it is initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    original_start_time_zone: Annotated[
        str | None,
        Field(
            description='The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.'
        ),
    ] = None
    recurrence: Annotated[
        PatternedRecurrence | Dict[str, Any] | None,
        Field(description='The recurrence pattern for the event.'),
    ] = None
    reminder_minutes_before_start: Annotated[
        float | None,
        Field(
            description='The number of minutes before the event start time that the reminder alert occurs.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    response_requested: Annotated[
        bool | None,
        Field(
            description='Default is true, which represents the organizer would like an invitee to send a response to the event.'
        ),
    ] = None
    response_status: Annotated[
        ResponseStatus | Dict[str, Any] | None,
        Field(
            description='Indicates the type of response sent in response to an event message.'
        ),
    ] = None
    sensitivity: Annotated[
        Sensitivity | Dict[str, Any] | None,
        Field(
            description='Possible values are: normal, personal, private, confidential.'
        ),
    ] = None
    series_master_id: Annotated[
        str | None,
        Field(
            description='The ID for the recurring series master item, if this event is part of a recurring series.'
        ),
    ] = None
    show_as: Annotated[
        FreeBusyStatus | Dict[str, Any] | None,
        Field(
            description='The status to show. Possible values are: free, tentative, busy, oof, workingElsewhere, unknown.'
        ),
    ] = None
    single_value_extended_properties: Annotated[
        List[SingleValueLegacyExtendedProperty] | None,
        Field(
            description='The collection of single-value extended properties defined for the event. Read-only. Nullable.'
        ),
    ] = None
    start: Annotated[
        DateTimeTimeZone | Dict[str, Any] | None,
        Field(
            description='The start date, time, and time zone of the event. By default, the start time is in UTC.'
        ),
    ] = None
    subject: Annotated[
        str | None, Field(description="The text of the event's subject line.")
    ] = None
    transaction_id: Annotated[
        str | None,
        Field(
            description="A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. This is useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you cannot change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional."
        ),
    ] = None
    type: Annotated[
        EventType | Dict[str, Any] | None,
        Field(
            description='The event type. Possible values are: singleInstance, occurrence, exception, seriesMaster. Read-only'
        ),
    ] = None
    web_link: Annotated[
        str | None,
        Field(
            description='The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL cannot be accessed from within an iFrame.'
        ),
    ] = None


class Group(DirectoryObject):
    field_odata_type: str
    accepted_senders: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='The list of users or groups allowed to create posts or calendar events in this group. If this list is nonempty, then only users or groups listed here are allowed to post.'
        ),
    ] = None
    allow_external_senders: Annotated[
        bool | None,
        Field(
            description='Indicates if people external to the organization can send messages to the group. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).'
        ),
    ] = None
    app_role_assignments: Annotated[
        List[AppRoleAssignment] | None,
        Field(
            description='Represents the app roles granted to a group for an application. Supports $expand.'
        ),
    ] = None
    assigned_labels: Annotated[
        List[AssignedLabel] | None,
        Field(
            description='The list of sensitivity label pairs (label ID, label name) associated with a Microsoft 365 group. Returned only on $select. This property can be updated only in delegated scenarios where the caller requires both the Microsoft Graph permission and a supported administrator role.'
        ),
    ] = None
    assigned_licenses: Annotated[
        List[AssignedLicense] | None,
        Field(
            description='The licenses that are assigned to the group. Returned only on $select. Supports $filter (eq).Read-only.'
        ),
    ] = None
    auto_subscribe_new_members: Annotated[
        bool | None,
        Field(
            description="Indicates if new members added to the group are autosubscribed to receive email notifications. You can set this property in a PATCH request for the group; don't set it in the initial POST request that creates the group. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID})."
        ),
    ] = None
    calendar: Annotated[
        Calendar | Dict[str, Any] | None,
        Field(description="The group's calendar. Read-only."),
    ] = None
    calendar_view: Annotated[
        List[Event] | None,
        Field(description='The calendar view for the calendar. Read-only.'),
    ] = None
    classification: Annotated[
        str | None,
        Field(
            description='Describes a classification for the group (such as low, medium, or high business impact). Valid values for this property are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith).'
        ),
    ] = None
    conversations: Annotated[
        List[Conversation] | None, Field(description="The group's conversations.")
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description="Timestamp of when the group was created. The value can't be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    created_on_behalf_of: Annotated[
        DirectoryObject | Dict[str, Any] | None,
        Field(
            description="The user (or application) that created the group. NOTE: This property isn't set if the user is an administrator. Read-only."
        ),
    ] = None
    description: Annotated[
        str | None,
        Field(
            description='An optional description for the group. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith) and $search.'
        ),
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description="The display name for the group. This property is required when a group is created and can't be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby."
        ),
    ] = None
    drive: Annotated[
        Drive | Dict[str, Any] | None,
        Field(description="The group's default drive. Read-only."),
    ] = None
    drives: Annotated[
        List[Drive] | None, Field(description="The group's drives. Read-only.")
    ] = None
    events: Annotated[
        List[Event] | None, Field(description="The group's calendar events.")
    ] = None
    expiration_date_time: Annotated[
        datetime | None,
        Field(
            description="Timestamp of when the group is set to expire. It's null for security groups, but for Microsoft 365 groups, it represents when the group is set to expire as defined in the groupLifecyclePolicy. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    extensions: Annotated[
        List[Extension] | None,
        Field(
            description='The collection of open extensions defined for the group. Read-only. Nullable.'
        ),
    ] = None
    group_lifecycle_policies: Annotated[
        List[GroupLifecyclePolicy] | None,
        Field(
            description='The collection of lifecycle policies for this group. Read-only. Nullable.'
        ),
    ] = None
    group_types: Annotated[
        List[str] | None,
        Field(
            description="Specifies the group type and its membership. If the collection contains Unified, the group is a Microsoft 365 group; otherwise, it's either a security group or a distribution group. For details, see groups overview.If the collection includes DynamicMembership, the group has dynamic membership; otherwise, membership is static. Returned by default. Supports $filter (eq, not)."
        ),
    ] = None
    has_members_with_license_errors: Annotated[
        bool | None,
        Field(
            description='Indicates whether there are members in this group that have license errors from its group-based license assignment. This property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with license errors (that is, filter for this property being true). See an example. Supports $filter (eq).'
        ),
    ] = None
    hide_from_address_lists: Annotated[
        bool | None,
        Field(
            description="True if the group isn't displayed in certain parts of the Outlook UI: the Address Book, address lists for selecting message recipients, and the Browse Groups dialog for searching groups; otherwise, false. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID})."
        ),
    ] = None
    hide_from_outlook_clients: Annotated[
        bool | None,
        Field(
            description="True if the group isn't displayed in Outlook clients, such as Outlook for Windows and Outlook on the web; otherwise, false. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID})."
        ),
    ] = None
    is_archived: Annotated[
        bool | None,
        Field(
            description='When a group is associated with a team, this property determines whether the team is in read-only mode.To read this property, use the /group/{groupId}/team endpoint or the Get team API. To update this property, use the archiveTeam and unarchiveTeam APIs.'
        ),
    ] = None
    is_assignable_to_role: Annotated[
        bool | None,
        Field(
            description="Indicates whether this group can be assigned to a Microsoft Entra role. Optional. This property can only be set while creating the group and is immutable. If set to true, the securityEnabled property must also be set to true, visibility must be Hidden, and the group can't be a dynamic group (that is, groupTypes can't contain DynamicMembership). Only callers with at least the Privileged Role Administrator role can set this property. The caller must also be assigned the RoleManagement.ReadWrite.Directory permission to set this property or update the membership of such groups. For more, see Using a group to manage Microsoft Entra role assignmentsUsing this feature requires a Microsoft Entra ID P1 license. Returned by default. Supports $filter (eq, ne, not)."
        ),
    ] = None
    is_management_restricted: bool | None = None
    is_subscribed_by_mail: Annotated[
        bool | None,
        Field(
            description='Indicates whether the signed-in user is subscribed to receive email conversations. The default value is true. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).'
        ),
    ] = None
    license_processing_state: Annotated[
        LicenseProcessingState | Dict[str, Any] | None,
        Field(
            description='Indicates the status of the group license assignment to all group members. The default value is false. Read-only. Possible values: QueuedForProcessing, ProcessingInProgress, and ProcessingComplete.Returned only on $select. Read-only.'
        ),
    ] = None
    mail: Annotated[
        str | None,
        Field(
            description="The SMTP address for the group, for example, 'serviceadmins@contoso.com'. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)."
        ),
    ] = None
    mail_enabled: Annotated[
        bool | None,
        Field(
            description='Specifies whether the group is mail-enabled. Required. Returned by default. Supports $filter (eq, ne, not).'
        ),
    ] = None
    mail_nickname: Annotated[
        str | None,
        Field(
            description="The mail alias for the group, unique for Microsoft 365 groups in the organization. Maximum length is 64 characters. This property can contain only characters in the ASCII character set 0 - 127 except the following characters: @ () / [] ' ; : <> , SPACE. Required. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)."
        ),
    ] = None
    member_of: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='Groups that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable. Supports $expand.'
        ),
    ] = None
    members: Annotated[
        List[DirectoryObject] | None,
        Field(
            description="The members of this group, who can be users, devices, other groups, or service principals. Supports the List members, Add member, and Remove member operations. Nullable. Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,'Role')&$select=id,displayName&$expand=members($select=id,userPrincipalName,displayName)."
        ),
    ] = None
    members_with_license_errors: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='A list of group members with license errors from this group-based license assignment. Read-only.'
        ),
    ] = None
    membership_rule: Annotated[
        str | None,
        Field(
            description='The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith).'
        ),
    ] = None
    membership_rule_processing_state: Annotated[
        str | None,
        Field(
            description='Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default. Supports $filter (eq, ne, not, in).'
        ),
    ] = None
    on_premises_domain_name: Annotated[
        str | None,
        Field(
            description='Contains the on-premises domain FQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Read-only.'
        ),
    ] = None
    on_premises_last_sync_date_time: Annotated[
        datetime | None,
        Field(
            description='Indicates the last time at which the group was synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in).',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    on_premises_net_bios_name: Annotated[
        str | None,
        Field(
            description='Contains the on-premises netBios name synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Read-only.'
        ),
    ] = None
    on_premises_provisioning_errors: Annotated[
        List[OnPremisesProvisioningError] | None,
        Field(
            description='Errors when using Microsoft synchronization product during provisioning. Returned by default. Supports $filter (eq, not).'
        ),
    ] = None
    on_premises_sam_account_name: Annotated[
        str | None,
        Field(
            description='Contains the on-premises SAM account name synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith). Read-only.'
        ),
    ] = None
    on_premises_security_identifier: Annotated[
        str | None,
        Field(
            description='Contains the on-premises security identifier (SID) for the group synchronized from on-premises to the cloud. Read-only. Returned by default. Supports $filter (eq including on null values).'
        ),
    ] = None
    on_premises_sync_enabled: Annotated[
        bool | None,
        Field(
            description='true if this group is synced from an on-premises directory; false if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never synced from an on-premises directory (default). Returned by default. Read-only. Supports $filter (eq, ne, not, in, and eq on null values).'
        ),
    ] = None
    onenote: Onenote | Dict[str, Any] | None = None
    owners: Annotated[
        List[DirectoryObject] | None,
        Field(
            description="The owners of the group who can be users or service principals. Limited to 100 owners. Nullable. If this property isn't specified when creating a Microsoft 365 group the calling user (admin or non-admin) is automatically assigned as the group owner. A non-admin user can't explicitly add themselves to this collection when they're creating the group. For more information, see the related known issue. For security groups, the admin user isn't automatically added to this collection. For more information, see the related known issue. Supports $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1); Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,'Role')&$select=id,displayName&$expand=owners($select=id,userPrincipalName,displayName)."
        ),
    ] = None
    permission_grants: List[ResourceSpecificPermissionGrant] | None = None
    photo: Annotated[
        ProfilePhoto | Dict[str, Any] | None,
        Field(description="The group's profile photo"),
    ] = None
    photos: Annotated[
        List[ProfilePhoto] | None,
        Field(
            description='The profile photos owned by the group. Read-only. Nullable.'
        ),
    ] = None
    planner: Annotated[
        PlannerGroup | Dict[str, Any] | None,
        Field(
            description='Entry-point to Planner resource that might exist for a Unified Group.'
        ),
    ] = None
    preferred_data_location: Annotated[
        str | None,
        Field(
            description="The preferred data location for the Microsoft 365 group. By default, the group inherits the group creator's preferred data location. To set this property, the calling app must be granted the Directory.ReadWrite.All permission and the user be assigned at least one of the following Microsoft Entra roles: User Account Administrator Directory Writer  Exchange Administrator  SharePoint Administrator  For more information about this property, see OneDrive Online Multi-Geo. Nullable. Returned by default."
        ),
    ] = None
    preferred_language: Annotated[
        str | None,
        Field(
            description='The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example, en-US. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).'
        ),
    ] = None
    proxy_addresses: Annotated[
        List[str] | None,
        Field(
            description="Email addresses for the group that direct to the same group mailbox. For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. The any operator is required to filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0)."
        ),
    ] = None
    rejected_senders: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='The list of users or groups not allowed to create posts or calendar events in this group. Nullable'
        ),
    ] = None
    renewed_date_time: Annotated[
        datetime | None,
        Field(
            description="Timestamp of when the group was last renewed. This value can't be modified directly and is only updated via the renew service action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    security_enabled: Annotated[
        bool | None,
        Field(
            description='Specifies whether the group is a security group. Required. Returned by default. Supports $filter (eq, ne, not, in).'
        ),
    ] = None
    security_identifier: Annotated[
        str | None,
        Field(
            description='Security identifier of the group, used in Windows scenarios. Read-only. Returned by default.'
        ),
    ] = None
    service_provisioning_errors: Annotated[
        List[ServiceProvisioningError] | None,
        Field(
            description='Errors published by a federated service describing a nontransient, service-specific error regarding the properties or link from a group object.  Supports $filter (eq, not, for isResolved and serviceInstance).'
        ),
    ] = None
    settings: Annotated[
        List[GroupSetting] | None,
        Field(
            description="Settings that can govern this group's behavior, like whether members can invite guests to the group. Nullable."
        ),
    ] = None
    sites: Annotated[
        List[Site] | None,
        Field(
            description='The list of SharePoint sites in this group. Access the default site with /sites/root.'
        ),
    ] = None
    team: Annotated[
        Team | Dict[str, Any] | None,
        Field(description='The team associated with this group.'),
    ] = None
    theme: Annotated[
        str | None,
        Field(
            description="Specifies a Microsoft 365 group's color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange, or Red. Returned by default."
        ),
    ] = None
    threads: Annotated[
        List[ConversationThread] | None,
        Field(description="The group's conversation threads. Nullable."),
    ] = None
    transitive_member_of: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='The groups that a group is a member of, either directly or through nested membership. Nullable.'
        ),
    ] = None
    transitive_members: Annotated[
        List[DirectoryObject] | None,
        Field(description='The direct and transitive members of a group. Nullable.'),
    ] = None
    unique_name: Annotated[
        str | None,
        Field(
            description='The unique identifier that can be assigned to a group and used as an alternate key. Immutable. Read-only.'
        ),
    ] = None
    unseen_count: Annotated[
        float | None,
        Field(
            description='Count of conversations that received new posts since the signed-in user last visited the group. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    visibility: Annotated[
        str | None,
        Field(
            description="Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or HiddenMembership. HiddenMembership can be set only for Microsoft 365 groups when the groups are created. It can't be updated later. Other values of visibility can be updated after group creation. If visibility value isn't specified during group creation on Microsoft Graph, a security group is created as Private by default, and the Microsoft 365 group is Public. Groups assignable to roles are always Private. To learn more, see group visibility options. Returned by default. Nullable."
        ),
    ] = None


class ItemActivity(Entity):
    field_odata_type: str
    access: Annotated[
        AccessAction | Dict[str, Any] | None, Field(description='An item was accessed.')
    ] = None
    activity_date_time: Annotated[
        datetime | None,
        Field(
            description='Details about when the activity took place. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    actor: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='Identity of who performed the action. Read-only.'),
    ] = None
    drive_item: Annotated[
        DriveItem | Dict[str, Any] | None,
        Field(
            description='Exposes the driveItem that was the target of this activity.'
        ),
    ] = None


class ItemActivityStat(Entity):
    field_odata_type: str
    access: Annotated[
        ItemActionStat | Dict[str, Any] | None,
        Field(
            description='Statistics about the access actions in this interval. Read-only.'
        ),
    ] = None
    activities: Annotated[
        List[ItemActivity] | None,
        Field(
            description='Exposes the itemActivities represented in this itemActivityStat resource.'
        ),
    ] = None
    create: Annotated[
        ItemActionStat | Dict[str, Any] | None,
        Field(
            description='Statistics about the create actions in this interval. Read-only.'
        ),
    ] = None
    delete: Annotated[
        ItemActionStat | Dict[str, Any] | None,
        Field(
            description='Statistics about the delete actions in this interval. Read-only.'
        ),
    ] = None
    edit: Annotated[
        ItemActionStat | Dict[str, Any] | None,
        Field(
            description='Statistics about the edit actions in this interval. Read-only.'
        ),
    ] = None
    end_date_time: Annotated[
        datetime | None,
        Field(
            description='When the interval ends. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    incomplete_data: Annotated[
        IncompleteData | Dict[str, Any] | None,
        Field(
            description='Indicates that the statistics in this interval are based on incomplete data. Read-only.'
        ),
    ] = None
    is_trending: Annotated[
        bool | None,
        Field(description="Indicates whether the item is 'trending.' Read-only."),
    ] = None
    move: Annotated[
        ItemActionStat | Dict[str, Any] | None,
        Field(
            description='Statistics about the move actions in this interval. Read-only.'
        ),
    ] = None
    start_date_time: Annotated[
        datetime | None,
        Field(
            description='When the interval starts. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None


class ItemAnalytics(Entity):
    field_odata_type: str
    all_time: ItemActivityStat | Dict[str, Any] | None = None
    item_activity_stats: List[ItemActivityStat] | None = None
    last_seven_days: ItemActivityStat | Dict[str, Any] | None = None


class ManagedDevice(Entity):
    field_odata_type: str
    activation_lock_bypass_code: Annotated[
        str | None,
        Field(
            description='The code that allows the Activation Lock on managed device to be bypassed. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity in LIST call. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.'
        ),
    ] = None
    android_security_patch_level: Annotated[
        str | None,
        Field(description='Android security patch level. This property is read-only.'),
    ] = None
    azure_ad_device_id: Annotated[
        str | None,
        Field(
            description='The unique identifier for the Azure Active Directory device. Read only. This property is read-only.'
        ),
    ] = None
    azure_ad_registered: Annotated[
        bool | None,
        Field(
            description='Whether the device is Azure Active Directory registered. This property is read-only.'
        ),
    ] = None
    compliance_grace_period_expiration_date_time: Annotated[
        datetime | None,
        Field(
            description='The DateTime when device compliance grace period expires. This property is read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    compliance_state: ComplianceState | None = None
    configuration_manager_client_enabled_features: Annotated[
        ConfigurationManagerClientEnabledFeatures | Dict[str, Any] | None,
        Field(
            description='ConfigrMgr client enabled features. This property is read-only.'
        ),
    ] = None
    device_action_results: Annotated[
        List[DeviceActionResult] | None,
        Field(
            description='List of ComplexType deviceActionResult objects. This property is read-only.'
        ),
    ] = None
    device_category: Annotated[
        DeviceCategory | Dict[str, Any] | None, Field(description='Device category')
    ] = None
    device_category_display_name: Annotated[
        str | None,
        Field(
            description="Device category display name. Default is an empty string. Supports $filter operator 'eq' and 'or'. This property is read-only."
        ),
    ] = None
    device_compliance_policy_states: Annotated[
        List[DeviceCompliancePolicyState] | None,
        Field(description='Device compliance policy states for this device.'),
    ] = None
    device_configuration_states: Annotated[
        List[DeviceConfigurationState] | None,
        Field(description='Device configuration states for this device.'),
    ] = None
    device_enrollment_type: DeviceEnrollmentType | None = None
    device_health_attestation_state: Annotated[
        DeviceHealthAttestationState | Dict[str, Any] | None,
        Field(
            description='The device health attestation state. This property is read-only.'
        ),
    ] = None
    device_name: Annotated[
        str | None, Field(description='Name of the device. This property is read-only.')
    ] = None
    device_registration_state: DeviceRegistrationState | None = None
    eas_activated: Annotated[
        bool | None,
        Field(
            description='Whether the device is Exchange ActiveSync activated. This property is read-only.'
        ),
    ] = None
    eas_activation_date_time: Annotated[
        datetime | None,
        Field(
            description='Exchange ActivationSync activation time of the device. This property is read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    eas_device_id: Annotated[
        str | None,
        Field(
            description='Exchange ActiveSync Id of the device. This property is read-only.'
        ),
    ] = None
    email_address: Annotated[
        str | None,
        Field(
            description='Email(s) for the user associated with the device. This property is read-only.'
        ),
    ] = None
    enrolled_date_time: Annotated[
        datetime | None,
        Field(
            description="Enrollment time of the device. Supports $filter operator 'lt' and 'gt'. This property is read-only.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    enrollment_profile_name: Annotated[
        str | None,
        Field(
            description='Name of the enrollment profile assigned to the device. Default value is empty string, indicating no enrollment profile was assgined. This property is read-only.'
        ),
    ] = None
    ethernet_mac_address: Annotated[
        str | None,
        Field(
            description='Indicates Ethernet MAC Address of the device. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity. Individual get call with select query options is needed to retrieve actual values. Example: deviceManagement/managedDevices({managedDeviceId})?$select=ethernetMacAddress Supports: $select. $Search is not supported. Read-only. This property is read-only.'
        ),
    ] = None
    exchange_access_state: DeviceManagementExchangeAccessState | None = None
    exchange_access_state_reason: DeviceManagementExchangeAccessStateReason | None = (
        None
    )
    exchange_last_successful_sync_date_time: Annotated[
        datetime | None,
        Field(
            description='Last time the device contacted Exchange. This property is read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    free_storage_space_in_bytes: Annotated[
        float | None,
        Field(
            description='Free Storage in Bytes. Default value is 0. Read-only. This property is read-only.'
        ),
    ] = None
    iccid: Annotated[
        str | None,
        Field(
            description="Integrated Circuit Card Identifier, it is A SIM card's unique identification number. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only."
        ),
    ] = None
    imei: Annotated[
        str | None, Field(description='IMEI. This property is read-only.')
    ] = None
    is_encrypted: Annotated[
        bool | None,
        Field(description='Device encryption status. This property is read-only.'),
    ] = None
    is_supervised: Annotated[
        bool | None,
        Field(description='Device supervised status. This property is read-only.'),
    ] = None
    jail_broken: Annotated[
        str | None,
        Field(
            description="Whether the device is jail broken or rooted. Default is an empty string. Supports $filter operator 'eq' and 'or'. This property is read-only."
        ),
    ] = None
    last_sync_date_time: Annotated[
        datetime | None,
        Field(
            description="The date and time that the device last completed a successful sync with Intune. Supports $filter operator 'lt' and 'gt'. This property is read-only.",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    log_collection_requests: Annotated[
        List[DeviceLogCollectionResponse] | None,
        Field(description='List of log collection requests'),
    ] = None
    managed_device_name: Annotated[
        str | None,
        Field(
            description='Automatically generated name to identify a device. Can be overwritten to a user friendly name.'
        ),
    ] = None
    managed_device_owner_type: ManagedDeviceOwnerType | None = None
    management_agent: ManagementAgentType | None = None
    management_certificate_expiration_date: Annotated[
        datetime | None,
        Field(
            description='Reports device management certificate expiration date. This property is read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    manufacturer: Annotated[
        str | None,
        Field(description='Manufacturer of the device. This property is read-only.'),
    ] = None
    meid: Annotated[
        str | None, Field(description='MEID. This property is read-only.')
    ] = None
    model: Annotated[
        str | None,
        Field(description='Model of the device. This property is read-only.'),
    ] = None
    notes: Annotated[
        str | None,
        Field(
            description='Notes on the device created by IT Admin. Default is null. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported.'
        ),
    ] = None
    operating_system: Annotated[
        str | None,
        Field(
            description='Operating system of the device. Windows, iOS, etc. This property is read-only.'
        ),
    ] = None
    os_version: Annotated[
        str | None,
        Field(
            description='Operating system version of the device. This property is read-only.'
        ),
    ] = None
    partner_reported_threat_state: ManagedDevicePartnerReportedHealthState | None = None
    phone_number: Annotated[
        str | None,
        Field(description='Phone number of the device. This property is read-only.'),
    ] = None
    physical_memory_in_bytes: Annotated[
        float | None,
        Field(
            description='Total Memory in Bytes. Default is 0. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. Read-only. This property is read-only.'
        ),
    ] = None
    remote_assistance_session_error_details: Annotated[
        str | None,
        Field(
            description='An error string that identifies issues when creating Remote Assistance session objects. This property is read-only.'
        ),
    ] = None
    remote_assistance_session_url: Annotated[
        str | None,
        Field(
            description='Url that allows a Remote Assistance session to be established with the device. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. This property is read-only.'
        ),
    ] = None
    require_user_enrollment_approval: Annotated[
        bool | None,
        Field(
            description='Reports if the managed iOS device is user approval enrollment. This property is read-only.'
        ),
    ] = None
    serial_number: Annotated[
        str | None, Field(description='SerialNumber. This property is read-only.')
    ] = None
    subscriber_carrier: Annotated[
        str | None, Field(description='Subscriber Carrier. This property is read-only.')
    ] = None
    total_storage_space_in_bytes: Annotated[
        float | None,
        Field(description='Total Storage in Bytes. This property is read-only.'),
    ] = None
    udid: Annotated[
        str | None,
        Field(
            description='Unique Device Identifier for iOS and macOS devices. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.'
        ),
    ] = None
    user_display_name: Annotated[
        str | None, Field(description='User display name. This property is read-only.')
    ] = None
    user_id: Annotated[
        str | None,
        Field(
            description='Unique Identifier for the user associated with the device. This property is read-only.'
        ),
    ] = None
    user_principal_name: Annotated[
        str | None,
        Field(description='Device user principal name. This property is read-only.'),
    ] = None
    users: Annotated[
        List[User] | None,
        Field(description='The primary users associated with the managed device.'),
    ] = None
    wi_fi_mac_address: Annotated[
        str | None, Field(description='Wi-Fi MAC. This property is read-only.')
    ] = None
    windows_protection_state: Annotated[
        WindowsProtectionState | Dict[str, Any] | None,
        Field(description='The device protection status. This property is read-only.'),
    ] = None


class Notebook(OnenoteEntityHierarchyModel):
    field_odata_type: str
    is_default: Annotated[
        bool | None,
        Field(
            description="Indicates whether this is the user's default notebook. Read-only."
        ),
    ] = None
    is_shared: Annotated[
        bool | None,
        Field(
            description='Indicates whether the notebook is shared. If true, the contents of the notebook can be seen by people other than the owner. Read-only.'
        ),
    ] = None
    links: Annotated[
        NotebookLinks | Dict[str, Any] | None,
        Field(
            description="Links for opening the notebook. The oneNoteClientURL link opens the notebook in the OneNote native client if it's installed. The oneNoteWebURL link opens the notebook in OneNote on the web."
        ),
    ] = None
    section_groups: Annotated[
        List[SectionGroup] | None,
        Field(description='The section groups in the notebook. Read-only. Nullable.'),
    ] = None
    section_groups_url: Annotated[
        str | None,
        Field(
            description='The URL for the sectionGroups navigation property, which returns all the section groups in the notebook. Read-only.'
        ),
    ] = None
    sections: Annotated[
        List[OnenoteSection] | None,
        Field(description='The sections in the notebook. Read-only. Nullable.'),
    ] = None
    sections_url: Annotated[
        str | None,
        Field(
            description='The URL for the sections navigation property, which returns all the sections in the notebook. Read-only.'
        ),
    ] = None
    user_role: Annotated[
        OnenoteUserRole | Dict[str, Any] | None,
        Field(
            description='Possible values are: Owner, Contributor, Reader, None. Owner represents owner-level access to the notebook. Contributor represents read/write access to the notebook. Reader represents read-only access to the notebook. Read-only.'
        ),
    ] = None


class Onenote(Entity):
    field_odata_type: str
    notebooks: Annotated[
        List[Notebook] | None,
        Field(
            description='The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.'
        ),
    ] = None
    operations: Annotated[
        List[OnenoteOperation] | None,
        Field(
            description="The status of OneNote operations. Getting an operations collection isn't supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable."
        ),
    ] = None
    pages: Annotated[
        List[OnenotePage] | None,
        Field(
            description='The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.'
        ),
    ] = None
    resources: Annotated[
        List[OnenoteResource] | None,
        Field(
            description="The image and other file resources in OneNote pages. Getting a resources collection isn't supported, but you can get the binary content of a specific resource. Read-only. Nullable."
        ),
    ] = None
    section_groups: Annotated[
        List[SectionGroup] | None,
        Field(
            description='The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.'
        ),
    ] = None
    sections: Annotated[
        List[OnenoteSection] | None,
        Field(
            description='The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.'
        ),
    ] = None


class OnenotePage(OnenoteEntitySchemaObjectModel):
    field_odata_type: str
    content: Annotated[str | None, Field(description="The page's HTML content.")] = None
    content_url: Annotated[
        str | None,
        Field(description="The URL for the page's HTML content.  Read-only."),
    ] = None
    created_by_app_id: Annotated[
        str | None,
        Field(
            description='The unique identifier of the application that created the page. Read-only.'
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the page was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    level: Annotated[
        float | None,
        Field(
            description='The indentation level of the page. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    links: Annotated[
        PageLinks | Dict[str, Any] | None,
        Field(
            description="Links for opening the page. The oneNoteClientURL link opens the page in the OneNote native client if it 's installed. The oneNoteWebUrl link opens the page in OneNote on the web. Read-only."
        ),
    ] = None
    order: Annotated[
        float | None,
        Field(
            description='The order of the page within its parent section. Read-only.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    parent_notebook: Annotated[
        Notebook | Dict[str, Any] | None,
        Field(description='The notebook that contains the page.  Read-only.'),
    ] = None
    parent_section: Annotated[
        OnenoteSection | Dict[str, Any] | None,
        Field(description='The section that contains the page. Read-only.'),
    ] = None
    title: Annotated[str | None, Field(description='The title of the page.')] = None
    user_tags: List[str] | None = None


class OnenoteSection(OnenoteEntityHierarchyModel):
    field_odata_type: str
    is_default: Annotated[
        bool | None,
        Field(
            description="Indicates whether this is the user's default section. Read-only."
        ),
    ] = None
    links: Annotated[
        SectionLinks | Dict[str, Any] | None,
        Field(
            description="Links for opening the section. The oneNoteClientURL link opens the section in the OneNote native client if it's installed. The oneNoteWebURL link opens the section in OneNote on the web."
        ),
    ] = None
    pages: Annotated[
        List[OnenotePage] | None,
        Field(
            description='The collection of pages in the section.  Read-only. Nullable.'
        ),
    ] = None
    pages_url: Annotated[
        str | None,
        Field(
            description='The pages endpoint where you can get details for all the pages in the section. Read-only.'
        ),
    ] = None
    parent_notebook: Annotated[
        Notebook | Dict[str, Any] | None,
        Field(description='The notebook that contains the section.  Read-only.'),
    ] = None
    parent_section_group: Annotated[
        SectionGroup | Dict[str, Any] | None,
        Field(description='The section group that contains the section.  Read-only.'),
    ] = None


class PrintJob(Entity):
    field_odata_type: str
    configuration: PrintJobConfiguration | None = None
    created_by: UserIdentity | Dict[str, Any] | None = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The DateTimeOffset when the job was created. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    documents: List[PrintDocument] | None = None
    is_fetchable: Annotated[
        bool | None, Field(description='If true, document can be fetched by printer.')
    ] = None
    redirected_from: Annotated[
        str | None,
        Field(
            description='Contains the source job URL, if the job has been redirected from another printer.'
        ),
    ] = None
    redirected_to: Annotated[
        str | None,
        Field(
            description='Contains the destination job URL, if the job has been redirected to another printer.'
        ),
    ] = None
    status: PrintJobStatus | None = None
    tasks: Annotated[
        List[PrintTask] | None,
        Field(
            description='A list of printTasks that were triggered by this print job.'
        ),
    ] = None


class PrintTask(Entity):
    field_odata_type: str
    definition: PrintTaskDefinition | None = None
    parent_url: Annotated[
        str | None,
        Field(
            description='The URL for the print entity that triggered this task. For example, https://graph.microsoft.com/v1.0/print/printers/{printerId}/jobs/{jobId}. Read-only.'
        ),
    ] = None
    status: PrintTaskStatus | None = None
    trigger: PrintTaskTrigger | None = None


class PrintTaskDefinition(Entity):
    field_odata_type: str
    created_by: AppIdentity | None = None
    display_name: Annotated[
        str | None, Field(description='The name of the printTaskDefinition.')
    ] = None
    tasks: Annotated[
        List[PrintTask] | None,
        Field(
            description='A list of tasks that have been created based on this definition. The list includes currently running tasks and recently completed tasks. Read-only.'
        ),
    ] = None


class PrintTaskTrigger(Entity):
    field_odata_type: str
    definition: PrintTaskDefinition | None = None
    event: PrintEvent | None = None


class PrinterBase(Entity):
    field_odata_type: str
    capabilities: Annotated[
        PrinterCapabilities | Dict[str, Any] | None,
        Field(description='The capabilities of the printer/printerShare.'),
    ] = None
    defaults: Annotated[
        PrinterDefaults | Dict[str, Any] | None,
        Field(description='The default print settings of printer/printerShare.'),
    ] = None
    display_name: Annotated[
        str | None, Field(description='The name of the printer/printerShare.')
    ] = None
    is_accepting_jobs: Annotated[
        bool | None,
        Field(
            description='Specifies whether the printer/printerShare is currently accepting new print jobs.'
        ),
    ] = None
    jobs: Annotated[
        List[PrintJob] | None,
        Field(
            description='The list of jobs that are queued for printing by the printer/printerShare.'
        ),
    ] = None
    location: Annotated[
        PrinterLocation | Dict[str, Any] | None,
        Field(
            description='The physical and/or organizational location of the printer/printerShare.'
        ),
    ] = None
    manufacturer: Annotated[
        str | None, Field(description='The manufacturer of the printer/printerShare.')
    ] = None
    model: Annotated[
        str | None, Field(description='The model name of the printer/printerShare.')
    ] = None
    status: PrinterStatus | None = None


class SectionGroup(OnenoteEntityHierarchyModel):
    field_odata_type: str
    parent_notebook: Annotated[
        Notebook | Dict[str, Any] | None,
        Field(description='The notebook that contains the section group. Read-only.'),
    ] = None
    parent_section_group: Annotated[
        SectionGroup | Dict[str, Any] | None,
        Field(
            description='The section group that contains the section group. Read-only.'
        ),
    ] = None
    section_groups: Annotated[
        List[SectionGroup] | None,
        Field(description='The section groups in the section. Read-only. Nullable.'),
    ] = None
    section_groups_url: Annotated[
        str | None,
        Field(
            description='The URL for the sectionGroups navigation property, which returns all the section groups in the section group. Read-only.'
        ),
    ] = None
    sections: Annotated[
        List[OnenoteSection] | None,
        Field(description='The sections in the section group. Read-only. Nullable.'),
    ] = None
    sections_url: Annotated[
        str | None,
        Field(
            description='The URL for the sections navigation property, which returns all the sections in the section group. Read-only.'
        ),
    ] = None


class Team(Entity):
    field_odata_type: str
    all_channels: Annotated[
        List[Channel] | None,
        Field(
            description='List of channels either hosted in or shared with the team (incoming channels).'
        ),
    ] = None
    channels: Annotated[
        List[Channel] | None,
        Field(
            description='The collection of channels and messages associated with the team.'
        ),
    ] = None
    classification: Annotated[
        str | None,
        Field(
            description="An optional label. Typically describes the data or business sensitivity of the team. Must match one of a preconfigured set in the tenant's directory."
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Timestamp at which the team was created.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    description: Annotated[
        str | None,
        Field(
            description='An optional description for the team. Maximum length: 1,024 characters.'
        ),
    ] = None
    display_name: Annotated[str | None, Field(description='The name of the team.')] = (
        None
    )
    fun_settings: Annotated[
        TeamFunSettings | Dict[str, Any] | None,
        Field(
            description='Settings to configure use of Giphy, memes, and stickers in the team.'
        ),
    ] = None
    group: Group | Dict[str, Any] | None = None
    guest_settings: Annotated[
        TeamGuestSettings | Dict[str, Any] | None,
        Field(
            description='Settings to configure whether guests can create, update, or delete channels in the team.'
        ),
    ] = None
    incoming_channels: Annotated[
        List[Channel] | None,
        Field(description='List of channels shared with the team.'),
    ] = None
    installed_apps: Annotated[
        List[TeamsAppInstallation] | None,
        Field(description='The apps installed in this team.'),
    ] = None
    internal_id: Annotated[
        str | None,
        Field(
            description='A unique ID for the team that was used in a few places such as the audit log/Office 365 Management Activity API.'
        ),
    ] = None
    is_archived: Annotated[
        bool | None, Field(description='Whether this team is in read-only mode.')
    ] = None
    member_settings: Annotated[
        TeamMemberSettings | Dict[str, Any] | None,
        Field(
            description='Settings to configure whether members can perform certain actions, for example, create channels and add bots, in the team.'
        ),
    ] = None
    members: Annotated[
        List[ConversationMember] | None,
        Field(description='Members and owners of the team.'),
    ] = None
    messaging_settings: Annotated[
        TeamMessagingSettings | Dict[str, Any] | None,
        Field(description='Settings to configure messaging and mentions in the team.'),
    ] = None
    operations: Annotated[
        List[TeamsAsyncOperation] | None,
        Field(description='The async operations that ran or are running on this team.'),
    ] = None
    permission_grants: Annotated[
        List[ResourceSpecificPermissionGrant] | None,
        Field(
            description='A collection of permissions granted to apps to access the team.'
        ),
    ] = None
    photo: Annotated[
        ProfilePhoto | Dict[str, Any] | None,
        Field(description='The profile photo for the team.'),
    ] = None
    primary_channel: Annotated[
        Channel | Dict[str, Any] | None,
        Field(description='The general channel for the team.'),
    ] = None
    schedule: Annotated[
        Schedule | Dict[str, Any] | None,
        Field(description='The schedule of shifts for this team.'),
    ] = None
    specialization: Annotated[
        TeamSpecialization | Dict[str, Any] | None,
        Field(
            description='Optional. Indicates whether the team is intended for a particular use case. Each team specialization has access to unique behaviors and experiences targeted to its use case.'
        ),
    ] = None
    summary: Annotated[
        TeamSummary | Dict[str, Any] | None,
        Field(
            description='Contains summary information about the team, including number of owners, members, and guests.'
        ),
    ] = None
    tags: Annotated[
        List[TeamworkTag] | None,
        Field(description='The tags associated with the team.'),
    ] = None
    template: Annotated[
        TeamsTemplate | Dict[str, Any] | None,
        Field(
            description='The template this team was created from. See available templates.'
        ),
    ] = None
    tenant_id: Annotated[
        str | None, Field(description='The ID of the Microsoft Entra tenant.')
    ] = None
    visibility: Annotated[
        TeamVisibilityType | Dict[str, Any] | None,
        Field(description='The visibility of the group and team. Defaults to Public.'),
    ] = None
    web_url: Annotated[
        str | None,
        Field(
            description='A hyperlink that goes to the team in the Microsoft Teams client. You get this URL when you right-click a team in the Microsoft Teams client and select Get link to team. This URL should be treated as an opaque blob, and not parsed.'
        ),
    ] = None


class TeamInfo(Entity):
    field_odata_type: str
    display_name: Annotated[str | None, Field(description='The name of the team.')] = (
        None
    )
    team: Team | Dict[str, Any] | None = None
    tenant_id: Annotated[
        str | None, Field(description='The ID of the Microsoft Entra tenant.')
    ] = None


class TermColumn(BaseModel):
    field_odata_type: str
    allow_multiple_values: Annotated[
        bool | None,
        Field(description='Specifies whether the column allows more than one value.'),
    ] = None
    parent_term: termStore.Term | Dict[str, Any] | None = None
    show_fully_qualified_name: Annotated[
        bool | None,
        Field(
            description='Specifies whether to display the entire term path or only the term label.'
        ),
    ] = None
    term_set: termStore.Set | Dict[str, Any] | None = None


class User(DirectoryObject):
    field_odata_type: str
    about_me: Annotated[
        str | None,
        Field(
            description='A freeform text entry field for the user to describe themselves. Returned only on $select.'
        ),
    ] = None
    account_enabled: Annotated[
        bool | None,
        Field(
            description='true if the account is enabled; otherwise, false. This property is required when a user is created. Returned only on $select. Supports $filter (eq, ne, not, and in).'
        ),
    ] = None
    activities: Annotated[
        List[UserActivity] | None,
        Field(description="The user's activities across devices. Read-only. Nullable."),
    ] = None
    age_group: Annotated[
        str | None,
        Field(
            description='Sets the age group of the user. Allowed values: null, Minor, NotAdult, and Adult. For more information, see legal age group property definitions. Returned only on $select. Supports $filter (eq, ne, not, and in).'
        ),
    ] = None
    agreement_acceptances: Annotated[
        List[AgreementAcceptance] | None,
        Field(
            description="The user's terms of use acceptance statuses. Read-only. Nullable."
        ),
    ] = None
    app_role_assignments: Annotated[
        List[AppRoleAssignment] | None,
        Field(
            description='Represents the app roles a user is granted for an application. Supports $expand.'
        ),
    ] = None
    assigned_licenses: Annotated[
        List[AssignedLicense] | None,
        Field(
            description="The licenses that are assigned to the user, including inherited (group-based) licenses. This property doesn't differentiate between directly assigned and inherited licenses. Use the licenseAssignmentStates property to identify the directly assigned and inherited licenses. Not nullable. Returned only on $select. Supports $filter (eq, not, /$count eq 0, /$count ne 0)."
        ),
    ] = None
    assigned_plans: Annotated[
        List[AssignedPlan] | None,
        Field(
            description='The plans that are assigned to the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq and not).'
        ),
    ] = None
    authentication: Annotated[
        Authentication | Dict[str, Any] | None,
        Field(
            description='The authentication methods that are supported for the user.'
        ),
    ] = None
    authorization_info: AuthorizationInfo | Dict[str, Any] | None = None
    birthday: Annotated[
        datetime | None,
        Field(
            description='The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z. Returned only on $select.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    business_phones: Annotated[
        List[str] | None,
        Field(
            description="The telephone numbers for the user. NOTE: Although it's a string collection, only one number can be set for this property. Read-only for users synced from the on-premises directory. Returned by default. Supports $filter (eq, not, ge, le, startsWith)."
        ),
    ] = None
    calendar: Annotated[
        Calendar | Dict[str, Any] | None,
        Field(description="The user's primary calendar. Read-only."),
    ] = None
    calendar_groups: Annotated[
        List[CalendarGroup] | None,
        Field(description="The user's calendar groups. Read-only. Nullable."),
    ] = None
    calendar_view: Annotated[
        List[Event] | None,
        Field(description='The calendar view for the calendar. Read-only. Nullable.'),
    ] = None
    calendars: Annotated[
        List[Calendar] | None,
        Field(description="The user's calendars. Read-only. Nullable."),
    ] = None
    chats: List[Chat] | None = None
    city: Annotated[
        str | None,
        Field(
            description='The city where the user is located. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).'
        ),
    ] = None
    cloud_clipboard: CloudClipboardRoot | Dict[str, Any] | None = None
    company_name: Annotated[
        str | None,
        Field(
            description='The name of the company that the user is associated with. This property can be useful for describing the company that a guest comes from. The maximum length is 64 characters.Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).'
        ),
    ] = None
    consent_provided_for_minor: Annotated[
        str | None,
        Field(
            description='Sets whether consent was obtained for minors. Allowed values: null, Granted, Denied, and NotRequired. For more information, see legal age group property definitions. Returned only on $select. Supports $filter (eq, ne, not, and in).'
        ),
    ] = None
    contact_folders: Annotated[
        List[ContactFolder] | None,
        Field(description="The user's contacts folders. Read-only. Nullable."),
    ] = None
    contacts: Annotated[
        List[Contact] | None,
        Field(description="The user's contacts. Read-only. Nullable."),
    ] = None
    country: Annotated[
        str | None,
        Field(
            description='The country/region where the user is located; for example, US or UK. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description="The date and time the user was created, in ISO 8601 format and UTC. The value can't be modified and is automatically populated when the entity is created. Nullable. For on-premises users, the value represents when they were first created in Microsoft Entra ID. Property is null for some users created before June 2018 and on-premises users that were synced to Microsoft Entra ID before June 2018. Read-only. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).",
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    created_objects: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='Directory objects that the user created. Read-only. Nullable.'
        ),
    ] = None
    creation_type: Annotated[
        str | None,
        Field(
            description='Indicates whether the user account was created through one of the following methods:  As a regular school or work account (null). As an external account (Invitation). As a local account for an Azure Active Directory B2C tenant (LocalAccount). Through self-service sign-up by an internal user using email verification (EmailVerified). Through self-service sign-up by a guest signing up through a link that is part of a user flow (SelfServiceSignUp). Read-only.Returned only on $select. Supports $filter (eq, ne, not, in).'
        ),
    ] = None
    custom_security_attributes: Annotated[
        CustomSecurityAttributeValue | Dict[str, Any] | None,
        Field(
            description='An open complex type that holds the value of a custom security attribute that is assigned to a directory object. Nullable. Returned only on $select. Supports $filter (eq, ne, not, startsWith). The filter value is case-sensitive. To read this property, the calling app must be assigned the CustomSecAttributeAssignment.Read.All permission. To write this property, the calling app must be assigned the CustomSecAttributeAssignment.ReadWrite.All permissions. To read or write this property in delegated scenarios, the admin must be assigned the Attribute Assignment Administrator role.'
        ),
    ] = None
    department: Annotated[
        str | None,
        Field(
            description='The name of the department in which the user works. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, and eq on null values).'
        ),
    ] = None
    device_enrollment_limit: Annotated[
        float | None,
        Field(
            description='The limit on the maximum number of devices that the user is permitted to enroll. Allowed values are 5 or 1000.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    device_management_troubleshooting_events: Annotated[
        List[DeviceManagementTroubleshootingEvent] | None,
        Field(description='The list of troubleshooting events for this user.'),
    ] = None
    direct_reports: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='The users and contacts that report to the user. (The users and contacts that have their manager property set to this user.) Read-only. Nullable. Supports $expand.'
        ),
    ] = None
    display_name: Annotated[
        str | None,
        Field(
            description="The name displayed in the address book for the user. This value is usually the combination of the user's first name, middle initial, and family name. This property is required when a user is created and it can't be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values), $orderby, and $search."
        ),
    ] = None
    drive: Annotated[
        Drive | Dict[str, Any] | None,
        Field(description="The user's OneDrive. Read-only."),
    ] = None
    drives: Annotated[
        List[Drive] | None,
        Field(description='A collection of drives available for this user. Read-only.'),
    ] = None
    employee_experience: EmployeeExperienceUser | Dict[str, Any] | None = None
    employee_hire_date: Annotated[
        datetime | None,
        Field(
            description='The date and time when the user was hired or will start work in a future hire. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    employee_id: Annotated[
        str | None,
        Field(
            description='The employee identifier assigned to the user by the organization. The maximum length is 16 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).'
        ),
    ] = None
    employee_leave_date_time: Annotated[
        datetime | None,
        Field(
            description='The date and time when the user left or will leave the organization. To read this property, the calling app must be assigned the User-LifeCycleInfo.Read.All permission. To write this property, the calling app must be assigned the User.Read.All and User-LifeCycleInfo.ReadWrite.All permissions. To read this property in delegated scenarios, the admin needs at least one of the following Microsoft Entra roles: Lifecycle Workflows Administrator (least privilege), Global Reader. To write this property in delegated scenarios, the admin needs the Global Administrator role. Supports $filter (eq, ne, not , ge, le, in). For more information, see Configure the employeeLeaveDateTime property for a user.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    employee_org_data: Annotated[
        EmployeeOrgData | Dict[str, Any] | None,
        Field(
            description='Represents organization data (for example, division and costCenter) associated with a user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).'
        ),
    ] = None
    employee_type: Annotated[
        str | None,
        Field(
            description='Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith).'
        ),
    ] = None
    events: Annotated[
        List[Event] | None,
        Field(
            description="The user's events. Default is to show Events under the Default Calendar. Read-only. Nullable."
        ),
    ] = None
    extensions: Annotated[
        List[Extension] | None,
        Field(
            description='The collection of open extensions defined for the user. Read-only. Supports $expand. Nullable.'
        ),
    ] = None
    external_user_state: Annotated[
        str | None,
        Field(
            description="For a guest invited to the tenant using the invitation API, this property represents the invited user's invitation status. For invited users, the state can be PendingAcceptance or Accepted, or null for all other users. Returned only on $select. Supports $filter (eq, ne, not , in)."
        ),
    ] = None
    external_user_state_change_date_time: Annotated[
        datetime | None,
        Field(
            description='Shows the timestamp for the latest change to the externalUserState property. Returned only on $select. Supports $filter (eq, ne, not , in).',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    fax_number: Annotated[
        str | None,
        Field(
            description='The fax number of the user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).'
        ),
    ] = None
    followed_sites: List[Site] | None = None
    given_name: Annotated[
        str | None,
        Field(
            description='The given name (first name) of the user. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).'
        ),
    ] = None
    hire_date: Annotated[
        datetime | None,
        Field(
            description='The hire date of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z. Returned only on $select.  Note: This property is specific to SharePoint in Microsoft 365. We recommend using the native employeeHireDate property to set and update hire date values using Microsoft Graph APIs.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    identities: Annotated[
        List[ObjectIdentity] | None,
        Field(
            description='Represents the identities that can be used to sign in to this user account. Microsoft (also known as a local account), organizations, or social identity providers such as Facebook, Google, and Microsoft can provide identity and tie it to a user account. It might contain multiple items with the same signInType value. Returned only on $select.  Supports $filter (eq) with limitations.'
        ),
    ] = None
    im_addresses: Annotated[
        List[str] | None,
        Field(
            description='The instant message voice-over IP (VOIP) session initiation protocol (SIP) addresses for the user. Read-only. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith).'
        ),
    ] = None
    inference_classification: Annotated[
        InferenceClassification | Dict[str, Any] | None,
        Field(
            description="Relevance classification of the user's messages based on explicit designations that override inferred relevance or importance."
        ),
    ] = None
    insights: Annotated[
        ItemInsights | Dict[str, Any] | None,
        Field(
            description='Represents relationships between a user and items such as OneDrive for work or school documents, calculated using advanced analytics and machine learning techniques. Read-only. Nullable.'
        ),
    ] = None
    interests: Annotated[
        List[str] | None,
        Field(
            description='A list for the user to describe their interests. Returned only on $select.'
        ),
    ] = None
    is_management_restricted: bool | None = None
    is_resource_account: Annotated[
        bool | None, Field(description="Don't use – reserved for future use.")
    ] = None
    job_title: Annotated[
        str | None,
        Field(
            description="The user's job title. Maximum length is 128 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values)."
        ),
    ] = None
    joined_teams: List[Team] | None = None
    last_password_change_date_time: Annotated[
        datetime | None,
        Field(
            description='The time when this Microsoft Entra user last changed their password or when their password was created, whichever date the latest action was performed. The date and time information uses ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned only on $select.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    legal_age_group_classification: Annotated[
        str | None,
        Field(
            description='Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, Undefined,  MinorWithOutParentalConsent, MinorWithParentalConsent, MinorNoParentalConsentRequired, NotAdult, and Adult. For more information, see legal age group property definitions. Returned only on $select.'
        ),
    ] = None
    license_assignment_states: Annotated[
        List[LicenseAssignmentState] | None,
        Field(
            description='State of license assignments for this user. Also indicates licenses that are directly assigned or the user inherited through group memberships. Read-only. Returned only on $select.'
        ),
    ] = None
    license_details: Annotated[
        List[LicenseDetails] | None,
        Field(description="A collection of this user's license details. Read-only."),
    ] = None
    mail: Annotated[
        str | None,
        Field(
            description="The SMTP address for the user, for example, jeff@contoso.com. Changes to this property update the user's proxyAddresses collection to include the value as an SMTP address. This property can't contain accent characters.  NOTE: We don't recommend updating this property for Azure AD B2C user profiles. Use the otherMails property instead. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith, and eq on null values)."
        ),
    ] = None
    mail_folders: Annotated[
        List[MailFolder] | None,
        Field(description="The user's mail folders. Read-only. Nullable."),
    ] = None
    mail_nickname: Annotated[
        str | None,
        Field(
            description='The mail alias for the user. This property must be specified when a user is created. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).'
        ),
    ] = None
    mailbox_settings: Annotated[
        MailboxSettings | Dict[str, Any] | None,
        Field(
            description='Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale, and time zone. Returned only on $select.'
        ),
    ] = None
    managed_app_registrations: Annotated[
        List[ManagedAppRegistration] | None,
        Field(
            description='Zero or more managed app registrations that belong to the user.'
        ),
    ] = None
    managed_devices: Annotated[
        List[ManagedDevice] | None,
        Field(description='The managed devices associated with the user.'),
    ] = None
    manager: Annotated[
        DirectoryObject | Dict[str, Any] | None,
        Field(
            description="The user or contact that is this user's manager. Read-only. Supports $expand."
        ),
    ] = None
    member_of: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='The groups and directory roles that the user is a member of. Read-only. Nullable. Supports $expand.'
        ),
    ] = None
    messages: Annotated[
        List[Message] | None,
        Field(description='The messages in a mailbox or folder. Read-only. Nullable.'),
    ] = None
    mobile_phone: Annotated[
        str | None,
        Field(
            description='The primary cellular telephone number for the user. Read-only for users synced from the on-premises directory. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values) and $search.'
        ),
    ] = None
    my_site: Annotated[
        str | None,
        Field(description="The URL for the user's site. Returned only on $select."),
    ] = None
    oauth2_permission_grants: List[OAuth2PermissionGrant] | None = None
    office_location: Annotated[
        str | None,
        Field(
            description="The office location in the user's place of business. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)."
        ),
    ] = None
    on_premises_distinguished_name: Annotated[
        str | None,
        Field(
            description='Contains the on-premises Active Directory distinguished name or DN. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select.'
        ),
    ] = None
    on_premises_domain_name: Annotated[
        str | None,
        Field(
            description='Contains the on-premises domainFQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select.'
        ),
    ] = None
    on_premises_extension_attributes: Annotated[
        OnPremisesExtensionAttributes | Dict[str, Any] | None,
        Field(
            description='Contains extensionAttributes1-15 for the user. These extension attributes are also known as Exchange custom attributes 1-15. Each attribute can store up to 1024 characters. For an onPremisesSyncEnabled user, the source of authority for this set of properties is the on-premises and is read-only. For a cloud-only user (where onPremisesSyncEnabled is false), these properties can be set during the creation or update of a user object.  For a cloud-only user previously synced from on-premises Active Directory, these properties are read-only in Microsoft Graph but can be fully managed through the Exchange Admin Center or the Exchange Online V2 module in PowerShell. Returned only on $select. Supports $filter (eq, ne, not, in).'
        ),
    ] = None
    on_premises_immutable_id: Annotated[
        str | None,
        Field(
            description="This property is used to associate an on-premises Active Directory user account to their Microsoft Entra user object. This property must be specified when creating a new user account in the Graph if you're using a federated domain for the user's userPrincipalName (UPN) property. NOTE: The $ and _ characters can't be used when specifying this property. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in)."
        ),
    ] = None
    on_premises_last_sync_date_time: Annotated[
        datetime | None,
        Field(
            description='Indicates the last time at which the object was synced with the on-premises directory; for example: 2013-02-16T03:04:54Z. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in).',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    on_premises_provisioning_errors: Annotated[
        List[OnPremisesProvisioningError] | None,
        Field(
            description='Errors when using Microsoft synchronization product during provisioning. Returned only on $select. Supports $filter (eq, not, ge, le).'
        ),
    ] = None
    on_premises_sam_account_name: Annotated[
        str | None,
        Field(
            description='Contains the on-premises samAccountName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith).'
        ),
    ] = None
    on_premises_security_identifier: Annotated[
        str | None,
        Field(
            description='Contains the on-premises security identifier (SID) for the user that was synchronized from on-premises to the cloud. Read-only. Returned only on $select. Supports $filter (eq including on null values).'
        ),
    ] = None
    on_premises_sync_enabled: Annotated[
        bool | None,
        Field(
            description="true if this user object is currently being synced from an on-premises Active Directory (AD); otherwise the user isn't being synced and can be managed in Microsoft Entra ID. Read-only. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values)."
        ),
    ] = None
    on_premises_user_principal_name: Annotated[
        str | None,
        Field(
            description='Contains the on-premises userPrincipalName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith).'
        ),
    ] = None
    onenote: Onenote | Dict[str, Any] | None = None
    online_meetings: Annotated[
        List[OnlineMeeting] | None,
        Field(
            description='Information about a meeting, including the URL used to join a meeting, the attendees list, and the description.'
        ),
    ] = None
    other_mails: Annotated[
        List[str] | None,
        Field(
            description="A list of other email addresses for the user; for example: ['bob@contoso.com', 'Robert@fabrikam.com']. NOTE: This property can't contain accent characters. Returned only on $select. Supports $filter (eq, not, ge, le, in, startsWith, endsWith, /$count eq 0, /$count ne 0)."
        ),
    ] = None
    outlook: OutlookUser | Dict[str, Any] | None = None
    owned_devices: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='Devices the user owns. Read-only. Nullable. Supports $expand and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1).'
        ),
    ] = None
    owned_objects: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='Directory objects the user owns. Read-only. Nullable. Supports $expand, $select nested in $expand, and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1).'
        ),
    ] = None
    password_policies: Annotated[
        str | None,
        Field(
            description='Specifies password policies for the user. This value is an enumeration with one possible value being DisableStrongPassword, which allows weaker passwords than the default policy to be specified. DisablePasswordExpiration can also be specified. The two might be specified together; for example: DisablePasswordExpiration, DisableStrongPassword. Returned only on $select. For more information on the default password policies, see Microsoft Entra password policies. Supports $filter (ne, not, and eq on null values).'
        ),
    ] = None
    password_profile: Annotated[
        PasswordProfile | Dict[str, Any] | None,
        Field(
            description="Specifies the password profile for the user. The profile contains the user's password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). To update this property:  User-PasswordProfile.ReadWrite.All is the least privileged permission to update this property.  In delegated scenarios, the User Administrator Microsoft Entra role is the least privileged admin role supported to update this property for nonadmin users. Privileged Authentication Administrator is the least privileged role that's allowed to update this property for all administrators in the tenant. In general, the signed-in user must have a higher privileged administrator role as indicated in Who can reset passwords.  In app-only scenarios, the calling app must be assigned a supported permission and at least the User Administrator Microsoft Entra role."
        ),
    ] = None
    past_projects: Annotated[
        List[str] | None,
        Field(
            description='A list for the user to enumerate their past projects. Returned only on $select.'
        ),
    ] = None
    people: Annotated[
        List[Person] | None,
        Field(description='People that are relevant to the user. Read-only. Nullable.'),
    ] = None
    permission_grants: Annotated[
        List[ResourceSpecificPermissionGrant] | None,
        Field(description='List all resource-specific permission grants of a user.'),
    ] = None
    photo: Annotated[
        ProfilePhoto | Dict[str, Any] | None,
        Field(description="The user's profile photo. Read-only."),
    ] = None
    photos: Annotated[
        List[ProfilePhoto] | None,
        Field(
            description="The collection of the user's profile photos in different sizes. Read-only."
        ),
    ] = None
    planner: Annotated[
        PlannerUser | Dict[str, Any] | None,
        Field(
            description='Entry-point to the Planner resource that might exist for a user. Read-only.'
        ),
    ] = None
    postal_code: Annotated[
        str | None,
        Field(
            description="The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code. Maximum length is 40 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)."
        ),
    ] = None
    preferred_data_location: Annotated[
        str | None,
        Field(
            description='The preferred data location for the user. For more information, see OneDrive Online Multi-Geo.'
        ),
    ] = None
    preferred_language: Annotated[
        str | None,
        Field(
            description="The preferred language for the user. The preferred language format is based on RFC 4646. The name is a combination of an ISO 639 two-letter lowercase culture code associated with the language, and an ISO 3166 two-letter uppercase subculture code associated with the country or region. Example: 'en-US', or 'es-ES'. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)"
        ),
    ] = None
    preferred_name: Annotated[
        str | None,
        Field(
            description='The preferred name for the user. Not Supported. This attribute returns an empty string.Returned only on $select.'
        ),
    ] = None
    presence: Presence | Dict[str, Any] | None = None
    print: UserPrint | Dict[str, Any] | None = None
    provisioned_plans: Annotated[
        List[ProvisionedPlan] | None,
        Field(
            description='The plans that are provisioned for the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le).'
        ),
    ] = None
    proxy_addresses: Annotated[
        List[str] | None,
        Field(
            description="For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. Changes to the mail property update this collection to include the value as an SMTP address. For more information, see mail and proxyAddresses properties. The proxy address prefixed with SMTP (capitalized) is the primary proxy address, while those addresses prefixed with smtp are the secondary proxy addresses. For Azure AD B2C accounts, this property has a limit of 10 unique addresses. Read-only in Microsoft Graph; you can update this property only through the Microsoft 365 admin center. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0)."
        ),
    ] = None
    registered_devices: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='Devices that are registered for the user. Read-only. Nullable. Supports $expand and returns up to 100 objects.'
        ),
    ] = None
    responsibilities: Annotated[
        List[str] | None,
        Field(
            description='A list for the user to enumerate their responsibilities. Returned only on $select.'
        ),
    ] = None
    schools: Annotated[
        List[str] | None,
        Field(
            description='A list for the user to enumerate the schools they attended. Returned only on $select.'
        ),
    ] = None
    scoped_role_member_of: List[ScopedRoleMembership] | None = None
    security_identifier: Annotated[
        str | None,
        Field(
            description='Security identifier (SID) of the user, used in Windows scenarios. Read-only. Returned by default. Supports $select and $filter (eq, not, ge, le, startsWith).'
        ),
    ] = None
    service_provisioning_errors: Annotated[
        List[ServiceProvisioningError] | None,
        Field(
            description='Errors published by a federated service describing a nontransient, service-specific error regarding the properties or link from a user object.  Supports $filter (eq, not, for isResolved and serviceInstance).'
        ),
    ] = None
    settings: UserSettings | Dict[str, Any] | None = None
    show_in_address_list: Annotated[
        bool | None,
        Field(
            description='Do not use in Microsoft Graph. Manage this property through the Microsoft 365 admin center instead. Represents whether the user should be included in the Outlook global address list. See Known issue.'
        ),
    ] = None
    sign_in_activity: Annotated[
        SignInActivity | Dict[str, Any] | None,
        Field(
            description="Get the last signed-in date and request ID of the sign-in for a given user. Read-only.Returned only on $select. Supports $filter (eq, ne, not, ge, le) but not with any other filterable properties. Note: Details for this property require a Microsoft Entra ID P1 or P2 license and the AuditLog.Read.All permission.This property isn't returned for a user who never signed in or last signed in before April 2020."
        ),
    ] = None
    sign_in_sessions_valid_from_date_time: Annotated[
        datetime | None,
        Field(
            description='Any refresh tokens or session tokens (session cookies) issued before this time are invalid. Applications get an error when using an invalid refresh or session token to acquire a delegated access token (to access APIs such as Microsoft Graph). If this happens, the application needs to acquire a new refresh token by requesting the authorized endpoint. Read-only. Use revokeSignInSessions to reset. Returned only on $select.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    skills: Annotated[
        List[str] | None,
        Field(
            description='A list for the user to enumerate their skills. Returned only on $select.'
        ),
    ] = None
    solutions: Annotated[
        UserSolutionRoot | Dict[str, Any] | None,
        Field(
            description='The identifier that relates the user to the working time schedule triggers. Read-Only. Nullable'
        ),
    ] = None
    sponsors: Annotated[
        List[DirectoryObject] | None,
        Field(
            description="The users and groups responsible for this guest's privileges in the tenant and keeping the guest's information and access updated. (HTTP Methods: GET, POST, DELETE.). Supports $expand."
        ),
    ] = None
    state: Annotated[
        str | None,
        Field(
            description="The state or province in the user's address. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)."
        ),
    ] = None
    street_address: Annotated[
        str | None,
        Field(
            description="The street address of the user's place of business. Maximum length is 1,024 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)."
        ),
    ] = None
    surname: Annotated[
        str | None,
        Field(
            description="The user's surname (family name or last name). Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)."
        ),
    ] = None
    teamwork: Annotated[
        UserTeamwork | Dict[str, Any] | None,
        Field(
            description='A container for Microsoft Teams features available for the user. Read-only. Nullable.'
        ),
    ] = None
    todo: Annotated[
        Todo | Dict[str, Any] | None,
        Field(description='Represents the To Do services available to a user.'),
    ] = None
    transitive_member_of: Annotated[
        List[DirectoryObject] | None,
        Field(
            description='The groups, including nested groups, and directory roles that a user is a member of. Nullable.'
        ),
    ] = None
    usage_location: Annotated[
        str | None,
        Field(
            description='A two-letter country code (ISO standard 3166). Required for users that are assigned licenses due to legal requirements to check for availability of services in countries. Examples include: US, JP, and GB. Not nullable. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).'
        ),
    ] = None
    user_principal_name: Annotated[
        str | None,
        Field(
            description="The user principal name (UPN) of the user. The UPN is an Internet-style sign-in name for the user based on the Internet standard RFC 822. By convention, this value should map to the user's email name. The general format is alias@domain, where the domain must be present in the tenant's collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization.NOTE: This property can't contain accent characters. Only the following characters are allowed A - Z, a - z, 0 - 9, ' . - _ ! # ^ ~. For the complete list of allowed characters, see username policies. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith) and $orderby."
        ),
    ] = None
    user_type: Annotated[
        str | None,
        Field(
            description='A string value that can be used to classify user types in your directory. The possible values are Member and Guest. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). NOTE: For more information about the permissions for members and guests, see What are the default user permissions in Microsoft Entra ID?'
        ),
    ] = None


class UserActivity(Entity):
    field_odata_type: str
    activation_url: Annotated[
        str | None,
        Field(
            description='Required. URL used to launch the activity in the best native experience represented by the appId. Might launch a web-based app if no native app exists.'
        ),
    ] = None
    activity_source_host: Annotated[
        str | None,
        Field(
            description='Required. URL for the domain representing the cross-platform identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain. For example: https://contoso.com or https://myapp.contoso.com but NOT https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per cross-platform app identity. For example, a separate file and domain is needed for Word vs. PowerPoint.'
        ),
    ] = None
    app_activity_id: Annotated[
        str | None,
        Field(
            description='Required. The unique activity ID in the context of the app - supplied by caller and immutable thereafter.'
        ),
    ] = None
    app_display_name: Annotated[
        str | None,
        Field(
            description='Optional. Short text description of the app used to generate the activity for use in cases when the app is not installed on the user’s local device.'
        ),
    ] = None
    content_info: Annotated[
        Any | None,
        Field(
            description='Optional. A custom piece of data - JSON-LD extensible description of content according to schema.org syntax.'
        ),
    ] = None
    content_url: Annotated[
        str | None,
        Field(
            description='Optional. Used in the event the content can be rendered outside of a native or web-based app experience (for example, a pointer to an item in an RSS feed).'
        ),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='Set by the server. DateTime in UTC when the object was created on the server.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    expiration_date_time: Annotated[
        datetime | None,
        Field(
            description='Set by the server. DateTime in UTC when the object expired on the server.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    fallback_url: Annotated[
        str | None,
        Field(
            description='Optional. URL used to launch the activity in a web-based app, if available.'
        ),
    ] = None
    history_items: Annotated[
        List[ActivityHistoryItem] | None,
        Field(
            description="Optional. NavigationProperty/Containment; navigation property to the activity's historyItems."
        ),
    ] = None
    last_modified_date_time: Annotated[
        datetime | None,
        Field(
            description='Set by the server. DateTime in UTC when the object was modified on the server.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    status: Annotated[
        Status | Dict[str, Any] | None,
        Field(
            description='Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored.'
        ),
    ] = None
    user_timezone: Annotated[
        str | None,
        Field(
            description="Optional. The timezone in which the user's device used to generate the activity was located at activity creation time; values supplied as Olson IDs in order to support cross-platform representation."
        ),
    ] = None
    visual_elements: VisualInfo | None = None


class UserPrint(BaseModel):
    field_odata_type: str
    recent_printer_shares: List[PrinterShare] | None = None


class UserTeamwork(Entity):
    field_odata_type: str
    associated_teams: Annotated[
        List[AssociatedTeamInfo] | None,
        Field(
            description='The list of associatedTeamInfo objects that a user is associated with.'
        ),
    ] = None
    installed_apps: Annotated[
        List[UserScopeTeamsAppInstallation] | None,
        Field(description='The apps installed in the personal scope of this user.'),
    ] = None
    locale: Annotated[
        str | None,
        Field(
            description="Represents the location that a user selected in Microsoft Teams and doesn't follow the Office's locale setting. A user’s locale is represented by their preferred language and country or region. For example, en-us. The language component follows two-letter codes as defined in ISO 639-1, and the country component follows two-letter codes as defined in ISO 3166-1 alpha-2."
        ),
    ] = None
    region: Annotated[
        str | None,
        Field(
            description="Represents the region of the organization or the user. For users with multigeo licenses, the property contains the user's region (if available). For users without multigeo licenses, the property contains the organization's region.The region value can be any region supported by the Teams payload. The possible values are: Americas, Europe and MiddleEast, Asia Pacific, UAE, Australia, Brazil, Canada, Switzerland, Germany, France, India, Japan, South Korea, Norway, Singapore, United Kingdom, South Africa, Sweden, Qatar, Poland, Italy, Israel, Spain, Mexico, USGov Community Cloud, USGov Community Cloud High, USGov Department of Defense, and China."
        ),
    ] = None


class Workbook(Entity):
    field_odata_type: str
    application: WorkbookApplication | Dict[str, Any] | None = None
    comments: Annotated[
        List[WorkbookComment] | None,
        Field(description='Represents a collection of comments in a workbook.'),
    ] = None
    functions: WorkbookFunctions | Dict[str, Any] | None = None
    names: Annotated[
        List[WorkbookNamedItem] | None,
        Field(
            description='Represents a collection of workbooks scoped named items (named ranges and constants). Read-only.'
        ),
    ] = None
    operations: Annotated[
        List[WorkbookOperation] | None,
        Field(
            description='The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only.'
        ),
    ] = None
    tables: Annotated[
        List[WorkbookTable] | None,
        Field(
            description='Represents a collection of tables associated with the workbook. Read-only.'
        ),
    ] = None
    worksheets: Annotated[
        List[WorkbookWorksheet] | None,
        Field(
            description='Represents a collection of worksheets associated with the workbook. Read-only.'
        ),
    ] = None


class WorkbookChart(Entity):
    field_odata_type: str
    axes: Annotated[
        WorkbookChartAxes | Dict[str, Any] | None,
        Field(description='Represents chart axes. Read-only.'),
    ] = None
    data_labels: Annotated[
        WorkbookChartDataLabels | Dict[str, Any] | None,
        Field(description='Represents the data labels on the chart. Read-only.'),
    ] = None
    format: Annotated[
        WorkbookChartAreaFormat | Dict[str, Any] | None,
        Field(
            description='Encapsulates the format properties for the chart area. Read-only.'
        ),
    ] = None
    height: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='Represents the height, in points, of the chart object.'),
    ] = None
    left: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='The distance, in points, from the left side of the chart to the worksheet origin.'
        ),
    ] = None
    legend: Annotated[
        WorkbookChartLegend | Dict[str, Any] | None,
        Field(description='Represents the legend for the chart. Read-only.'),
    ] = None
    name: Annotated[
        str | None, Field(description='Represents the name of a chart object.')
    ] = None
    series: Annotated[
        List[WorkbookChartSeries] | None,
        Field(
            description='Represents either a single series or collection of series in the chart. Read-only.'
        ),
    ] = None
    title: Annotated[
        WorkbookChartTitle | Dict[str, Any] | None,
        Field(
            description='Represents the title of the specified chart, including the text, visibility, position and formatting of the title. Read-only.'
        ),
    ] = None
    top: Annotated[
        float | str | ReferenceNumeric | None,
        Field(
            description='Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).'
        ),
    ] = None
    width: Annotated[
        float | str | ReferenceNumeric | None,
        Field(description='Represents the width, in points, of the chart object.'),
    ] = None
    worksheet: Annotated[
        WorkbookWorksheet | Dict[str, Any] | None,
        Field(description='The worksheet containing the current chart. Read-only.'),
    ] = None


class WorkbookNamedItem(Entity):
    field_odata_type: str
    comment: Annotated[
        str | None, Field(description='The comment associated with this name.')
    ] = None
    name: Annotated[
        str | None, Field(description='The name of the object. Read-only.')
    ] = None
    scope: Annotated[
        str | None,
        Field(
            description='Indicates whether the name is scoped to the workbook or to a specific worksheet. Read-only.'
        ),
    ] = None
    type: Annotated[
        str | None,
        Field(
            description='The type of reference is associated with the name. Possible values are: String, Integer, Double, Boolean, Range. Read-only.'
        ),
    ] = None
    value: Annotated[
        Any | None,
        Field(
            description='The formula that the name is defined to refer to. For example, =Sheet14!$B$2:$H$12 and =4.75. Read-only.'
        ),
    ] = None
    visible: Annotated[
        bool | None, Field(description='Indicates whether the object is visible.')
    ] = None
    worksheet: Annotated[
        WorkbookWorksheet | Dict[str, Any] | None,
        Field(
            description='Returns the worksheet to which the named item is scoped. Available only if the item is scoped to the worksheet. Read-only.'
        ),
    ] = None


class WorkbookPivotTable(Entity):
    field_odata_type: str
    name: Annotated[str | None, Field(description='The name of the pivot table.')] = (
        None
    )
    worksheet: Annotated[
        WorkbookWorksheet | Dict[str, Any] | None,
        Field(
            description='The worksheet that contains the current pivot table. Read-only.'
        ),
    ] = None


class WorkbookTable(Entity):
    field_odata_type: str
    columns: Annotated[
        List[WorkbookTableColumn] | None,
        Field(description='The list of all the columns in the table. Read-only.'),
    ] = None
    highlight_first_column: Annotated[
        bool | None,
        Field(
            description='Indicates whether the first column contains special formatting.'
        ),
    ] = None
    highlight_last_column: Annotated[
        bool | None,
        Field(
            description='Indicates whether the last column contains special formatting.'
        ),
    ] = None
    legacy_id: Annotated[
        str | None,
        Field(
            description="A legacy identifier used in older Excel clients. The value of the identifier remains the same even when the table is renamed. This property should be interpreted as an opaque string value and shouldn't be parsed to any other type. Read-only."
        ),
    ] = None
    name: Annotated[str | None, Field(description='The name of the table.')] = None
    rows: Annotated[
        List[WorkbookTableRow] | None,
        Field(description='The list of all the rows in the table. Read-only.'),
    ] = None
    show_banded_columns: Annotated[
        bool | None,
        Field(
            description='Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.'
        ),
    ] = None
    show_banded_rows: Annotated[
        bool | None,
        Field(
            description='Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.'
        ),
    ] = None
    show_filter_button: Annotated[
        bool | None,
        Field(
            description='Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.'
        ),
    ] = None
    show_headers: Annotated[
        bool | None,
        Field(
            description='Indicates whether the header row is visible or not. This value can be set to show or remove the header row.'
        ),
    ] = None
    show_totals: Annotated[
        bool | None,
        Field(
            description='Indicates whether the total row is visible or not. This value can be set to show or remove the total row.'
        ),
    ] = None
    sort: Annotated[
        WorkbookTableSort | Dict[str, Any] | None,
        Field(description='The sorting for the table. Read-only.'),
    ] = None
    style: Annotated[
        str | None,
        Field(
            description='A constant value that represents the Table style. Possible values are: TableStyleLight1 through TableStyleLight21, TableStyleMedium1 through TableStyleMedium28, TableStyleStyleDark1 through TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.'
        ),
    ] = None
    worksheet: Annotated[
        WorkbookWorksheet | Dict[str, Any] | None,
        Field(description='The worksheet containing the current table. Read-only.'),
    ] = None


class WorkbookWorksheet(Entity):
    field_odata_type: str
    charts: Annotated[
        List[WorkbookChart] | None,
        Field(
            description='The list of charts that are part of the worksheet. Read-only.'
        ),
    ] = None
    name: Annotated[
        str | None, Field(description='The display name of the worksheet.')
    ] = None
    names: Annotated[
        List[WorkbookNamedItem] | None,
        Field(
            description='The list of names that are associated with the worksheet. Read-only.'
        ),
    ] = None
    pivot_tables: Annotated[
        List[WorkbookPivotTable] | None,
        Field(description='The list of piot tables that are part of the worksheet.'),
    ] = None
    position: Annotated[
        float | None,
        Field(
            description='The zero-based position of the worksheet within the workbook.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    protection: Annotated[
        WorkbookWorksheetProtection | Dict[str, Any] | None,
        Field(description='The sheet protection object for a worksheet. Read-only.'),
    ] = None
    tables: Annotated[
        List[WorkbookTable] | None,
        Field(
            description='The list of tables that are part of the worksheet. Read-only.'
        ),
    ] = None
    visibility: Annotated[
        str | None,
        Field(
            description='The visibility of the worksheet. The possible values are: Visible, Hidden, VeryHidden.'
        ),
    ] = None


class BaseSitePage(BaseItem):
    field_odata_type: str
    page_layout: Annotated[
        PageLayoutType | Dict[str, Any] | None,
        Field(
            description='The name of the page layout of the page. The possible values are: microsoftReserved, article, home, unknownFutureValue.'
        ),
    ] = None
    publishing_state: Annotated[
        PublicationFacet | Dict[str, Any] | None,
        Field(description='The publishing status and the MM.mm version of the page.'),
    ] = None
    title: Annotated[str | None, Field(description='Title of the sitePage.')] = None


class Drive(BaseItem):
    field_odata_type: str
    bundles: Annotated[
        List[DriveItem] | None,
        Field(
            description='Collection of bundles (albums and multi-select-shared sets of items). Only in personal OneDrive.'
        ),
    ] = None
    drive_type: Annotated[
        str | None,
        Field(
            description='Describes the type of drive represented by this resource. OneDrive personal drives return personal. OneDrive for Business returns business. SharePoint document libraries return documentLibrary. Read-only.'
        ),
    ] = None
    following: Annotated[
        List[DriveItem] | None,
        Field(
            description='The list of items the user is following. Only in OneDrive for Business.'
        ),
    ] = None
    items: Annotated[
        List[DriveItem] | None,
        Field(description='All items contained in the drive. Read-only. Nullable.'),
    ] = None
    list: Annotated[
        ListModel | Dict[str, Any] | None,
        Field(
            description='For drives in SharePoint, the underlying document library list. Read-only. Nullable.'
        ),
    ] = None
    owner: Annotated[
        IdentitySet | Dict[str, Any] | None,
        Field(description='Optional. The user account that owns the drive. Read-only.'),
    ] = None
    quota: Annotated[
        Quota | Dict[str, Any] | None,
        Field(
            description="Optional. Information about the drive's storage space quota. Read-only."
        ),
    ] = None
    root: Annotated[
        DriveItem | Dict[str, Any] | None,
        Field(description='The root folder of the drive. Read-only.'),
    ] = None
    share_point_ids: SharepointIds | Dict[str, Any] | None = None
    special: Annotated[
        List[DriveItem] | None,
        Field(
            description='Collection of common folders available in OneDrive. Read-only. Nullable.'
        ),
    ] = None
    system: Annotated[
        SystemFacet | Dict[str, Any] | None,
        Field(
            description="If present, indicates that it's a system-managed drive. Read-only."
        ),
    ] = None


class DriveItem(BaseItem):
    field_odata_type: str
    analytics: Annotated[
        ItemAnalytics | Dict[str, Any] | None,
        Field(
            description='Analytics about the view activities that took place on this item.'
        ),
    ] = None
    audio: Annotated[
        Audio | Dict[str, Any] | None,
        Field(
            description='Audio metadata, if the item is an audio file. Read-only. Read-only. Only on OneDrive Personal.'
        ),
    ] = None
    bundle: Annotated[
        Bundle | Dict[str, Any] | None,
        Field(description='Bundle metadata, if the item is a bundle. Read-only.'),
    ] = None
    c_tag: Annotated[
        str | None,
        Field(
            description="An eTag for the content of the item. This eTag isn't changed if only the metadata is changed. Note This property isn't returned if the item is a folder. Read-only."
        ),
    ] = None
    children: Annotated[
        List[DriveItem] | None,
        Field(
            description='Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.'
        ),
    ] = None
    content: Annotated[
        str | None,
        Field(description='The content stream, if the item represents a file.'),
    ] = None
    deleted: Annotated[
        Deleted | Dict[str, Any] | None,
        Field(
            description='Information about the deleted state of the item. Read-only.'
        ),
    ] = None
    file: Annotated[
        File | Dict[str, Any] | None,
        Field(description='File metadata, if the item is a file. Read-only.'),
    ] = None
    file_system_info: Annotated[
        FileSystemInfo | Dict[str, Any] | None,
        Field(description='File system information on client. Read-write.'),
    ] = None
    folder: Annotated[
        Folder | Dict[str, Any] | None,
        Field(description='Folder metadata, if the item is a folder. Read-only.'),
    ] = None
    image: Annotated[
        Image | Dict[str, Any] | None,
        Field(description='Image metadata, if the item is an image. Read-only.'),
    ] = None
    list_item: Annotated[
        ListItem | Dict[str, Any] | None,
        Field(
            description='For drives in SharePoint, the associated document library list item. Read-only. Nullable.'
        ),
    ] = None
    location: Annotated[
        GeoCoordinates | Dict[str, Any] | None,
        Field(
            description='Location metadata, if the item has location data. Read-only.'
        ),
    ] = None
    malware: Annotated[
        Malware | Dict[str, Any] | None,
        Field(
            description='Malware metadata, if the item was detected to contain malware. Read-only.'
        ),
    ] = None
    package: Annotated[
        Package | Dict[str, Any] | None,
        Field(
            description='If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.'
        ),
    ] = None
    pending_operations: Annotated[
        PendingOperations | Dict[str, Any] | None,
        Field(
            description='If present, indicates that one or more operations that might affect the state of the driveItem are pending completion. Read-only.'
        ),
    ] = None
    permissions: Annotated[
        List[Permission] | None,
        Field(description='The set of permissions for the item. Read-only. Nullable.'),
    ] = None
    photo: Annotated[
        Photo | Dict[str, Any] | None,
        Field(description='Photo metadata, if the item is a photo. Read-only.'),
    ] = None
    publication: Annotated[
        PublicationFacet | Dict[str, Any] | None,
        Field(
            description="Provides information about the published or checked-out state of an item, in locations that support such actions. This property isn't returned by default. Read-only."
        ),
    ] = None
    remote_item: Annotated[
        RemoteItem | Dict[str, Any] | None,
        Field(
            description='Remote item data, if the item is shared from a drive other than the one being accessed. Read-only.'
        ),
    ] = None
    retention_label: Annotated[
        ItemRetentionLabel | Dict[str, Any] | None,
        Field(
            description='Information about retention label and settings enforced on the driveItem. Read-write.'
        ),
    ] = None
    root: Annotated[
        Root | Dict[str, Any] | None,
        Field(
            description='If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive.'
        ),
    ] = None
    search_result: Annotated[
        SearchResult | Dict[str, Any] | None,
        Field(
            description='Search metadata, if the item is from a search result. Read-only.'
        ),
    ] = None
    shared: Annotated[
        Shared | Dict[str, Any] | None,
        Field(
            description='Indicates that the item was shared with others and provides information about the shared state of the item. Read-only.'
        ),
    ] = None
    sharepoint_ids: Annotated[
        SharepointIds | Dict[str, Any] | None,
        Field(
            description='Returns identifiers useful for SharePoint REST compatibility. Read-only.'
        ),
    ] = None
    size: Annotated[
        float | None, Field(description='Size of the item in bytes. Read-only.')
    ] = None
    special_folder: Annotated[
        SpecialFolder | Dict[str, Any] | None,
        Field(
            description='If the current item is also available as a special folder, this facet is returned. Read-only.'
        ),
    ] = None
    subscriptions: Annotated[
        List[Subscription] | None,
        Field(
            description='The set of subscriptions on the item. Only supported on the root of a drive.'
        ),
    ] = None
    thumbnails: Annotated[
        List[ThumbnailSet] | None,
        Field(
            description='Collection of thumbnailSet objects associated with the item. For more information, see getting thumbnails. Read-only. Nullable.'
        ),
    ] = None
    versions: Annotated[
        List[DriveItemVersion] | None,
        Field(
            description='The list of previous versions of the item. For more info, see getting previous versions. Read-only. Nullable.'
        ),
    ] = None
    video: Annotated[
        Video | Dict[str, Any] | None,
        Field(description='Video metadata, if the item is a video. Read-only.'),
    ] = None
    web_dav_url: Annotated[
        str | None, Field(description='WebDAV compatible URL for the item.')
    ] = None
    workbook: Annotated[
        Workbook | Dict[str, Any] | None,
        Field(
            description="For files that are Excel spreadsheets, access to the workbook API to work with the spreadsheet's contents. Nullable."
        ),
    ] = None


class ListModel(BaseItem):
    field_odata_type: str
    columns: Annotated[
        List[ColumnDefinition] | None,
        Field(description='The collection of field definitions for this list.'),
    ] = None
    content_types: Annotated[
        List[ContentType] | None,
        Field(description='The collection of content types present in this list.'),
    ] = None
    display_name: Annotated[
        str | None, Field(description='The displayable title of the list.')
    ] = None
    drive: Annotated[
        Drive | Dict[str, Any] | None,
        Field(
            description='Allows access to the list as a drive resource with driveItems. Only present on document libraries.'
        ),
    ] = None
    items: Annotated[
        List[ListItem] | None, Field(description='All items contained in the list.')
    ] = None
    list: Annotated[
        ListInfo | Dict[str, Any] | None,
        Field(description='Contains more details about the list.'),
    ] = None
    operations: Annotated[
        List[RichLongRunningOperation] | None,
        Field(description='The collection of long-running operations on the list.'),
    ] = None
    sharepoint_ids: Annotated[
        SharepointIds | Dict[str, Any] | None,
        Field(
            description='Returns identifiers useful for SharePoint REST compatibility. Read-only.'
        ),
    ] = None
    subscriptions: Annotated[
        List[Subscription] | None,
        Field(description='The set of subscriptions on the list.'),
    ] = None
    system: Annotated[
        SystemFacet | Dict[str, Any] | None,
        Field(
            description='If present, indicates that the list is system-managed. Read-only.'
        ),
    ] = None


class ListItem(BaseItem):
    field_odata_type: str
    analytics: Annotated[
        ItemAnalytics | Dict[str, Any] | None,
        Field(
            description='Analytics about the view activities that took place on this item.'
        ),
    ] = None
    content_type: Annotated[
        ContentTypeInfo | Dict[str, Any] | None,
        Field(description='The content type of this list item'),
    ] = None
    document_set_versions: Annotated[
        List[DocumentSetVersion] | None,
        Field(
            description='Version information for a document set version created by a user.'
        ),
    ] = None
    drive_item: Annotated[
        DriveItem | Dict[str, Any] | None,
        Field(
            description='For document libraries, the driveItem relationship exposes the listItem as a driveItem'
        ),
    ] = None
    fields: Annotated[
        FieldValueSet | Dict[str, Any] | None,
        Field(description='The values of the columns set on this list item.'),
    ] = None
    sharepoint_ids: Annotated[
        SharepointIds | Dict[str, Any] | None,
        Field(
            description='Returns identifiers useful for SharePoint REST compatibility. Read-only.'
        ),
    ] = None
    versions: Annotated[
        List[ListItemVersion] | None,
        Field(description='The list of previous versions of the list item.'),
    ] = None


class Site(BaseItem):
    field_odata_type: str
    analytics: Annotated[
        ItemAnalytics | Dict[str, Any] | None,
        Field(
            description='Analytics about the view activities that took place on this site.'
        ),
    ] = None
    columns: Annotated[
        List[ColumnDefinition] | None,
        Field(
            description='The collection of column definitions reusable across lists under this site.'
        ),
    ] = None
    content_types: Annotated[
        List[ContentType] | None,
        Field(description='The collection of content types defined for this site.'),
    ] = None
    display_name: Annotated[
        str | None, Field(description='The full title for the site. Read-only.')
    ] = None
    drive: Annotated[
        Drive | Dict[str, Any] | None,
        Field(description='The default drive (document library) for this site.'),
    ] = None
    drives: Annotated[
        List[Drive] | None,
        Field(
            description='The collection of drives (document libraries) under this site.'
        ),
    ] = None
    error: PublicError | Dict[str, Any] | None = None
    external_columns: List[ColumnDefinition] | None = None
    is_personal_site: Annotated[
        bool | None,
        Field(description='Identifies whether the site is personal or not. Read-only.'),
    ] = None
    items: Annotated[
        List[BaseItem] | None,
        Field(
            description="Used to address any item contained in this site. This collection can't be enumerated."
        ),
    ] = None
    lists: Annotated[
        List[ListModel] | None,
        Field(description='The collection of lists under this site.'),
    ] = None
    onenote: Annotated[
        Onenote | Dict[str, Any] | None,
        Field(description='Calls the OneNote service for notebook related operations.'),
    ] = None
    operations: Annotated[
        List[RichLongRunningOperation] | None,
        Field(description='The collection of long-running operations on the site.'),
    ] = None
    pages: Annotated[
        List[BaseSitePage] | None,
        Field(
            description='The collection of pages in the baseSitePages list in this site.'
        ),
    ] = None
    permissions: Annotated[
        List[Permission] | None,
        Field(description='The permissions associated with the site. Nullable.'),
    ] = None
    root: Annotated[
        Root | Dict[str, Any] | None,
        Field(
            description='If present, provides the root site in the site collection. Read-only.'
        ),
    ] = None
    sharepoint_ids: Annotated[
        SharepointIds | Dict[str, Any] | None,
        Field(
            description='Returns identifiers useful for SharePoint REST compatibility. Read-only.'
        ),
    ] = None
    site_collection: Annotated[
        SiteCollection | Dict[str, Any] | None,
        Field(
            description="Provides details about the site's site collection. Available only on the root site. Read-only."
        ),
    ] = None
    sites: Annotated[
        List[Site] | None,
        Field(description='The collection of the sub-sites under this site.'),
    ] = None
    term_store: Annotated[
        termStore.Store | Dict[str, Any] | None,
        Field(description='The default termStore under this site.'),
    ] = None
    term_stores: Annotated[
        List[termStore.Store] | None,
        Field(description='The collection of termStores under this site.'),
    ] = None


class Printer(PrinterBase):
    field_odata_type: str
    connectors: Annotated[
        List[PrintConnector] | None,
        Field(description='The connectors that are associated with the printer.'),
    ] = None
    has_physical_device: Annotated[
        bool | None,
        Field(
            description='True if the printer has a physical device for printing. Read-only.'
        ),
    ] = None
    is_shared: Annotated[
        bool | None,
        Field(description='True if the printer is shared; false otherwise. Read-only.'),
    ] = None
    last_seen_date_time: Annotated[
        datetime | None,
        Field(
            description='The most recent dateTimeOffset when a printer interacted with Universal Print. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    registered_date_time: Annotated[
        datetime | None,
        Field(
            description='The DateTimeOffset when the printer was registered. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    shares: Annotated[
        List[PrinterShare] | None,
        Field(
            description='The list of printerShares that are associated with the printer. Currently, only one printerShare can be associated with the printer. Read-only. Nullable.'
        ),
    ] = None
    task_triggers: Annotated[
        List[PrintTaskTrigger] | None,
        Field(
            description='A list of task triggers that are associated with the printer.'
        ),
    ] = None


class PrinterShare(PrinterBase):
    field_odata_type: str
    allow_all_users: Annotated[
        bool | None,
        Field(
            description='If true, all users and groups will be granted access to this printer share. This supersedes the allow lists defined by the allowedUsers and allowedGroups navigation properties.'
        ),
    ] = None
    allowed_groups: Annotated[
        List[Group] | None,
        Field(
            description='The groups whose users have access to print using the printer.'
        ),
    ] = None
    allowed_users: Annotated[
        List[User] | None,
        Field(description='The users who have access to print using the printer.'),
    ] = None
    created_date_time: Annotated[
        datetime | None,
        Field(
            description='The DateTimeOffset when the printer share was created. Read-only.',
            pattern='^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$',
        ),
    ] = None
    printer: Annotated[
        Printer | Dict[str, Any] | None,
        Field(description='The printer that this printer share is related to.'),
    ] = None
    view_point: Annotated[
        PrinterShareViewpoint | Dict[str, Any] | None,
        Field(
            description='Additional data for a printer share as viewed by the signed-in user.'
        ),
    ] = None


class AssociatedTeamInfo(TeamInfo):
    field_odata_type: str


class SharedWithChannelTeamInfo(TeamInfo):
    field_odata_type: str
    allowed_members: Annotated[
        List[ConversationMember] | None,
        Field(
            description='A collection of team members who have access to the shared channel.'
        ),
    ] = None
    is_host_team: Annotated[
        bool | None,
        Field(description='Indicates whether the team is the host of the channel.'),
    ] = None


# WorkbookOperationError.model_rebuild()
# ContactFolder.model_rebuild()
# Post.model_rebuild()
# UnifiedRoleDefinition.model_rebuild()
# MailFolder.model_rebuild()
# ChatMessage.model_rebuild()
# ActivityHistoryItem.model_rebuild()
# BaseItem.model_rebuild()
# Calendar.model_rebuild()
# Channel.model_rebuild()
# ColumnDefinition.model_rebuild()
# ContentType.model_rebuild()
# Group.model_rebuild()
# ItemActivity.model_rebuild()
# ManagedDevice.model_rebuild()
# Notebook.model_rebuild()
# Onenote.model_rebuild()
# OnenotePage.model_rebuild()
# OnenoteSection.model_rebuild()
# PrintJob.model_rebuild()
# PrintTask.model_rebuild()
# TermColumn.model_rebuild()
# User.model_rebuild()
# UserPrint.model_rebuild()
# UserTeamwork.model_rebuild()
# Workbook.model_rebuild()
# WorkbookChart.model_rebuild()
# WorkbookNamedItem.model_rebuild()
# WorkbookPivotTable.model_rebuild()
# WorkbookTable.model_rebuild()
# BaseSitePage.model_rebuild()
# Drive.model_rebuild()
# DriveItem.model_rebuild()
# ListModel.model_rebuild()
# ListItem.model_rebuild()
# Site.model_rebuild()
# Printer.model_rebuild()
