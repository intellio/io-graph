# generated by datamodel-codegen:
#   filename:  https://github.com/microsoftgraph/msgraph-metadata/raw/refs/heads/master/openapi/v1.0/openapi.yaml
#   timestamp: 2025-02-01T01:07:47+00:00

from __future__ import annotations

from datetime import datetime, timedelta
from decimal import Decimal
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field
from typing_extensions import Annotated

from ... import ReferenceNumeric
from ... import (
    BaseCollectionPaginationCountResponse,
)
from . import CommunicationsIdentitySet
from . import Identity as Identity_1
from . import IdentitySet
from . import Entity
from . import Identity


class AdministrativeUnitInfo(BaseModel):
    id: Annotated[
        Optional[str],
        Field(description='Unique identifier for the administrative unit.'),
    ] = None
    field_odata_type: str


class DirectRoutingLogRow(BaseModel):
    callee_number: Annotated[
        Optional[str],
        Field(
            description='Number of the user or bot who received the call. E.164 format, but might include other data.'
        ),
    ] = None
    call_end_sub_reason: Annotated[
        Optional[float],
        Field(
            description='In addition to the SIP codes, Microsoft has subcodes that indicate the specific issue.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    caller_number: Annotated[
        Optional[str],
        Field(
            description='Number of the user or bot who made the call. E.164 format, but might include other data.'
        ),
    ] = None
    call_type: Annotated[
        Optional[str], Field(description='Call type and direction.')
    ] = None
    correlation_id: Annotated[
        Optional[str],
        Field(
            description='Identifier for the call that you can use when calling Microsoft Support. GUID.'
        ),
    ] = None
    duration: Annotated[
        Optional[float],
        Field(
            description='Duration of the call in seconds.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    end_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Only exists for successful (fully established) calls. Time when call ended.',
        ),
    ] = None
    failure_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Only exists for failed (not fully established) calls.',
        ),
    ] = None
    final_sip_code: Annotated[
        Optional[float],
        Field(
            description='The final response code with which the call ended. For more information, see RFC 3261.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    final_sip_code_phrase: Annotated[
        Optional[str],
        Field(description='Description of the SIP code and Microsoft subcode.'),
    ] = None
    id: Annotated[Optional[str], Field(description='Unique call identifier. GUID.')] = (
        None
    )
    invite_date_time: Annotated[
        Optional[datetime],
        Field(
            description='The date and time when the initial invite was sent.',
        ),
    ] = None
    media_bypass_enabled: Annotated[
        Optional[bool],
        Field(description='Indicates whether the trunk was enabled for media bypass.'),
    ] = None
    media_path_location: Annotated[
        Optional[str],
        Field(description='The datacenter used for media path in a nonbypass call.'),
    ] = None
    signaling_location: Annotated[
        Optional[str],
        Field(
            description='The datacenter used for signaling for both bypass and nonbypass calls.'
        ),
    ] = None
    start_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Call start time.For failed and unanswered calls, this value can be equal to the invite or failure time.',
        ),
    ] = None
    successful_call: Annotated[
        Optional[bool], Field(description='Success or attempt.')
    ] = None
    trunk_fully_qualified_domain_name: Annotated[
        Optional[str],
        Field(
            description='Fully qualified domain name of the session border controller.'
        ),
    ] = None
    user_display_name: Annotated[
        Optional[str], Field(description='Display name of the user.')
    ] = None
    user_id: Annotated[
        Optional[str],
        Field(
            description="Calling user's ID in Microsoft Graph. This and other user information is null/empty for bot call types. GUID."
        ),
    ] = None
    user_principal_name: Annotated[
        Optional[str],
        Field(
            description="UserPrincipalName (sign-in name) in Microsoft Entra ID. This value is usually the same as the user's SIP Address, and can be the same as the user's email address."
        ),
    ] = None
    field_odata_type: str


class FeedbackTokenSet(BaseModel):
    field_odata_type: str


class TraceRouteHop(BaseModel):
    hop_count: Annotated[
        Optional[float],
        Field(
            description='The network path count of this hop that was used to compute the RTT.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    ip_address: Annotated[
        Optional[str],
        Field(description='IP address used for this hop in the network trace.'),
    ] = None
    round_trip_time: Annotated[
        Optional[timedelta],
        Field(
            description='The time from when the trace route packet was sent from the client to this hop and back to the client, denoted in ISO 8601 format. For example, 1 second is denoted as PT1S, where P is the duration designator, T is the time designator, and S is the second designator.',
        ),
    ] = None
    field_odata_type: str


class UserAgent(BaseModel):
    application_version: Annotated[
        Optional[str],
        Field(
            description='Identifies the version of application software used by this endpoint.'
        ),
    ] = None
    header_value: Annotated[
        Optional[str],
        Field(description='User-agent header value reported by this endpoint.'),
    ] = None
    field_odata_type: str


class UserIdentity(Identity):
    user_principal_name: Optional[str] = None
    field_odata_type: str


class AudioCodec(Enum):
    unknown = 'unknown'
    invalid = 'invalid'
    cn = 'cn'
    pcma = 'pcma'
    pcmu = 'pcmu'
    amr_wide = 'amrWide'
    g722 = 'g722'
    g7221 = 'g7221'
    g7221c = 'g7221c'
    g729 = 'g729'
    multi_channel_audio = 'multiChannelAudio'
    muchv2 = 'muchv2'
    opus = 'opus'
    satin = 'satin'
    satin_fullband = 'satinFullband'
    rt_audio8 = 'rtAudio8'
    rt_audio16 = 'rtAudio16'
    silk = 'silk'
    silk_narrow = 'silkNarrow'
    silk_wide = 'silkWide'
    siren = 'siren'
    xms_rta = 'xmsRta'
    unknown_future_value = 'unknownFutureValue'


class CallType(Enum):
    unknown = 'unknown'
    group_call = 'groupCall'
    peer_to_peer = 'peerToPeer'
    unknown_future_value = 'unknownFutureValue'


class ClientPlatform(Enum):
    unknown = 'unknown'
    windows = 'windows'
    mac_os = 'macOS'
    i_os = 'iOS'
    android = 'android'
    web = 'web'
    ip_phone = 'ipPhone'
    room_system = 'roomSystem'
    surface_hub = 'surfaceHub'
    holo_lens = 'holoLens'
    unknown_future_value = 'unknownFutureValue'


class FailureStage(Enum):
    unknown = 'unknown'
    call_setup = 'callSetup'
    midcall = 'midcall'
    unknown_future_value = 'unknownFutureValue'


class MediaStreamDirection(Enum):
    caller_to_callee = 'callerToCallee'
    callee_to_caller = 'calleeToCaller'


class Modality(Enum):
    audio = 'audio'
    video = 'video'
    video_based_screen_sharing = 'videoBasedScreenSharing'
    data = 'data'
    screen_sharing = 'screenSharing'
    unknown_future_value = 'unknownFutureValue'


class NetworkConnectionType(Enum):
    unknown = 'unknown'
    wired = 'wired'
    wifi = 'wifi'
    mobile = 'mobile'
    tunnel = 'tunnel'
    unknown_future_value = 'unknownFutureValue'


class NetworkTransportProtocol(Enum):
    unknown = 'unknown'
    udp = 'udp'
    tcp = 'tcp'
    unknown_future_value = 'unknownFutureValue'


class ProductFamily(Enum):
    unknown = 'unknown'
    teams = 'teams'
    skype_for_business = 'skypeForBusiness'
    lync = 'lync'
    unknown_future_value = 'unknownFutureValue'
    azure_communication_services = 'azureCommunicationServices'


class PstnCallDurationSource(Enum):
    microsoft = 'microsoft'
    operator = 'operator'


class ServiceRole(Enum):
    unknown = 'unknown'
    custom_bot = 'customBot'
    skype_for_business_microsoft_teams_gateway = 'skypeForBusinessMicrosoftTeamsGateway'
    skype_for_business_audio_video_mcu = 'skypeForBusinessAudioVideoMcu'
    skype_for_business_application_sharing_mcu = 'skypeForBusinessApplicationSharingMcu'
    skype_for_business_call_queues = 'skypeForBusinessCallQueues'
    skype_for_business_auto_attendant = 'skypeForBusinessAutoAttendant'
    mediation_server = 'mediationServer'
    mediation_server_cloud_connector_edition = 'mediationServerCloudConnectorEdition'
    exchange_unified_messaging_service = 'exchangeUnifiedMessagingService'
    media_controller = 'mediaController'
    conferencing_announcement_service = 'conferencingAnnouncementService'
    conferencing_attendant = 'conferencingAttendant'
    audio_teleconferencer_controller = 'audioTeleconferencerController'
    skype_for_business_unified_communication_application_platform = (
        'skypeForBusinessUnifiedCommunicationApplicationPlatform'
    )
    response_group_service_announcement_service = (
        'responseGroupServiceAnnouncementService'
    )
    gateway = 'gateway'
    skype_translator = 'skypeTranslator'
    skype_for_business_attendant = 'skypeForBusinessAttendant'
    response_group_service = 'responseGroupService'
    voicemail = 'voicemail'
    unknown_future_value = 'unknownFutureValue'


class UserFeedbackRating(Enum):
    not_rated = 'notRated'
    bad = 'bad'
    poor = 'poor'
    fair = 'fair'
    good = 'good'
    excellent = 'excellent'
    unknown_future_value = 'unknownFutureValue'


class VideoCodec(Enum):
    unknown = 'unknown'
    invalid = 'invalid'
    av1 = 'av1'
    h263 = 'h263'
    h264 = 'h264'
    h264s = 'h264s'
    h264uc = 'h264uc'
    h265 = 'h265'
    rtvc1 = 'rtvc1'
    rt_video = 'rtVideo'
    xrtvc1 = 'xrtvc1'
    unknown_future_value = 'unknownFutureValue'


class WifiBand(Enum):
    unknown = 'unknown'
    frequency24_g_hz = 'frequency24GHz'
    frequency50_g_hz = 'frequency50GHz'
    frequency60_g_hz = 'frequency60GHz'
    unknown_future_value = 'unknownFutureValue'


class WifiRadioType(Enum):
    unknown = 'unknown'
    wifi80211a = 'wifi80211a'
    wifi80211b = 'wifi80211b'
    wifi80211g = 'wifi80211g'
    wifi80211n = 'wifi80211n'
    wifi80211ac = 'wifi80211ac'
    wifi80211ax = 'wifi80211ax'
    unknown_future_value = 'unknownFutureValue'


class ParticipantBase(Entity):
    administrative_unit_infos: Annotated[
        Optional[List[AdministrativeUnitInfo]],
        Field(
            description='List of administrativeUnitInfo objects for the call participant.'
        ),
    ] = None
    identity: Annotated[
        Optional[Union[CommunicationsIdentitySet, Dict[str, Any]]],
        Field(description='The identity of the call participant.'),
    ] = None
    field_odata_type: str


class ClientUserAgent(UserAgent):
    azure_ad_app_id: Annotated[
        Optional[str],
        Field(
            description='The unique identifier of the Microsoft Entra application used by this endpoint.'
        ),
    ] = None
    communication_service_id: Annotated[
        Optional[str],
        Field(
            description='Immutable resource identifier of the Azure Communication Service associated with this endpoint based on Communication Services APIs.'
        ),
    ] = None
    platform: Optional[ClientPlatform] = None
    product_family: Optional[ProductFamily] = None
    field_odata_type: str


class DeviceInfo(BaseModel):
    capture_device_driver: Annotated[
        Optional[str],
        Field(
            description='Name of the capture device driver used by the media endpoint.'
        ),
    ] = None
    capture_device_name: Annotated[
        Optional[str],
        Field(description='Name of the capture device used by the media endpoint.'),
    ] = None
    capture_not_functioning_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected the capture device was not working properly.'
        ),
    ] = None
    cpu_insufficent_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected the CPU resources available were insufficient and caused poor quality of the audio sent and received.'
        ),
    ] = None
    device_clipping_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected clipping in the captured audio that caused poor quality of the audio being sent.'
        ),
    ] = None
    device_glitch_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected glitches or gaps in the audio played or captured that caused poor quality of the audio being sent or received.'
        ),
    ] = None
    howling_event_count: Annotated[
        Optional[float],
        Field(
            description='Number of times during the call that the media endpoint detected howling or screeching audio.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    initial_signal_level_root_mean_square: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='The root mean square (RMS) of the incoming signal of up to the first 30 seconds of the call.'
        ),
    ] = None
    low_speech_level_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected low speech level that caused poor quality of the audio being sent.'
        ),
    ] = None
    low_speech_to_noise_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected low speech to noise level that caused poor quality of the audio being sent.'
        ),
    ] = None
    mic_glitch_rate: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description="Glitches per 5 minute interval for the media endpoint's microphone."
        ),
    ] = None
    received_noise_level: Annotated[
        Optional[float],
        Field(
            description='Average energy level of received audio for audio classified as mono noise or left channel of stereo noise by the media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    received_signal_level: Annotated[
        Optional[float],
        Field(
            description='Average energy level of received audio for audio classified as mono speech, or left channel of stereo speech by the media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    render_device_driver: Annotated[
        Optional[str],
        Field(
            description='Name of the render device driver used by the media endpoint.'
        ),
    ] = None
    render_device_name: Annotated[
        Optional[str],
        Field(description='Name of the render device used by the media endpoint.'),
    ] = None
    render_mute_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that media endpoint detected device render is muted.'
        ),
    ] = None
    render_not_functioning_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected the render device was not working properly.'
        ),
    ] = None
    render_zero_volume_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that media endpoint detected device render volume is set to 0.'
        ),
    ] = None
    sent_noise_level: Annotated[
        Optional[float],
        Field(
            description='Average energy level of sent audio for audio classified as mono noise or left channel of stereo noise by the media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    sent_signal_level: Annotated[
        Optional[float],
        Field(
            description='Average energy level of sent audio for audio classified as mono speech, or left channel of stereo speech by the media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    speaker_glitch_rate: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description="Glitches per 5 minute internal for the media endpoint's loudspeaker."
        ),
    ] = None
    field_odata_type: str


class Endpoint(BaseModel):
    user_agent: Annotated[
        Optional[Union[UserAgent, Dict[str, Any]]],
        Field(description='User-agent reported by this endpoint.'),
    ] = None
    field_odata_type: str


class FailureInfo(BaseModel):
    reason: Annotated[
        Optional[str],
        Field(description='Classification of why a call or portion of a call failed.'),
    ] = None
    stage: Optional[FailureStage] = None
    field_odata_type: str


class MediaStream(BaseModel):
    audio_codec: Annotated[
        Optional[Union[AudioCodec, Dict[str, Any]]],
        Field(
            description='Codec name used to encode audio for transmission on the network. Possible values are: unknown, invalid, cn, pcma, pcmu, amrWide, g722, g7221, g7221c, g729, multiChannelAudio, muchv2, opus, satin, satinFullband, rtAudio8, rtAudio16, silk, silkNarrow, silkWide, siren, xmsRta, unknownFutureValue.'
        ),
    ] = None
    average_audio_degradation: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Average Network Mean Opinion Score degradation for stream. Represents how much the network loss and jitter has impacted the quality of received audio.'
        ),
    ] = None
    average_audio_network_jitter: Annotated[
        Optional[timedelta],
        Field(
            description="Average jitter for the stream computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.",
        ),
    ] = None
    average_bandwidth_estimate: Annotated[
        Optional[float],
        Field(
            description='Average estimated bandwidth available between two endpoints in bits per second.'
        ),
    ] = None
    average_freeze_duration: Annotated[
        Optional[timedelta],
        Field(
            description='Average duration of the received freezing time in the video stream.',
        ),
    ] = None
    average_jitter: Annotated[
        Optional[timedelta],
        Field(
            description="Average jitter for the stream computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.",
        ),
    ] = None
    average_packet_loss_rate: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(description='Average packet loss rate for stream.'),
    ] = None
    average_ratio_of_concealed_samples: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Ratio of the number of audio frames with samples generated by packet loss concealment to the total number of audio frames.'
        ),
    ] = None
    average_received_frame_rate: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Average frames per second received for all video streams computed over the duration of the session.'
        ),
    ] = None
    average_round_trip_time: Annotated[
        Optional[timedelta],
        Field(
            description="Average network propagation round-trip time computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.",
        ),
    ] = None
    average_video_frame_loss_percentage: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Average percentage of video frames lost as displayed to the user.'
        ),
    ] = None
    average_video_frame_rate: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Average frames per second received for a video stream, computed over the duration of the session.'
        ),
    ] = None
    average_video_packet_loss_rate: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Average fraction of packets lost, as specified in RFC 3550, computed over the duration of the session.'
        ),
    ] = None
    end_date_time: Annotated[
        Optional[datetime],
        Field(
            description='UTC time when the stream ended. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. This field is only available for streams that use the SIP protocol.',
        ),
    ] = None
    is_audio_forward_error_correction_used: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether the forward error correction (FEC) was used at some point during the session. The default value is null.'
        ),
    ] = None
    low_frame_rate_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call where frame rate is less than 7.5 frames per second.'
        ),
    ] = None
    low_video_processing_capability_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the client is running less than 70% expected video processing capability.'
        ),
    ] = None
    max_audio_network_jitter: Annotated[
        Optional[timedelta],
        Field(
            description="Maximum of audio network jitter computed over each of the 20 second windows during the session, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.",
        ),
    ] = None
    max_jitter: Annotated[
        Optional[timedelta],
        Field(
            description="Maximum jitter for the stream computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.",
        ),
    ] = None
    max_packet_loss_rate: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(description='Maximum packet loss rate for the stream.'),
    ] = None
    max_ratio_of_concealed_samples: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(description='Maximum ratio of packets concealed by the healer.'),
    ] = None
    max_round_trip_time: Annotated[
        Optional[timedelta],
        Field(
            description="Maximum network propagation round-trip time computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.",
        ),
    ] = None
    packet_utilization: Annotated[
        Optional[float], Field(description='Packet count for the stream.')
    ] = None
    post_forward_error_correction_packet_loss_rate: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Packet loss rate after FEC has been applied aggregated across all video streams and codecs.'
        ),
    ] = None
    rms_freeze_duration: Annotated[
        Optional[timedelta],
        Field(
            description='Average duration of the received freezing time in the video stream represented in root mean square.',
        ),
    ] = None
    start_date_time: Annotated[
        Optional[datetime],
        Field(
            description='UTC time when the stream started. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. This field is only available for streams that use the SIP protocol.',
        ),
    ] = None
    stream_direction: Optional[MediaStreamDirection] = None
    stream_id: Annotated[
        Optional[str], Field(description='Unique identifier for the stream.')
    ] = None
    video_codec: Annotated[
        Optional[Union[VideoCodec, Dict[str, Any]]],
        Field(
            description='Codec name used to encode video for transmission on the network. Possible values are: unknown, invalid, av1, h263, h264, h264s, h264uc, h265, rtvc1, rtVideo, xrtvc1, unknownFutureValue.'
        ),
    ] = None
    was_media_bypassed: Annotated[
        Optional[bool],
        Field(
            description='True if the media stream bypassed the Mediation Server and went straight between client and PSTN Gateway/PBX, false otherwise.'
        ),
    ] = None
    field_odata_type: str


class NetworkInfo(BaseModel):
    bandwidth_low_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected the available bandwidth or bandwidth policy was low enough to cause poor quality of the audio sent.'
        ),
    ] = None
    basic_service_set_identifier: Annotated[
        Optional[str],
        Field(
            description='The wireless LAN basic service set identifier of the media endpoint used to connect to the network.'
        ),
    ] = None
    connection_type: Optional[NetworkConnectionType] = None
    delay_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected the network delay was significant enough to impact the ability to have real-time two-way communication.'
        ),
    ] = None
    dns_suffix: Annotated[
        Optional[str],
        Field(
            description='DNS suffix associated with the network adapter of the media endpoint.'
        ),
    ] = None
    ip_address: Annotated[
        Optional[str], Field(description='IP address of the media endpoint.')
    ] = None
    link_speed: Annotated[
        Optional[float],
        Field(
            description='Link speed in bits per second reported by the network adapter used by the media endpoint.'
        ),
    ] = None
    mac_address: Annotated[
        Optional[str],
        Field(
            description="The media access control (MAC) address of the media endpoint's network device. This value may be missing or shown as 02:00:00:00:00:00 due to operating system privacy policies."
        ),
    ] = None
    network_transport_protocol: Optional[NetworkTransportProtocol] = None
    port: Annotated[
        Optional[float],
        Field(
            description='Network port number used by media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    received_quality_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected the network was causing poor quality of the audio received.'
        ),
    ] = None
    reflexive_ip_address: Annotated[
        Optional[str],
        Field(
            description='IP address of the media endpoint as seen by the media relay server. This is typically the public internet IP address associated to the endpoint.'
        ),
    ] = None
    relay_ip_address: Annotated[
        Optional[str],
        Field(
            description='IP address of the media relay server allocated by the media endpoint.'
        ),
    ] = None
    relay_port: Annotated[
        Optional[float],
        Field(
            description='Network port number allocated on the media relay server by the media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    sent_quality_event_ratio: Annotated[
        Optional[Union[float, str, ReferenceNumeric]],
        Field(
            description='Fraction of the call that the media endpoint detected the network was causing poor quality of the audio sent.'
        ),
    ] = None
    subnet: Annotated[
        Optional[str],
        Field(description='Subnet used for media stream by the media endpoint.'),
    ] = None
    trace_route_hops: Annotated[
        Optional[List[TraceRouteHop]],
        Field(
            description='List of network trace route hops collected for this media stream.*'
        ),
    ] = None
    wifi_band: Optional[WifiBand] = None
    wifi_battery_charge: Annotated[
        Optional[float],
        Field(
            description='Estimated remaining battery charge in percentage reported by the media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    wifi_channel: Annotated[
        Optional[float],
        Field(
            description='WiFi channel used by the media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    wifi_microsoft_driver: Annotated[
        Optional[str],
        Field(
            description='Name of the Microsoft WiFi driver used by the media endpoint. Value may be localized based on the language used by endpoint.'
        ),
    ] = None
    wifi_microsoft_driver_version: Annotated[
        Optional[str],
        Field(
            description='Version of the Microsoft WiFi driver used by the media endpoint.'
        ),
    ] = None
    wifi_radio_type: Optional[WifiRadioType] = None
    wifi_signal_strength: Annotated[
        Optional[float],
        Field(
            description='WiFi signal strength in percentage reported by the media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    wifi_vendor_driver: Annotated[
        Optional[str],
        Field(
            description='Name of the WiFi driver used by the media endpoint. Value may be localized based on the language used by endpoint.'
        ),
    ] = None
    wifi_vendor_driver_version: Annotated[
        Optional[str],
        Field(description='Version of the WiFi driver used by the media endpoint.'),
    ] = None
    field_odata_type: str


class PstnCallLogRow(BaseModel):
    call_duration_source: Annotated[
        Optional[Union[PstnCallDurationSource, Dict[str, Any]]],
        Field(
            description='The source of the call duration data. If the call uses a third-party telecommunications operator via the Operator Connect Program, the operator can provide their own call duration data. In this case, the property value is operator. Otherwise, the value is microsoft.'
        ),
    ] = None
    callee_number: Annotated[
        Optional[str], Field(description='Number dialed in E.164 format.')
    ] = None
    caller_number: Annotated[
        Optional[str],
        Field(
            description='Number that received the call for inbound calls or the number dialed for outbound calls. E.164 format.'
        ),
    ] = None
    call_id: Annotated[
        Optional[str],
        Field(description='Call identifier. Not guaranteed to be unique.'),
    ] = None
    call_type: Annotated[
        Optional[str],
        Field(
            description='Indicates whether the call was a PSTN outbound or inbound call and the type of call, such as a call placed by a user or an audio conference.'
        ),
    ] = None
    charge: Annotated[
        Optional[Decimal],
        Field(
            description='Amount of money or cost of the call that is charged to your account.'
        ),
    ] = None
    conference_id: Annotated[
        Optional[str], Field(description='ID of the audio conference.')
    ] = None
    connection_charge: Annotated[
        Optional[Decimal], Field(description='Connection fee price.')
    ] = None
    currency: Annotated[
        Optional[str],
        Field(
            description='Type of currency used to calculate the cost of the call. For details, see (ISO 4217.'
        ),
    ] = None
    destination_context: Annotated[
        Optional[str],
        Field(
            description="Whether the call was domestic (within a country or region) or international (outside a country or region), based on the user's location."
        ),
    ] = None
    destination_name: Annotated[
        Optional[str], Field(description='Country or region dialed.')
    ] = None
    duration: Annotated[
        Optional[float],
        Field(
            description='How long the call was connected, in seconds.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    end_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Call end time.',
        ),
    ] = None
    id: Annotated[Optional[str], Field(description='Unique call identifier. GUID.')] = (
        None
    )
    inventory_type: Annotated[
        Optional[str],
        Field(
            description="User's phone number type, such as a service of toll-free number."
        ),
    ] = None
    license_capability: Annotated[
        Optional[str], Field(description='The license used for the call.')
    ] = None
    operator: Annotated[
        Optional[str],
        Field(
            description='The telecommunications operator which provided PSTN services for this call. This might be Microsoft, or it might be a third-party operator via the Operator Connect Program.'
        ),
    ] = None
    start_date_time: Annotated[
        Optional[datetime],
        Field(
            description='Call start time.',
        ),
    ] = None
    tenant_country_code: Annotated[
        Optional[str],
        Field(
            description='Country code of the tenant. For details, see ISO 3166-1 alpha-2.'
        ),
    ] = None
    usage_country_code: Annotated[
        Optional[str],
        Field(
            description='Country code of the user. For details, see ISO 3166-1 alpha-2.'
        ),
    ] = None
    user_display_name: Annotated[
        Optional[str], Field(description='Display name of the user.')
    ] = None
    user_id: Annotated[
        Optional[str],
        Field(
            description="Calling user's ID in Microsoft Graph. GUID. This and other user info will be null/empty for bot call types (ucapin, ucapout)."
        ),
    ] = None
    user_principal_name: Annotated[
        Optional[str],
        Field(
            description="The user principal name (sign-in name) in Microsoft Entra ID. This is usually the same as the user's SIP address, and can be the same as the user's email address."
        ),
    ] = None
    field_odata_type: str


class ServiceEndpoint(Endpoint):
    field_odata_type: str


class ServiceUserAgent(UserAgent):
    role: Optional[ServiceRole] = None
    field_odata_type: str


class UserFeedback(BaseModel):
    rating: Optional[UserFeedbackRating] = None
    text: Annotated[
        Optional[str],
        Field(
            description='The feedback text provided by the user of this endpoint for the session.'
        ),
    ] = None
    tokens: Annotated[
        Optional[Union[FeedbackTokenSet, Dict[str, Any]]],
        Field(
            description='The set of feedback tokens provided by the user of this endpoint for the session. This is a set of Boolean properties. The property names should not be relied upon since they may change depending on what tokens are offered to the user.'
        ),
    ] = None
    field_odata_type: str


class AdministrativeUnitInfoCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[AdministrativeUnitInfo]] = None


class MediaStreamCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[MediaStream]] = None


class TraceRouteHopCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[TraceRouteHop]] = None


class Organizer(ParticipantBase):
    field_odata_type: str


class Participant(ParticipantBase):
    field_odata_type: str


class Media(BaseModel):
    callee_device: Annotated[
        Optional[Union[DeviceInfo, Dict[str, Any]]],
        Field(
            description='Device information associated with the callee endpoint of this media.'
        ),
    ] = None
    callee_network: Annotated[
        Optional[Union[NetworkInfo, Dict[str, Any]]],
        Field(
            description='Network information associated with the callee endpoint of this media.'
        ),
    ] = None
    caller_device: Annotated[
        Optional[Union[DeviceInfo, Dict[str, Any]]],
        Field(
            description='Device information associated with the caller endpoint of this media.'
        ),
    ] = None
    caller_network: Annotated[
        Optional[Union[NetworkInfo, Dict[str, Any]]],
        Field(
            description='Network information associated with the caller endpoint of this media.'
        ),
    ] = None
    label: Annotated[
        Optional[str],
        Field(
            description='How the media was identified during media negotiation stage.'
        ),
    ] = None
    streams: Annotated[
        Optional[List[MediaStream]],
        Field(description='Network streams associated with this media.'),
    ] = None
    field_odata_type: str


class ParticipantEndpoint(Endpoint):
    associated_identity: Annotated[
        Optional[Union[Identity_1, Dict[str, Any]]],
        Field(description='Identity associated with the endpoint.'),
    ] = None
    cpu_cores_count: Annotated[
        Optional[float],
        Field(
            description='CPU number of cores used by the media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    cpu_name: Annotated[
        Optional[str], Field(description='CPU name used by the media endpoint.')
    ] = None
    cpu_processor_speed_in_mhz: Annotated[
        Optional[float],
        Field(
            description='CPU processor speed used by the media endpoint.',
            ge=-2147483648.0,
            le=2147483647.0,
        ),
    ] = None
    feedback: Annotated[
        Optional[Union[UserFeedback, Dict[str, Any]]],
        Field(
            description='The feedback provided by the user of this endpoint about the quality of the session.'
        ),
    ] = None
    identity: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(
            description='Identity associated with the endpoint. The identity property is deprecated and will stop returning data on June 30, 2026. Going forward, use the associatedIdentity property.'
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(description='Name of the device used by the media endpoint.'),
    ] = None
    field_odata_type: str


class ParticipantCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Participant]] = None


class MediaCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Media]] = None


class Segment(Entity):
    callee: Annotated[
        Optional[Union[Endpoint, Dict[str, Any]]],
        Field(description='Endpoint that answered this segment.'),
    ] = None
    caller: Annotated[
        Optional[Union[Endpoint, Dict[str, Any]]],
        Field(description='Endpoint that initiated this segment.'),
    ] = None
    end_date_time: Annotated[
        Optional[datetime],
        Field(
            description='UTC time when the segment ended. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
        ),
    ] = None
    failure_info: Annotated[
        Optional[Union[FailureInfo, Dict[str, Any]]],
        Field(
            description='Failure information associated with the segment if it failed.'
        ),
    ] = None
    media: Annotated[
        Optional[List[Media]], Field(description='Media associated with this segment.')
    ] = None
    start_date_time: Annotated[
        Optional[datetime],
        Field(
            description='UTC time when the segment started. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
        ),
    ] = None
    field_odata_type: str


class Session(Entity):
    callee: Annotated[
        Optional[Union[Endpoint, Dict[str, Any]]],
        Field(description='Endpoint that answered the session.'),
    ] = None
    caller: Annotated[
        Optional[Union[Endpoint, Dict[str, Any]]],
        Field(description='Endpoint that initiated the session.'),
    ] = None
    end_date_time: Annotated[
        Optional[datetime],
        Field(
            description='UTC time when the last user left the session. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
        ),
    ] = None
    failure_info: Annotated[
        Optional[Union[FailureInfo, Dict[str, Any]]],
        Field(
            description='Failure information associated with the session if the session failed.'
        ),
    ] = None
    is_test: Annotated[
        Optional[bool], Field(description='Specifies whether the session is a test.')
    ] = None
    modalities: Annotated[
        Optional[List[Modality]],
        Field(
            description='List of modalities present in the session. Possible values are: unknown, audio, video, videoBasedScreenSharing, data, screenSharing, unknownFutureValue.'
        ),
    ] = None
    start_date_time: Annotated[
        Optional[datetime],
        Field(
            description='UTC time when the first user joined the session. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
        ),
    ] = None
    segments: Annotated[
        Optional[List[Segment]],
        Field(
            description='The list of segments involved in the session. Read-only. Nullable.'
        ),
    ] = None
    field_odata_type: str


class SessionCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Session]] = None


class SegmentCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[Segment]] = None


class CallRecord(Entity):
    end_date_time: Annotated[
        Optional[datetime],
        Field(
            description='UTC time when the last user left the call. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
        ),
    ] = None
    join_web_url: Annotated[
        Optional[str],
        Field(
            description='Meeting URL associated to the call. May not be available for a peerToPeer call record type.'
        ),
    ] = None
    last_modified_date_time: Annotated[
        Optional[datetime],
        Field(
            description='UTC time when the call record was created. The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z',
        ),
    ] = None
    modalities: Annotated[
        Optional[List[Modality]],
        Field(
            description='List of all the modalities used in the call. Possible values are: unknown, audio, video, videoBasedScreenSharing, data, screenSharing, unknownFutureValue.'
        ),
    ] = None
    organizer: Annotated[
        Optional[Union[IdentitySet, Dict[str, Any]]],
        Field(
            description="The organizing party's identity. The organizer property is deprecated and will stop returning data on June 30, 2026. Going forward, use the organizer_v2 relationship."
        ),
    ] = None
    participants: Annotated[
        Optional[List[IdentitySet]],
        Field(
            description='List of distinct identities involved in the call. Limited to 130 entries. The participants property is deprecated and will stop returning data on June 30, 2026. Going forward, use the participants_v2 relationship.'
        ),
    ] = None
    start_date_time: Annotated[
        Optional[datetime],
        Field(
            description='UTC time when the first user joined the call. The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.',
        ),
    ] = None
    type: Optional[CallType] = None
    version: Annotated[
        Optional[float],
        Field(
            description='Monotonically increasing version of the call record. Higher version call records with the same id includes additional data compared to the lower version.'
        ),
    ] = None
    organizer_v2: Annotated[
        Optional[Union[Organizer, Dict[str, Any]]],
        Field(
            description='Identity of the organizer of the call. This relationship is expanded by default in callRecord methods.'
        ),
    ] = None
    participants_v2: Annotated[
        Optional[List[Participant]],
        Field(description='List of distinct participants in the call.'),
    ] = None
    sessions: Annotated[
        Optional[List[Session]],
        Field(
            description='List of sessions involved in the call. Peer-to-peer calls typically only have one session, whereas group calls typically have at least one session per participant. Read-only. Nullable.'
        ),
    ] = None
    field_odata_type: str


class CallRecordCollectionResponse(BaseCollectionPaginationCountResponse):
    value: Optional[List[CallRecord]] = None
